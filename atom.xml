<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>weeweetan&#39;s blog</title>
  
  <subtitle>GitHub个人站点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weeweetan.github.io/"/>
  <updated>2021-12-02T14:37:48.272Z</updated>
  <id>https://weeweetan.github.io/</id>
  
  <author>
    <name>weeweetan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx的http模块代码分析</title>
    <link href="https://weeweetan.github.io/2021/10/02/Nginx%E7%9A%84http%E6%A8%A1%E5%9D%97%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://weeweetan.github.io/2021/10/02/Nginx的http模块代码分析/</id>
    <published>2021-10-02T11:29:02.000Z</published>
    <updated>2021-12-02T14:37:48.272Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1、代码框架"><a href="#1、代码框架" class="headerlink" title="1、代码框架"></a>1、代码框架</h2><blockquote><p>http模块主要代码放在ngx_http.c这个文件中，接下来我们就来分析下相关代码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="title">ngx_http_block</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_init_phases</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_core_main_conf_t</span> *cmcf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_init_headers_in_hash</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_core_main_conf_t</span> *cmcf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_init_phase_handlers</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_core_main_conf_t</span> *cmcf)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_add_addresses</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_core_srv_conf_t</span> *cscf, <span class="keyword">ngx_http_conf_port_t</span> *port,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_listen_opt_t</span> *lsopt)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_add_address</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_core_srv_conf_t</span> *cscf, <span class="keyword">ngx_http_conf_port_t</span> *port,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_listen_opt_t</span> *lsopt)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_add_server</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_core_srv_conf_t</span> *cscf, <span class="keyword">ngx_http_conf_addr_t</span> *addr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="title">ngx_http_merge_servers</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_core_main_conf_t</span> *cmcf, <span class="keyword">ngx_http_module_t</span> *<span class="keyword">module</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_uint_t</span> ctx_index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="title">ngx_http_merge_locations</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_queue_t</span> *locations, <span class="keyword">void</span> **loc_conf, <span class="keyword">ngx_http_module_t</span> *<span class="keyword">module</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_uint_t</span> ctx_index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_init_locations</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_core_srv_conf_t</span> *cscf, <span class="keyword">ngx_http_core_loc_conf_t</span> *pclcf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_init_static_location_trees</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_core_loc_conf_t</span> *pclcf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_cmp_locations</span><span class="params">(<span class="keyword">const</span> <span class="keyword">ngx_queue_t</span> *one,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">ngx_queue_t</span> *two)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_join_exact_locations</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_queue_t</span> *locations)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ngx_http_create_locations_list</span><span class="params">(<span class="keyword">ngx_queue_t</span> *locations,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_queue_t</span> *q)</span></span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_http_location_tree_node_t</span> *</span><br><span class="line">    ngx_http_create_locations_tree(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_queue_t</span> *locations,</span><br><span class="line">    <span class="keyword">size_t</span> prefix);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_optimize_servers</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_core_main_conf_t</span> *cmcf, <span class="keyword">ngx_array_t</span> *ports)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_server_names</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_core_main_conf_t</span> *cmcf, <span class="keyword">ngx_http_conf_addr_t</span> *addr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_cmp_conf_addrs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *one, <span class="keyword">const</span> <span class="keyword">void</span> *two)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> ngx_libc_cdecl <span class="title">ngx_http_cmp_dns_wildcards</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *one,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">void</span> *two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_init_listening</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_conf_port_t</span> *port)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_listening_t *<span class="title">ngx_http_add_listening</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_conf_addr_t</span> *addr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_add_addrs</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_http_port_t</span> *hport,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_conf_addr_t</span> *addr)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_INET6)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_add_addrs6</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_http_port_t</span> *hport,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">ngx_http_conf_addr_t</span> *addr)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><br>在ngx_http.c文件最前面这部分代码全部是函数声明，接下来看下http模块配置，指令设置、函数指针以及模块结构初始化<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ngx_uint_t</span>   ngx_http_max_module;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ngx_http_output_header_filter_pt  ngx_http_top_header_filter;</span><br><span class="line">ngx_http_output_body_filter_pt    ngx_http_top_body_filter;</span><br><span class="line">ngx_http_request_body_filter_pt   ngx_http_top_request_body_filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ngx_str_t</span>  ngx_http_html_default_types[] = &#123;</span><br><span class="line">    ngx_string(<span class="string">"text/html"</span>),</span><br><span class="line">    ngx_null_string</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http指令</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_command_t</span>  ngx_http_commands[] = &#123;</span><br><span class="line"></span><br><span class="line">    &#123; ngx_string(<span class="string">"http"</span>),</span><br><span class="line">      NGX_MAIN_CONF|NGX_CONF_BLOCK|NGX_CONF_NOARGS,</span><br><span class="line">      ngx_http_block,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="literal">NULL</span> &#125;,</span><br><span class="line"></span><br><span class="line">      ngx_null_command</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//核心模块上下文</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_core_module_t</span>  ngx_http_module_ctx = &#123;</span><br><span class="line">    ngx_string(<span class="string">"http"</span>),</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//http模块定义</span></span><br><span class="line"><span class="keyword">ngx_module_t</span>  ngx_http_module = &#123;</span><br><span class="line">    NGX_MODULE_V1,</span><br><span class="line">    &amp;ngx_http_module_ctx,                  <span class="comment">/* module context */</span></span><br><span class="line">    ngx_http_commands,                     <span class="comment">/* module directives */</span></span><br><span class="line">    NGX_CORE_MODULE,                       <span class="comment">/* module type */</span></span><br><span class="line">    <span class="literal">NULL</span>,                                  <span class="comment">/* init master */</span></span><br><span class="line">    <span class="literal">NULL</span>,                                  <span class="comment">/* init module */</span></span><br><span class="line">    <span class="literal">NULL</span>,                                  <span class="comment">/* init process */</span></span><br><span class="line">    <span class="literal">NULL</span>,                                  <span class="comment">/* init thread */</span></span><br><span class="line">    <span class="literal">NULL</span>,                                  <span class="comment">/* exit thread */</span></span><br><span class="line">    <span class="literal">NULL</span>,                                  <span class="comment">/* exit process */</span></span><br><span class="line">    <span class="literal">NULL</span>,                                  <span class="comment">/* exit master */</span></span><br><span class="line">    NGX_MODULE_V1_PADDING</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p></blockquote><blockquote><p>接下来看下http块解析函数，ngx_http_block函数实现<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_block(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span>                        *rv;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                   mi, m, s;</span><br><span class="line">    <span class="keyword">ngx_conf_t</span>                   pcf;</span><br><span class="line">    <span class="keyword">ngx_http_module_t</span>           *<span class="keyword">module</span>;</span><br><span class="line">    <span class="keyword">ngx_http_conf_ctx_t</span>         *ctx;</span><br><span class="line">    <span class="keyword">ngx_http_core_loc_conf_t</span>    *clcf;</span><br><span class="line">    <span class="keyword">ngx_http_core_srv_conf_t</span>   **cscfp;</span><br><span class="line">    <span class="keyword">ngx_http_core_main_conf_t</span>   *cmcf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否重复配置</span></span><br><span class="line">    <span class="keyword">if</span> (*(<span class="keyword">ngx_http_conf_ctx_t</span> **) conf) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"is duplicate"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the main http context */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请保存上下文的内存</span></span><br><span class="line">    ctx = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_conf_ctx_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">ngx_http_conf_ctx_t</span> **) conf = ctx;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* count the number of the http modules and set up their indices */</span></span><br><span class="line"></span><br><span class="line">    ngx_http_max_module = ngx_count_modules(cf-&gt;cycle, NGX_HTTP_MODULE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the http main_conf context, it is the same in the all http contexts */</span></span><br><span class="line"></span><br><span class="line">    ctx-&gt;main_conf = ngx_pcalloc(cf-&gt;pool,</span><br><span class="line">                                 <span class="keyword">sizeof</span>(<span class="keyword">void</span> *) * ngx_http_max_module);</span><br><span class="line">    <span class="keyword">if</span> (ctx-&gt;main_conf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * the http null srv_conf context, it is used to merge</span></span><br><span class="line"><span class="comment">     * the server&#123;&#125;s' srv_conf's</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    ctx-&gt;srv_conf = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">void</span> *) * ngx_http_max_module);</span><br><span class="line">    <span class="keyword">if</span> (ctx-&gt;srv_conf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * the http null loc_conf context, it is used to merge</span></span><br><span class="line"><span class="comment">     * the server&#123;&#125;s' loc_conf's</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    ctx-&gt;loc_conf = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">void</span> *) * ngx_http_max_module);</span><br><span class="line">    <span class="keyword">if</span> (ctx-&gt;loc_conf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * create the main_conf's, the null srv_conf's, and the null loc_conf's</span></span><br><span class="line"><span class="comment">     * of the all http modules</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (m = <span class="number">0</span>; cf-&gt;cycle-&gt;modules[m]; m++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cf-&gt;cycle-&gt;modules[m]-&gt;type != NGX_HTTP_MODULE) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = cf-&gt;cycle-&gt;modules[m]-&gt;ctx;</span><br><span class="line">        mi = cf-&gt;cycle-&gt;modules[m]-&gt;ctx_index;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建main级别conf</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;create_main_conf) &#123;</span><br><span class="line">            ctx-&gt;main_conf[mi] = <span class="keyword">module</span>-&gt;create_main_conf(cf);</span><br><span class="line">            <span class="keyword">if</span> (ctx-&gt;main_conf[mi] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;create_srv_conf) &#123;</span><br><span class="line">            ctx-&gt;srv_conf[mi] = <span class="keyword">module</span>-&gt;create_srv_conf(cf);</span><br><span class="line">            <span class="keyword">if</span> (ctx-&gt;srv_conf[mi] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;create_loc_conf) &#123;</span><br><span class="line">            ctx-&gt;loc_conf[mi] = <span class="keyword">module</span>-&gt;create_loc_conf(cf);</span><br><span class="line">            <span class="keyword">if</span> (ctx-&gt;loc_conf[mi] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存cf</span></span><br><span class="line">    pcf = *cf;</span><br><span class="line">    cf-&gt;ctx = ctx;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (m = <span class="number">0</span>; cf-&gt;cycle-&gt;modules[m]; m++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cf-&gt;cycle-&gt;modules[m]-&gt;type != NGX_HTTP_MODULE) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = cf-&gt;cycle-&gt;modules[m]-&gt;ctx;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;preconfiguration) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;preconfiguration(cf) != NGX_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* parse inside the http&#123;&#125; block */</span></span><br><span class="line"></span><br><span class="line">    cf-&gt;module_type = NGX_HTTP_MODULE;</span><br><span class="line">    cf-&gt;cmd_type = NGX_HTTP_MAIN_CONF;</span><br><span class="line">    <span class="comment">// 开始解析http块里面的配置</span></span><br><span class="line">    rv = ngx_conf_parse(cf, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rv != NGX_CONF_OK) &#123;</span><br><span class="line">        <span class="keyword">goto</span> failed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * init http&#123;&#125; main_conf's, merge the server&#123;&#125;s' srv_conf's</span></span><br><span class="line"><span class="comment">     * and its location&#123;&#125;s' loc_conf's</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取http main级别的conf</span></span><br><span class="line">    cmcf = ctx-&gt;main_conf[ngx_http_core_module.ctx_index];</span><br><span class="line">    cscfp = cmcf-&gt;servers.elts;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用每个http模块初始化main级别配置的函数</span></span><br><span class="line">    <span class="keyword">for</span> (m = <span class="number">0</span>; cf-&gt;cycle-&gt;modules[m]; m++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cf-&gt;cycle-&gt;modules[m]-&gt;type != NGX_HTTP_MODULE) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = cf-&gt;cycle-&gt;modules[m]-&gt;ctx;</span><br><span class="line">        mi = cf-&gt;cycle-&gt;modules[m]-&gt;ctx_index;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* init http&#123;&#125; main_conf's */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;init_main_conf) &#123;</span><br><span class="line">            rv = <span class="keyword">module</span>-&gt;init_main_conf(cf, ctx-&gt;main_conf[mi]);</span><br><span class="line">            <span class="keyword">if</span> (rv != NGX_CONF_OK) &#123;</span><br><span class="line">                <span class="keyword">goto</span> failed;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并server级别及location级别配置</span></span><br><span class="line">        rv = ngx_http_merge_servers(cf, cmcf, <span class="keyword">module</span>, mi);</span><br><span class="line">        <span class="keyword">if</span> (rv != NGX_CONF_OK) &#123;</span><br><span class="line">            <span class="keyword">goto</span> failed;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create location trees */</span></span><br><span class="line">    <span class="comment">// 构造http请求location匹配树</span></span><br><span class="line">    <span class="keyword">for</span> (s = <span class="number">0</span>; s &lt; cmcf-&gt;servers.nelts; s++) &#123;</span><br><span class="line"></span><br><span class="line">        clcf = cscfp[s]-&gt;ctx-&gt;loc_conf[ngx_http_core_module.ctx_index];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_http_init_locations(cf, cscfp[s], clcf) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造静态location匹配树</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_http_init_static_location_trees(cf, clcf) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化各个阶段的array</span></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_init_phases(cf, cmcf) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化http请求头headers</span></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_init_headers_in_hash(cf, cmcf) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理每个http模块postconfiguration</span></span><br><span class="line">    <span class="keyword">for</span> (m = <span class="number">0</span>; cf-&gt;cycle-&gt;modules[m]; m++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cf-&gt;cycle-&gt;modules[m]-&gt;type != NGX_HTTP_MODULE) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = cf-&gt;cycle-&gt;modules[m]-&gt;ctx;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;postconfiguration) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;postconfiguration(cf) != NGX_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化http变量</span></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_variables_init_vars(cf) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * http&#123;&#125;'s cf-&gt;ctx was needed while the configuration merging</span></span><br><span class="line"><span class="comment">     * and in postconfiguration process</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 恢复cf</span></span><br><span class="line">    *cf = pcf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化http各个阶段handler</span></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_init_phase_handlers(cf, cmcf) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* optimize the lists of ports, addresses and server names */</span></span><br><span class="line">    <span class="comment">// 处理相同端口以及server_name</span></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_optimize_servers(cf, cmcf, cmcf-&gt;ports) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line"></span><br><span class="line">failed:</span><br><span class="line">    <span class="comment">// 恢复cf</span></span><br><span class="line">    *cf = pcf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>接下来分析ngx_http_optimize_servers函数，此函数用于处理IP+Port相同，不同server_name的情况<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_optimize_servers(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_http_core_main_conf_t</span> *cmcf,</span><br><span class="line">    <span class="keyword">ngx_array_t</span> *ports)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>             p, a;</span><br><span class="line">    <span class="keyword">ngx_http_conf_port_t</span>  *port;</span><br><span class="line">    <span class="keyword">ngx_http_conf_addr_t</span>  *addr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有端口，则返回</span></span><br><span class="line">    <span class="keyword">if</span> (ports == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历port列表</span></span><br><span class="line">    port = ports-&gt;elts;</span><br><span class="line">    <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; ports-&gt;nelts; p++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将port下挂的addr进行排序</span></span><br><span class="line">        ngx_sort(port[p].addrs.elts, (<span class="keyword">size_t</span>) port[p].addrs.nelts,</span><br><span class="line">                 <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_conf_addr_t</span>), ngx_http_cmp_conf_addrs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * check whether all name-based servers have the same</span></span><br><span class="line"><span class="comment">         * configuration as a default server for given address:port</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果一个addr下有多个server块，则处理server_name</span></span><br><span class="line">        addr = port[p].addrs.elts;</span><br><span class="line">        <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; port[p].addrs.nelts; a++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (addr[a].servers.nelts &gt; <span class="number">1</span></span><br><span class="line">#<span class="keyword">if</span> (NGX_PCRE)</span><br><span class="line">                || addr[a].default_server-&gt;captures</span><br><span class="line">#endif</span><br><span class="line">               )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (ngx_http_server_names(cf, cmcf, &amp;addr[a]) != NGX_OK) &#123;</span><br><span class="line">                    <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理listen，从cycle-&gt;listening分配元素</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_http_init_listening(cf, &amp;port[p]) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p></blockquote><blockquote><ol start="3"><li>接下来分析ngx_http_server_names函数<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_server_names(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_http_core_main_conf_t</span> *cmcf,</span><br><span class="line">    <span class="keyword">ngx_http_conf_addr_t</span> *addr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                   rc;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                  n, s;</span><br><span class="line">    <span class="keyword">ngx_hash_init_t</span>             hash;</span><br><span class="line">    <span class="keyword">ngx_hash_keys_arrays_t</span>      ha;</span><br><span class="line">    <span class="keyword">ngx_http_server_name_t</span>     *name;</span><br><span class="line">    <span class="keyword">ngx_http_core_srv_conf_t</span>  **cscfp;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_PCRE)</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                  regex, i;</span><br><span class="line"></span><br><span class="line">    regex = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化hash key数组</span></span><br><span class="line">    ngx_memzero(&amp;ha, <span class="keyword">sizeof</span>(<span class="keyword">ngx_hash_keys_arrays_t</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建初始化hash table所需的内存池</span></span><br><span class="line">    ha.temp_pool = ngx_create_pool(NGX_DEFAULT_POOL_SIZE, cf-&gt;<span class="built_in">log</span>);</span><br><span class="line">    <span class="keyword">if</span> (ha.temp_pool == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ha.pool = cf-&gt;pool;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化hash key</span></span><br><span class="line">    <span class="keyword">if</span> (ngx_hash_keys_array_init(&amp;ha, NGX_HASH_LARGE) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">goto</span> failed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cscfp = addr-&gt;servers.elts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (s = <span class="number">0</span>; s &lt; addr-&gt;servers.nelts; s++) &#123;</span><br><span class="line"></span><br><span class="line">        name = cscfp[s]-&gt;server_names.elts;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; cscfp[s]-&gt;server_names.nelts; n++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_PCRE)</span></span><br><span class="line">            <span class="keyword">if</span> (name[n].regex) &#123;</span><br><span class="line">                regex++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">            rc = ngx_hash_add_key(&amp;ha, &amp;name[n].name, name[n].server,</span><br><span class="line">                                  NGX_HASH_WILDCARD_KEY);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rc == NGX_ERROR) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rc == NGX_DECLINED) &#123;</span><br><span class="line">                ngx_log_error(NGX_LOG_EMERG, cf-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                              <span class="string">"invalid server name or wildcard \"%V\" on %V"</span>,</span><br><span class="line">                              &amp;name[n].name, &amp;addr-&gt;opt.addr_text);</span><br><span class="line">                <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rc == NGX_BUSY) &#123;</span><br><span class="line">                ngx_log_error(NGX_LOG_WARN, cf-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                              <span class="string">"conflicting server name \"%V\" on %V, ignored"</span>,</span><br><span class="line">                              &amp;name[n].name, &amp;addr-&gt;opt.addr_text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hash.key = ngx_hash_key_lc;</span><br><span class="line">    hash.max_size = cmcf-&gt;server_names_hash_max_size;</span><br><span class="line">    hash.bucket_size = cmcf-&gt;server_names_hash_bucket_size;</span><br><span class="line">    hash.name = <span class="string">"server_names_hash"</span>;</span><br><span class="line">    hash.pool = cf-&gt;pool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ha.keys.nelts) &#123;</span><br><span class="line">        hash.hash = &amp;addr-&gt;hash;</span><br><span class="line">        hash.temp_pool = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_hash_init(&amp;hash, ha.keys.elts, ha.keys.nelts) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">goto</span> failed;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前缀匹配</span></span><br><span class="line">    <span class="keyword">if</span> (ha.dns_wc_head.nelts) &#123;</span><br><span class="line"></span><br><span class="line">        ngx_qsort(ha.dns_wc_head.elts, (<span class="keyword">size_t</span>) ha.dns_wc_head.nelts,</span><br><span class="line">                  <span class="keyword">sizeof</span>(<span class="keyword">ngx_hash_key_t</span>), ngx_http_cmp_dns_wildcards);</span><br><span class="line"></span><br><span class="line">        hash.hash = <span class="literal">NULL</span>;</span><br><span class="line">        hash.temp_pool = ha.temp_pool;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_hash_wildcard_init(&amp;hash, ha.dns_wc_head.elts,</span><br><span class="line">                                   ha.dns_wc_head.nelts)</span><br><span class="line">            != NGX_OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">goto</span> failed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addr-&gt;wc_head = (<span class="keyword">ngx_hash_wildcard_t</span> *) hash.hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后缀匹配</span></span><br><span class="line">    <span class="keyword">if</span> (ha.dns_wc_tail.nelts) &#123;</span><br><span class="line"></span><br><span class="line">        ngx_qsort(ha.dns_wc_tail.elts, (<span class="keyword">size_t</span>) ha.dns_wc_tail.nelts,</span><br><span class="line">                  <span class="keyword">sizeof</span>(<span class="keyword">ngx_hash_key_t</span>), ngx_http_cmp_dns_wildcards);</span><br><span class="line"></span><br><span class="line">        hash.hash = <span class="literal">NULL</span>;</span><br><span class="line">        hash.temp_pool = ha.temp_pool;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_hash_wildcard_init(&amp;hash, ha.dns_wc_tail.elts,</span><br><span class="line">                                   ha.dns_wc_tail.nelts)</span><br><span class="line">            != NGX_OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">goto</span> failed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addr-&gt;wc_tail = (<span class="keyword">ngx_hash_wildcard_t</span> *) hash.hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_destroy_pool(ha.temp_pool);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_PCRE)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (regex == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addr-&gt;nregex = regex;</span><br><span class="line">    addr-&gt;regex = ngx_palloc(cf-&gt;pool, regex * <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_server_name_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (addr-&gt;regex == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (s = <span class="number">0</span>; s &lt; addr-&gt;servers.nelts; s++) &#123;</span><br><span class="line"></span><br><span class="line">        name = cscfp[s]-&gt;server_names.elts;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; cscfp[s]-&gt;server_names.nelts; n++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name[n].regex) &#123;</span><br><span class="line">                addr-&gt;regex[i++] = name[n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line"></span><br><span class="line">failed:</span><br><span class="line"></span><br><span class="line">    ngx_destroy_pool(ha.temp_pool);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、代码框架&quot;&gt;&lt;a href=&quot;#1、代码框架&quot; class=&quot;headerlink&quot; title=&quot;1、代码框架&quot;&gt;&lt;/a&gt;1、代
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的http_core模块</title>
    <link href="https://weeweetan.github.io/2021/05/09/Nginx%E7%9A%84http-core%E6%A8%A1%E5%9D%97/"/>
    <id>https://weeweetan.github.io/2021/05/09/Nginx的http-core模块/</id>
    <published>2021-05-09T13:06:24.000Z</published>
    <updated>2021-10-01T14:22:50.375Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1、相关配置"><a href="#1、相关配置" class="headerlink" title="1、相关配置"></a>1、相关配置</h2><blockquote><p>核心模块配置如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>以上是http模块最核心的配置，一条listen指令，一条location指令，能够监听80端口，提供简单的web服务。<p></p></blockquote><h2 id="2、相关代码"><a href="#2、相关代码" class="headerlink" title="2、相关代码"></a>2、相关代码</h2><blockquote><ol><li>首先看下解析server指令的代码<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_core_server(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *dummy)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span>                        *rv;</span><br><span class="line">    <span class="keyword">void</span>                        *mconf;</span><br><span class="line">    <span class="keyword">size_t</span>                       len;</span><br><span class="line">    u_char                      *p;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                   i;</span><br><span class="line">    <span class="keyword">ngx_conf_t</span>                   pcf;</span><br><span class="line">    <span class="keyword">ngx_http_module_t</span>           *<span class="keyword">module</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>          *<span class="title">sin</span>;</span></span><br><span class="line">    <span class="keyword">ngx_http_conf_ctx_t</span>         *ctx, *http_ctx;</span><br><span class="line">    <span class="keyword">ngx_http_listen_opt_t</span>        lsopt;</span><br><span class="line">    <span class="keyword">ngx_http_core_srv_conf_t</span>    *cscf, **cscfp;</span><br><span class="line">    <span class="keyword">ngx_http_core_main_conf_t</span>   *cmcf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首先分配上下文内存</span></span><br><span class="line">    ctx = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_conf_ctx_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存http模块main级别的conf</span></span><br><span class="line">    http_ctx = cf-&gt;ctx;</span><br><span class="line">    ctx-&gt;main_conf = http_ctx-&gt;main_conf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the server&#123;&#125;'s srv_conf */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预分配保存server级别的内存</span></span><br><span class="line">    ctx-&gt;srv_conf = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">void</span> *) * ngx_http_max_module);</span><br><span class="line">    <span class="keyword">if</span> (ctx-&gt;srv_conf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the server&#123;&#125;'s loc_conf */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预分配location级别的内存</span></span><br><span class="line">    ctx-&gt;loc_conf = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">void</span> *) * ngx_http_max_module);</span><br><span class="line">    <span class="keyword">if</span> (ctx-&gt;loc_conf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; cf-&gt;cycle-&gt;modules[i]; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cf-&gt;cycle-&gt;modules[i]-&gt;type != NGX_HTTP_MODULE) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = cf-&gt;cycle-&gt;modules[i]-&gt;ctx;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;create_srv_conf) &#123;</span><br><span class="line">            mconf = <span class="keyword">module</span>-&gt;create_srv_conf(cf);</span><br><span class="line">            <span class="keyword">if</span> (mconf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ctx-&gt;srv_conf[cf-&gt;cycle-&gt;modules[i]-&gt;ctx_index] = mconf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;create_loc_conf) &#123;</span><br><span class="line">            mconf = <span class="keyword">module</span>-&gt;create_loc_conf(cf);</span><br><span class="line">            <span class="keyword">if</span> (mconf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ctx-&gt;loc_conf[cf-&gt;cycle-&gt;modules[i]-&gt;ctx_index] = mconf;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the server configuration context */</span></span><br><span class="line"></span><br><span class="line">    cscf = ctx-&gt;srv_conf[ngx_http_core_module.ctx_index];</span><br><span class="line">    cscf-&gt;ctx = ctx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取http的主配置</span></span><br><span class="line">    cmcf = ctx-&gt;main_conf[ngx_http_core_module.ctx_index];</span><br><span class="line"></span><br><span class="line">    cscfp = ngx_array_push(&amp;cmcf-&gt;servers);</span><br><span class="line">    <span class="keyword">if</span> (cscfp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *cscfp = cscf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* parse inside server&#123;&#125; */</span></span><br><span class="line"></span><br><span class="line">    pcf = *cf;</span><br><span class="line">    cf-&gt;ctx = ctx;</span><br><span class="line">    cf-&gt;cmd_type = NGX_HTTP_SRV_CONF;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始解析server块配置</span></span><br><span class="line">    rv = ngx_conf_parse(cf, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 还原cf</span></span><br><span class="line">    *cf = pcf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理没有监听端口的情况, 默认80</span></span><br><span class="line">    <span class="keyword">if</span> (rv == NGX_CONF_OK &amp;&amp; !cscf-&gt;listen) &#123;</span><br><span class="line">        ngx_memzero(&amp;lsopt, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_listen_opt_t</span>));</span><br><span class="line"></span><br><span class="line">        p = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(struct sockaddr_in));</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lsopt.sockaddr = (struct sockaddr *) p;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sin</span> = (struct sockaddr_in *) p;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sin</span>-&gt;sin_family = AF_INET;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_WIN32)</span></span><br><span class="line">        <span class="built_in">sin</span>-&gt;sin_port = htons(<span class="number">80</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="built_in">sin</span>-&gt;sin_port = htons((getuid() == <span class="number">0</span>) ? <span class="number">80</span> : <span class="number">8000</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="built_in">sin</span>-&gt;sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">        lsopt.socklen = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line"></span><br><span class="line">        lsopt.backlog = NGX_LISTEN_BACKLOG;</span><br><span class="line">        lsopt.rcvbuf = <span class="number">-1</span>;</span><br><span class="line">        lsopt.sndbuf = <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_SETFIB)</span></span><br><span class="line">        lsopt.setfib = <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_TCP_FASTOPEN)</span></span><br><span class="line">        lsopt.fastopen = <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        lsopt.wildcard = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        len = NGX_INET_ADDRSTRLEN + <span class="keyword">sizeof</span>(<span class="string">":65535"</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        p = ngx_pnalloc(cf-&gt;pool, len);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lsopt.addr_text.data = p;</span><br><span class="line">        lsopt.addr_text.len = ngx_sock_ntop(lsopt.sockaddr, lsopt.socklen, p,</span><br><span class="line">                                            len, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_http_add_listen(cf, cscf, &amp;lsopt) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="2"><li>接下来看看解析listen指令的函数, ngx_http_core_listen的实现<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_core_listen(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_core_srv_conf_t</span> *cscf = conf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_str_t</span>              *value, size;</span><br><span class="line">    <span class="keyword">ngx_url_t</span>               u;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>              n;</span><br><span class="line">    <span class="keyword">ngx_http_listen_opt_t</span>   lsopt;</span><br><span class="line"></span><br><span class="line">    cscf-&gt;listen = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// URL结构体内存空间置零</span></span><br><span class="line">    ngx_memzero(&amp;u, <span class="keyword">sizeof</span>(<span class="keyword">ngx_url_t</span>));</span><br><span class="line"></span><br><span class="line">    u.url = value[<span class="number">1</span>];</span><br><span class="line">    u.listen = <span class="number">1</span>;</span><br><span class="line">    u.default_port = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析listen指令后的ip+port</span></span><br><span class="line">    <span class="keyword">if</span> (ngx_parse_url(cf-&gt;pool, &amp;u) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u.err) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"%s in \"%V\" of the \"listen\" directive"</span>,</span><br><span class="line">                               u.err, &amp;u.url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;lsopt, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_listen_opt_t</span>));</span><br><span class="line"></span><br><span class="line">    lsopt.backlog = NGX_LISTEN_BACKLOG;</span><br><span class="line">    lsopt.rcvbuf = <span class="number">-1</span>;</span><br><span class="line">    lsopt.sndbuf = <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_SETFIB)</span></span><br><span class="line">    lsopt.setfib = <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_TCP_FASTOPEN)</span></span><br><span class="line">    lsopt.fastopen = <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_INET6)</span></span><br><span class="line">    lsopt.ipv6only = <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// 开始解析listen指令后的参数，第一个参数是listen，第二个参数是IP端口，所以n从2开始</span></span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">2</span>; n &lt; cf-&gt;args-&gt;nelts; n++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析default server参数，并设置标志位</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strcmp(value[n].data, <span class="string">"default_server"</span>) == <span class="number">0</span></span><br><span class="line">            || ngx_strcmp(value[n].data, <span class="string">"default"</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            lsopt.default_server = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析bind参数，并设置标志位</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strcmp(value[n].data, <span class="string">"bind"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            lsopt.<span class="built_in">set</span> = <span class="number">1</span>;</span><br><span class="line">            lsopt.bind = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_SETFIB)</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strncmp(value[n].data, <span class="string">"setfib="</span>, <span class="number">7</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            lsopt.setfib = ngx_atoi(value[n].data + <span class="number">7</span>, value[n].len - <span class="number">7</span>);</span><br><span class="line">            lsopt.<span class="built_in">set</span> = <span class="number">1</span>;</span><br><span class="line">            lsopt.bind = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lsopt.setfib == NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                                   <span class="string">"invalid setfib \"%V\""</span>, &amp;value[n]);</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_TCP_FASTOPEN)</span></span><br><span class="line">        <span class="comment">// 解析fastopen参数，设置标志位和值</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strncmp(value[n].data, <span class="string">"fastopen="</span>, <span class="number">9</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            lsopt.fastopen = ngx_atoi(value[n].data + <span class="number">9</span>, value[n].len - <span class="number">9</span>);</span><br><span class="line">            lsopt.<span class="built_in">set</span> = <span class="number">1</span>;</span><br><span class="line">            lsopt.bind = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lsopt.fastopen == NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                                   <span class="string">"invalid fastopen \"%V\""</span>, &amp;value[n]);</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析backlog参数，设置标志位和值</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strncmp(value[n].data, <span class="string">"backlog="</span>, <span class="number">8</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            lsopt.backlog = ngx_atoi(value[n].data + <span class="number">8</span>, value[n].len - <span class="number">8</span>);</span><br><span class="line">            lsopt.<span class="built_in">set</span> = <span class="number">1</span>;</span><br><span class="line">            lsopt.bind = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lsopt.backlog == NGX_ERROR || lsopt.backlog == <span class="number">0</span>) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                                   <span class="string">"invalid backlog \"%V\""</span>, &amp;value[n]);</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// recv buf参数，设置标志位和值</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strncmp(value[n].data, <span class="string">"rcvbuf="</span>, <span class="number">7</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            size.len = value[n].len - <span class="number">7</span>;</span><br><span class="line">            size.data = value[n].data + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">            lsopt.rcvbuf = ngx_parse_size(&amp;size);</span><br><span class="line">            lsopt.<span class="built_in">set</span> = <span class="number">1</span>;</span><br><span class="line">            lsopt.bind = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lsopt.rcvbuf == NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                                   <span class="string">"invalid rcvbuf \"%V\""</span>, &amp;value[n]);</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// send buf参数，设置标志位和值</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strncmp(value[n].data, <span class="string">"sndbuf="</span>, <span class="number">7</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            size.len = value[n].len - <span class="number">7</span>;</span><br><span class="line">            size.data = value[n].data + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">            lsopt.sndbuf = ngx_parse_size(&amp;size);</span><br><span class="line">            lsopt.<span class="built_in">set</span> = <span class="number">1</span>;</span><br><span class="line">            lsopt.bind = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lsopt.sndbuf == NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                                   <span class="string">"invalid sndbuf \"%V\""</span>, &amp;value[n]);</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析accept_filter参数，设置标志位</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strncmp(value[n].data, <span class="string">"accept_filter="</span>, <span class="number">14</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_DEFERRED_ACCEPT &amp;&amp; defined SO_ACCEPTFILTER)</span></span><br><span class="line">            lsopt.accept_filter = (<span class="keyword">char</span> *) &amp;value[n].data[<span class="number">14</span>];</span><br><span class="line">            lsopt.<span class="built_in">set</span> = <span class="number">1</span>;</span><br><span class="line">            lsopt.bind = <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"accept filters \"%V\" are not supported "</span></span><br><span class="line">                               <span class="string">"on this platform, ignored"</span>,</span><br><span class="line">                               &amp;value[n]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// deferred 参数</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strcmp(value[n].data, <span class="string">"deferred"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_DEFERRED_ACCEPT &amp;&amp; defined TCP_DEFER_ACCEPT)</span></span><br><span class="line">            lsopt.deferred_accept = <span class="number">1</span>;</span><br><span class="line">            lsopt.<span class="built_in">set</span> = <span class="number">1</span>;</span><br><span class="line">            lsopt.bind = <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"the deferred accept is not supported "</span></span><br><span class="line">                               <span class="string">"on this platform, ignored"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析ipv6参数，设置标志位</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strncmp(value[n].data, <span class="string">"ipv6only=o"</span>, <span class="number">10</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_INET6 &amp;&amp; defined IPV6_V6ONLY)</span></span><br><span class="line">            <span class="keyword">if</span> (ngx_strcmp(&amp;value[n].data[<span class="number">10</span>], <span class="string">"n"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                lsopt.ipv6only = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ngx_strcmp(&amp;value[n].data[<span class="number">10</span>], <span class="string">"ff"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                lsopt.ipv6only = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                                   <span class="string">"invalid ipv6only flags \"%s\""</span>,</span><br><span class="line">                                   &amp;value[n].data[<span class="number">9</span>]);</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lsopt.<span class="built_in">set</span> = <span class="number">1</span>;</span><br><span class="line">            lsopt.bind = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"ipv6only is not supported "</span></span><br><span class="line">                               <span class="string">"on this platform"</span>);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// reuseport 参数，设置标志位</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strcmp(value[n].data, <span class="string">"reuseport"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_REUSEPORT)</span></span><br><span class="line">            lsopt.reuseport = <span class="number">1</span>;</span><br><span class="line">            lsopt.<span class="built_in">set</span> = <span class="number">1</span>;</span><br><span class="line">            lsopt.bind = <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"reuseport is not supported "</span></span><br><span class="line">                               <span class="string">"on this platform, ignored"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析ssl参数，设置标志位</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strcmp(value[n].data, <span class="string">"ssl"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_SSL)</span></span><br><span class="line">            lsopt.ssl = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"the \"ssl\" parameter requires "</span></span><br><span class="line">                               <span class="string">"ngx_http_ssl_module"</span>);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析http2参数，设置标志位</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strcmp(value[n].data, <span class="string">"http2"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_V2)</span></span><br><span class="line">            lsopt.http2 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"the \"http2\" parameter requires "</span></span><br><span class="line">                               <span class="string">"ngx_http_v2_module"</span>);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析spdy参数</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strcmp(value[n].data, <span class="string">"spdy"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_WARN, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"invalid parameter \"spdy\": "</span></span><br><span class="line">                               <span class="string">"ngx_http_spdy_module was superseded "</span></span><br><span class="line">                               <span class="string">"by ngx_http_v2_module"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析so_keepalive，设置标志位</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strncmp(value[n].data, <span class="string">"so_keepalive="</span>, <span class="number">13</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_strcmp(&amp;value[n].data[<span class="number">13</span>], <span class="string">"on"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                lsopt.so_keepalive = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ngx_strcmp(&amp;value[n].data[<span class="number">13</span>], <span class="string">"off"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                lsopt.so_keepalive = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> (NGX_HAVE_KEEPALIVE_TUNABLE)</span><br><span class="line">                u_char     *p, *end;</span><br><span class="line">                <span class="keyword">ngx_str_t</span>   s;</span><br><span class="line"></span><br><span class="line">                end = value[n].data + value[n].len;</span><br><span class="line">                s.data = value[n].data + <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">                p = ngx_strlchr(s.data, end, <span class="string">':'</span>);</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    p = end;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (p &gt; s.data) &#123;</span><br><span class="line">                    s.len = p - s.data;</span><br><span class="line"></span><br><span class="line">                    lsopt.tcp_keepidle = ngx_parse_time(&amp;s, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (lsopt.tcp_keepidle == (<span class="keyword">time_t</span>) NGX_ERROR) &#123;</span><br><span class="line">                        <span class="keyword">goto</span> invalid_so_keepalive;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                s.data = (p &lt; end) ? (p + <span class="number">1</span>) : end;</span><br><span class="line"></span><br><span class="line">                p = ngx_strlchr(s.data, end, <span class="string">':'</span>);</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    p = end;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (p &gt; s.data) &#123;</span><br><span class="line">                    s.len = p - s.data;</span><br><span class="line"></span><br><span class="line">                    lsopt.tcp_keepintvl = ngx_parse_time(&amp;s, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (lsopt.tcp_keepintvl == (<span class="keyword">time_t</span>) NGX_ERROR) &#123;</span><br><span class="line">                        <span class="keyword">goto</span> invalid_so_keepalive;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                s.data = (p &lt; end) ? (p + <span class="number">1</span>) : end;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (s.data &lt; end) &#123;</span><br><span class="line">                    s.len = end - s.data;</span><br><span class="line"></span><br><span class="line">                    lsopt.tcp_keepcnt = ngx_atoi(s.data, s.len);</span><br><span class="line">                    <span class="keyword">if</span> (lsopt.tcp_keepcnt == NGX_ERROR) &#123;</span><br><span class="line">                        <span class="keyword">goto</span> invalid_so_keepalive;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (lsopt.tcp_keepidle == <span class="number">0</span> &amp;&amp; lsopt.tcp_keepintvl == <span class="number">0</span></span><br><span class="line">                    &amp;&amp; lsopt.tcp_keepcnt == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">goto</span> invalid_so_keepalive;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                lsopt.so_keepalive = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                                   <span class="string">"the \"so_keepalive\" parameter accepts "</span></span><br><span class="line">                                   <span class="string">"only \"on\" or \"off\" on this platform"</span>);</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lsopt.<span class="built_in">set</span> = <span class="number">1</span>;</span><br><span class="line">            lsopt.bind = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_KEEPALIVE_TUNABLE)</span></span><br><span class="line">        invalid_so_keepalive:</span><br><span class="line"></span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"invalid so_keepalive value: \"%s\""</span>,</span><br><span class="line">                               &amp;value[n].data[<span class="number">13</span>]);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析pp协议参数，开启pp协议标志位</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_strcmp(value[n].data, <span class="string">"proxy_protocol"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            lsopt.proxy_protocol = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"invalid parameter \"%V\""</span>, &amp;value[n]);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理监听端口</span></span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; u.naddrs; n++) &#123;</span><br><span class="line">        lsopt.sockaddr = u.addrs[n].sockaddr;</span><br><span class="line">        lsopt.socklen = u.addrs[n].socklen;</span><br><span class="line">        lsopt.addr_text = u.addrs[n].name;</span><br><span class="line">        <span class="comment">// 获取通配符关键字</span></span><br><span class="line">        lsopt.wildcard = ngx_inet_wildcard(lsopt.sockaddr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将端口放入全局端口列表中</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_http_add_listen(cf, cscf, &amp;lsopt) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="3"><li>接下来看看解析location指令的函数, ngx_http_core_location的实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line">static char *</span><br><span class="line">ngx_http_core_location(ngx_conf_t *cf, ngx_command_t *cmd, void *dummy)</span><br><span class="line">&#123;</span><br><span class="line">    char                      *rv;</span><br><span class="line">    u_char                    *mod;</span><br><span class="line">    size_t                     len;</span><br><span class="line">    ngx_str_t                 *value, *name;</span><br><span class="line">    ngx_uint_t                 i;</span><br><span class="line">    ngx_conf_t                 save;</span><br><span class="line">    ngx_http_module_t         *module;</span><br><span class="line">    ngx_http_conf_ctx_t       *ctx, *pctx;</span><br><span class="line">    ngx_http_core_loc_conf_t  *clcf, *pclcf;</span><br><span class="line"></span><br><span class="line">    // 首先申请保存配置的内存</span><br><span class="line">    ctx = ngx_pcalloc(cf-&gt;pool, sizeof(ngx_http_conf_ctx_t));</span><br><span class="line">    if (ctx == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 设置main级别和server级别配置</span><br><span class="line">    pctx = cf-&gt;ctx;</span><br><span class="line">    ctx-&gt;main_conf = pctx-&gt;main_conf;</span><br><span class="line">    ctx-&gt;srv_conf = pctx-&gt;srv_conf;</span><br><span class="line"></span><br><span class="line">    ctx-&gt;loc_conf = ngx_pcalloc(cf-&gt;pool, sizeof(void *) * ngx_http_max_module);</span><br><span class="line">    if (ctx-&gt;loc_conf == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 遍历http模块，调用创建location级别配置函数</span><br><span class="line">    for (i = 0; cf-&gt;cycle-&gt;modules[i]; i++) &#123;</span><br><span class="line">        if (cf-&gt;cycle-&gt;modules[i]-&gt;type != NGX_HTTP_MODULE) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        module = cf-&gt;cycle-&gt;modules[i]-&gt;ctx;</span><br><span class="line"></span><br><span class="line">        if (module-&gt;create_loc_conf) &#123;</span><br><span class="line">            ctx-&gt;loc_conf[cf-&gt;cycle-&gt;modules[i]-&gt;ctx_index] =</span><br><span class="line">                                                   module-&gt;create_loc_conf(cf);</span><br><span class="line">            if (ctx-&gt;loc_conf[cf-&gt;cycle-&gt;modules[i]-&gt;ctx_index] == NULL) &#123;</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 取出core模块的location级别配置</span><br><span class="line">    clcf = ctx-&gt;loc_conf[ngx_http_core_module.ctx_index];</span><br><span class="line">    clcf-&gt;loc_conf = ctx-&gt;loc_conf;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    // 处理location指令后的参数，比如/ ~ = 以及其他正则表达式</span><br><span class="line">    if (cf-&gt;args-&gt;nelts == 3) &#123;</span><br><span class="line"></span><br><span class="line">        len = value[1].len;</span><br><span class="line">        mod = value[1].data;</span><br><span class="line">        name = &amp;value[2];</span><br><span class="line"></span><br><span class="line">        if (len == 1 &amp;&amp; mod[0] == &apos;=&apos;) &#123;</span><br><span class="line"></span><br><span class="line">            clcf-&gt;name = *name;</span><br><span class="line">            clcf-&gt;exact_match = 1;</span><br><span class="line"></span><br><span class="line">        &#125; else if (len == 2 &amp;&amp; mod[0] == &apos;^&apos; &amp;&amp; mod[1] == &apos;~&apos;) &#123;</span><br><span class="line"></span><br><span class="line">            clcf-&gt;name = *name;</span><br><span class="line">            clcf-&gt;noregex = 1;</span><br><span class="line"></span><br><span class="line">        &#125; else if (len == 1 &amp;&amp; mod[0] == &apos;~&apos;) &#123;</span><br><span class="line"></span><br><span class="line">            if (ngx_http_core_regex_location(cf, clcf, name, 0) != NGX_OK) &#123;</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; else if (len == 2 &amp;&amp; mod[0] == &apos;~&apos; &amp;&amp; mod[1] == &apos;*&apos;) &#123;</span><br><span class="line"></span><br><span class="line">            if (ngx_http_core_regex_location(cf, clcf, name, 1) != NGX_OK) &#123;</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                               &quot;invalid location modifier \&quot;%V\&quot;&quot;, &amp;value[1]);</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line"></span><br><span class="line">        name = &amp;value[1];</span><br><span class="line"></span><br><span class="line">        if (name-&gt;data[0] == &apos;=&apos;) &#123;</span><br><span class="line"></span><br><span class="line">            clcf-&gt;name.len = name-&gt;len - 1;</span><br><span class="line">            clcf-&gt;name.data = name-&gt;data + 1;</span><br><span class="line">            clcf-&gt;exact_match = 1;</span><br><span class="line"></span><br><span class="line">        &#125; else if (name-&gt;data[0] == &apos;^&apos; &amp;&amp; name-&gt;data[1] == &apos;~&apos;) &#123;</span><br><span class="line"></span><br><span class="line">            clcf-&gt;name.len = name-&gt;len - 2;</span><br><span class="line">            clcf-&gt;name.data = name-&gt;data + 2;</span><br><span class="line">            clcf-&gt;noregex = 1;</span><br><span class="line"></span><br><span class="line">        &#125; else if (name-&gt;data[0] == &apos;~&apos;) &#123;</span><br><span class="line"></span><br><span class="line">            name-&gt;len--;</span><br><span class="line">            name-&gt;data++;</span><br><span class="line"></span><br><span class="line">            if (name-&gt;data[0] == &apos;*&apos;) &#123;</span><br><span class="line"></span><br><span class="line">                name-&gt;len--;</span><br><span class="line">                name-&gt;data++;</span><br><span class="line"></span><br><span class="line">                // 处理正则表达式</span><br><span class="line">                if (ngx_http_core_regex_location(cf, clcf, name, 1) != NGX_OK) &#123;</span><br><span class="line">                    return NGX_CONF_ERROR;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (ngx_http_core_regex_location(cf, clcf, name, 0) != NGX_OK) &#123;</span><br><span class="line">                    return NGX_CONF_ERROR;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line"></span><br><span class="line">            // 保存clcf的name</span><br><span class="line">            clcf-&gt;name = *name;</span><br><span class="line"></span><br><span class="line">            if (name-&gt;data[0] == &apos;@&apos;) &#123;</span><br><span class="line">                clcf-&gt;named = 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 设置location级别的配置</span><br><span class="line">    pclcf = pctx-&gt;loc_conf[ngx_http_core_module.ctx_index];</span><br><span class="line"></span><br><span class="line">    // 判断是否微location类型配置</span><br><span class="line">    if (cf-&gt;cmd_type == NGX_HTTP_LOC_CONF) &#123;</span><br><span class="line"></span><br><span class="line">        /* nested location */</span><br><span class="line"></span><br><span class="line">#if 0</span><br><span class="line">        clcf-&gt;prev_location = pclcf;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">        if (pclcf-&gt;exact_match) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                               &quot;location \&quot;%V\&quot; cannot be inside &quot;</span><br><span class="line">                               &quot;the exact location \&quot;%V\&quot;&quot;,</span><br><span class="line">                               &amp;clcf-&gt;name, &amp;pclcf-&gt;name);</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (pclcf-&gt;named) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                               &quot;location \&quot;%V\&quot; cannot be inside &quot;</span><br><span class="line">                               &quot;the named location \&quot;%V\&quot;&quot;,</span><br><span class="line">                               &amp;clcf-&gt;name, &amp;pclcf-&gt;name);</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (clcf-&gt;named) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                               &quot;named location \&quot;%V\&quot; can be &quot;</span><br><span class="line">                               &quot;on the server level only&quot;,</span><br><span class="line">                               &amp;clcf-&gt;name);</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        len = pclcf-&gt;name.len;</span><br><span class="line"></span><br><span class="line">#if (NGX_PCRE)</span><br><span class="line">        if (clcf-&gt;regex == NULL</span><br><span class="line">            &amp;&amp; ngx_filename_cmp(clcf-&gt;name.data, pclcf-&gt;name.data, len) != 0)</span><br><span class="line">#else</span><br><span class="line">        if (ngx_filename_cmp(clcf-&gt;name.data, pclcf-&gt;name.data, len) != 0)</span><br><span class="line">#endif</span><br><span class="line">        &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                               &quot;location \&quot;%V\&quot; is outside location \&quot;%V\&quot;&quot;,</span><br><span class="line">                               &amp;clcf-&gt;name, &amp;pclcf-&gt;name);</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ngx_http_add_location(cf, &amp;pclcf-&gt;locations, clcf) != NGX_OK) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 保持cf结构体</span><br><span class="line">    save = *cf;</span><br><span class="line">    cf-&gt;ctx = ctx;</span><br><span class="line">    cf-&gt;cmd_type = NGX_HTTP_LOC_CONF;</span><br><span class="line"></span><br><span class="line">    // 解析location里面的指令</span><br><span class="line">    rv = ngx_conf_parse(cf, NULL);</span><br><span class="line"></span><br><span class="line">    // 恢复原来的配置</span><br><span class="line">    *cf = save;</span><br><span class="line"></span><br><span class="line">    return rv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="3"><li>接下来看看root指令解析函数，ngx_http_core_root的实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static char *</span><br><span class="line">ngx_http_core_root(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)</span><br><span class="line">&#123;</span><br><span class="line">    ngx_http_core_loc_conf_t *clcf = conf;</span><br><span class="line"></span><br><span class="line">    ngx_str_t                  *value;</span><br><span class="line">    ngx_int_t                   alias;</span><br><span class="line">    ngx_uint_t                  n;</span><br><span class="line">    ngx_http_script_compile_t   sc;</span><br><span class="line"></span><br><span class="line">    alias = (cmd-&gt;name.len == sizeof(&quot;alias&quot;) - 1) ? 1 : 0;</span><br><span class="line"></span><br><span class="line">    if (clcf-&gt;root.data) &#123;</span><br><span class="line"></span><br><span class="line">        if ((clcf-&gt;alias != 0) == alias) &#123;</span><br><span class="line">            return &quot;is duplicate&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;\&quot;%V\&quot; directive is duplicate, &quot;</span><br><span class="line">                           &quot;\&quot;%s\&quot; directive was specified earlier&quot;,</span><br><span class="line">                           &amp;cmd-&gt;name, clcf-&gt;alias ? &quot;alias&quot; : &quot;root&quot;);</span><br><span class="line"></span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (clcf-&gt;named &amp;&amp; alias) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;the \&quot;alias\&quot; directive cannot be used &quot;</span><br><span class="line">                           &quot;inside the named location&quot;);</span><br><span class="line"></span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    // 处理第一个参数</span><br><span class="line">    if (ngx_strstr(value[1].data, &quot;$document_root&quot;)</span><br><span class="line">        || ngx_strstr(value[1].data, &quot;$&#123;document_root&#125;&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;the $document_root variable cannot be used &quot;</span><br><span class="line">                           &quot;in the \&quot;%V\&quot; directive&quot;,</span><br><span class="line">                           &amp;cmd-&gt;name);</span><br><span class="line"></span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ngx_strstr(value[1].data, &quot;$realpath_root&quot;)</span><br><span class="line">        || ngx_strstr(value[1].data, &quot;$&#123;realpath_root&#125;&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;the $realpath_root variable cannot be used &quot;</span><br><span class="line">                           &quot;in the \&quot;%V\&quot; directive&quot;,</span><br><span class="line">                           &amp;cmd-&gt;name);</span><br><span class="line"></span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clcf-&gt;alias = alias ? clcf-&gt;name.len : 0;</span><br><span class="line">    clcf-&gt;root = value[1];</span><br><span class="line"></span><br><span class="line">    if (!alias &amp;&amp; clcf-&gt;root.len &gt; 0</span><br><span class="line">        &amp;&amp; clcf-&gt;root.data[clcf-&gt;root.len - 1] == &apos;/&apos;)</span><br><span class="line">    &#123;</span><br><span class="line">        clcf-&gt;root.len--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (clcf-&gt;root.data[0] != &apos;$&apos;) &#123;</span><br><span class="line">        if (ngx_conf_full_name(cf-&gt;cycle, &amp;clcf-&gt;root, 0) != NGX_OK) &#123;</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 统计变量数量</span><br><span class="line">    n = ngx_http_script_variables_count(&amp;clcf-&gt;root);</span><br><span class="line"></span><br><span class="line">    // 结构体置空</span><br><span class="line">    ngx_memzero(&amp;sc, sizeof(ngx_http_script_compile_t));</span><br><span class="line">    sc.variables = n;</span><br><span class="line"></span><br><span class="line">#if (NGX_PCRE)</span><br><span class="line">    if (alias &amp;&amp; clcf-&gt;regex) &#123;</span><br><span class="line">        clcf-&gt;alias = NGX_MAX_SIZE_T_VALUE;</span><br><span class="line">        n = 1;</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    //处理变量</span><br><span class="line">    if (n) &#123;</span><br><span class="line">        sc.cf = cf;</span><br><span class="line">        sc.source = &amp;clcf-&gt;root;</span><br><span class="line">        sc.lengths = &amp;clcf-&gt;root_lengths;</span><br><span class="line">        sc.values = &amp;clcf-&gt;root_values;</span><br><span class="line">        sc.complete_lengths = 1;</span><br><span class="line">        sc.complete_values = 1;</span><br><span class="line"></span><br><span class="line">        if (ngx_http_script_compile(&amp;sc) != NGX_OK) &#123;</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="4"><li>接下来看看type指令解析函数, ngx_http_core_type的实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">static char *</span><br><span class="line">ngx_http_core_type(ngx_conf_t *cf, ngx_command_t *dummy, void *conf)</span><br><span class="line">&#123;</span><br><span class="line">    ngx_http_core_loc_conf_t *clcf = conf;</span><br><span class="line"></span><br><span class="line">    ngx_str_t       *value, *content_type, *old;</span><br><span class="line">    ngx_uint_t       i, n, hash;</span><br><span class="line">    ngx_hash_key_t  *type;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line">    // 解析第一个参数，判断是否为include</span><br><span class="line">    if (ngx_strcmp(value[0].data, &quot;include&quot;) == 0) &#123;</span><br><span class="line">        if (cf-&gt;args-&gt;nelts != 2) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                               &quot;invalid number of arguments&quot;</span><br><span class="line">                               &quot; in \&quot;include\&quot; directive&quot;);</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return ngx_conf_include(cf, dummy, conf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //申请保存content_type的内存</span><br><span class="line">    content_type = ngx_palloc(cf-&gt;pool, sizeof(ngx_str_t));</span><br><span class="line">    if (content_type == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 取content_type的值</span><br><span class="line">    *content_type = value[0];</span><br><span class="line"></span><br><span class="line">    for (i = 1; i &lt; cf-&gt;args-&gt;nelts; i++) &#123;</span><br><span class="line"></span><br><span class="line">        hash = ngx_hash_strlow(value[i].data, value[i].data, value[i].len);</span><br><span class="line"></span><br><span class="line">        type = clcf-&gt;types-&gt;elts;</span><br><span class="line">        for (n = 0; n &lt; clcf-&gt;types-&gt;nelts; n++) &#123;</span><br><span class="line">            if (ngx_strcmp(value[i].data, type[n].key.data) == 0) &#123;</span><br><span class="line">                old = type[n].value;</span><br><span class="line">                type[n].value = content_type;</span><br><span class="line"></span><br><span class="line">                ngx_conf_log_error(NGX_LOG_WARN, cf, 0,</span><br><span class="line">                                   &quot;duplicate extension \&quot;%V\&quot;, &quot;</span><br><span class="line">                                   &quot;content type: \&quot;%V\&quot;, &quot;</span><br><span class="line">                                   &quot;previous content type: \&quot;%V\&quot;&quot;,</span><br><span class="line">                                   &amp;value[i], content_type, old);</span><br><span class="line">                goto next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 从types中取出一个元素</span><br><span class="line">        type = ngx_array_push(clcf-&gt;types);</span><br><span class="line">        if (type == NULL) &#123;</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //保存</span><br><span class="line">        type-&gt;key = value[i];</span><br><span class="line">        type-&gt;key_hash = hash;</span><br><span class="line">        type-&gt;value = content_type;</span><br><span class="line"></span><br><span class="line">    next:</span><br><span class="line">        continue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="5"><li>接下来看看server_name指令的解析函数, ngx_http_core_server_name的实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">static char *</span><br><span class="line">ngx_http_core_server_name(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)</span><br><span class="line">&#123;</span><br><span class="line">    ngx_http_core_srv_conf_t *cscf = conf;</span><br><span class="line"></span><br><span class="line">    u_char                   ch;</span><br><span class="line">    ngx_str_t               *value;</span><br><span class="line">    ngx_uint_t               i;</span><br><span class="line">    ngx_http_server_name_t  *sn;</span><br><span class="line"></span><br><span class="line">    // 取参数</span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    // 遍历参数个数</span><br><span class="line">    for (i = 1; i &lt; cf-&gt;args-&gt;nelts; i++) &#123;</span><br><span class="line"></span><br><span class="line">        ch = value[i].data[0];</span><br><span class="line"></span><br><span class="line">        // 判断是否为通配符</span><br><span class="line">        if ((ch == &apos;*&apos; &amp;&amp; (value[i].len &lt; 3 || value[i].data[1] != &apos;.&apos;))</span><br><span class="line">            || (ch == &apos;.&apos; &amp;&amp; value[i].len &lt; 2))</span><br><span class="line">        &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                               &quot;server name \&quot;%V\&quot; is invalid&quot;, &amp;value[i]);</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 判断server_name中是否含有/</span><br><span class="line">        if (ngx_strchr(value[i].data, &apos;/&apos;)) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_WARN, cf, 0,</span><br><span class="line">                               &quot;server name \&quot;%V\&quot; has suspicious symbols&quot;,</span><br><span class="line">                               &amp;value[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 取一个server_name的元素</span><br><span class="line">        sn = ngx_array_push(&amp;cscf-&gt;server_names);</span><br><span class="line">        if (sn == NULL) &#123;</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#if (NGX_PCRE)</span><br><span class="line">        sn-&gt;regex = NULL;</span><br><span class="line">#endif</span><br><span class="line">        // 保存server块配置结构体</span><br><span class="line">        sn-&gt;server = cscf;</span><br><span class="line"></span><br><span class="line">        // 判断server_name参数是否为主机名称，如果是，则使用cycle-&gt;hostname，否则server_name的值就是value的值</span><br><span class="line">        if (ngx_strcasecmp(value[i].data, (u_char *) &quot;$hostname&quot;) == 0) &#123;</span><br><span class="line">            sn-&gt;name = cf-&gt;cycle-&gt;hostname;</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            sn-&gt;name = value[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 处理server_name转小写</span><br><span class="line">        if (value[i].data[0] != &apos;~&apos;) &#123;</span><br><span class="line">            ngx_strlow(sn-&gt;name.data, sn-&gt;name.data, sn-&gt;name.len);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#if (NGX_PCRE)</span><br><span class="line">        // 处理正则表达式</span><br><span class="line">        &#123;</span><br><span class="line">        u_char               *p;</span><br><span class="line">        ngx_regex_compile_t   rc;</span><br><span class="line">        u_char                errstr[NGX_MAX_CONF_ERRSTR];</span><br><span class="line"></span><br><span class="line">        if (value[i].len == 1) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                               &quot;empty regex in server name \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 跳过第一个符号</span><br><span class="line">        value[i].len--;</span><br><span class="line">        value[i].data++;</span><br><span class="line"></span><br><span class="line">        ngx_memzero(&amp;rc, sizeof(ngx_regex_compile_t));</span><br><span class="line"></span><br><span class="line">        rc.pattern = value[i];</span><br><span class="line">        rc.err.len = NGX_MAX_CONF_ERRSTR;</span><br><span class="line">        rc.err.data = errstr;</span><br><span class="line"></span><br><span class="line">        for (p = value[i].data; p &lt; value[i].data + value[i].len; p++) &#123;</span><br><span class="line">            if (*p &gt;= &apos;A&apos; &amp;&amp; *p &lt;= &apos;Z&apos;) &#123;</span><br><span class="line">                rc.options = NGX_REGEX_CASELESS;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 编译正则表达式</span><br><span class="line">        sn-&gt;regex = ngx_http_regex_compile(cf, &amp;rc);</span><br><span class="line">        if (sn-&gt;regex == NULL) &#123;</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sn-&gt;name = value[i];</span><br><span class="line">        cscf-&gt;captures = (rc.captures &gt; 0);</span><br><span class="line">        &#125;</span><br><span class="line">#else</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;using regex \&quot;%V\&quot; &quot;</span><br><span class="line">                           &quot;requires PCRE library&quot;, &amp;value[i]);</span><br><span class="line"></span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、相关配置&quot;&gt;&lt;a href=&quot;#1、相关配置&quot; class=&quot;headerlink&quot; title=&quot;1、相关配置&quot;&gt;&lt;/a&gt;1、相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>vxlan学习笔记</title>
    <link href="https://weeweetan.github.io/2021/04/10/vxlan%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://weeweetan.github.io/2021/04/10/vxlan学习笔记/</id>
    <published>2021-04-10T14:05:41.000Z</published>
    <updated>2021-04-29T14:02:30.501Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1-报文格式"><a href="#1-报文格式" class="headerlink" title="1. 报文格式"></a>1. 报文格式</h2><blockquote><p>具体参照RFC7348<br>0 1 2 3<br>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</p></blockquote><p>Outer Ethernet Header:<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Outer Destination MAC Address |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Outer Destination MAC Address | Outer Source MAC Address |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Outer Source MAC Address |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>|OptnlEthtype = C-Tag 802.1Q | Outer.VLAN Tag Information |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Ethertype = 0x0800 |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>Outer IPv4 Header:<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>|Version| IHL |Type of Service| Total Length |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Identification |Flags| Fragment Offset |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Time to Live |Protocl=17(UDP)| Header Checksum |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Outer Source IPv4 Address |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Outer Destination IPv4 Address |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><p>Outer UDP Header:<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Source Port | Dest Port = VXLAN Port |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| UDP Length | UDP Checksum |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><p>VXLAN Header:<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>|R|R|R|R|I|R|R|R| Reserved |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| VXLAN Network Identifier (VNI) | Reserved |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><p>Inner Ethernet Header:<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Inner Destination MAC Address |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Inner Destination MAC Address | Inner Source MAC Address |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Inner Source MAC Address |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>|OptnlEthtype = C-Tag 802.1Q | Inner.VLAN Tag Information |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><p>Payload:<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Ethertype of Original Payload | |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |<br>| Original Ethernet Payload |<br>| |<br>|(Note that the original Ethernet Frame’s FCS is not included) |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>Frame Check Sequence:<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| New FCS (Frame Check Sequence) for Outer Ethernet Frame |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><h2 id="2-字段说明"><a href="#2-字段说明" class="headerlink" title="2. 字段说明"></a>2. 字段说明</h2><blockquote><p>Outer MAC Header：封装外层以太头，14字节，如果有VLAN TAG则为18字节。其中，源MAC地址（Outer Source MAC Address）为源VM所属VTEP的MAC地址，目的MAC地址（Outer Destination MAC Address）为到达目的VTEP的路径上下一跳设备的MAC地址。类型字段为0x0800，指示内层封装的是IP报文。<br>Outer IP Header：封装外层IP头，20字节。其中，源IP地址（Outer Source IP Address）为源VM所属VTEP的IP地址，目的IP地址（Outer Destination IP Address）为目的VM所属VTEP的IP地址。协议字段为0x11，指示内层封装的是UDP报文。<br>UDP Header：UDP报文头，8字节。其中，UDP目的端口号（UDP Destination Port）固定为4789，指示内层封装报文为VXLAN报文。UDP源端口号（UDP Source Port）为随机任意值，可以用于VTEP之间多路径负载分担的计算。<br>VXLAN Header：VXLAN协议新定义的VXLAN头，8字节。<br>Flags：8 bit，RRRRIRRR。”I”位为1时，表示VXLAN头中的VXLAN ID有效；为0，表示VXLAN ID无效。”R”位保留未用，设置为0。<br>VXLAN ID（VNI）：24 bit，用于标识一个单独的VXLAN网络。<br>Reserved：分别为24 bit和8 bit。保留位。<br>Original L2 Frame：原始以太网报文。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-报文格式&quot;&gt;&lt;a href=&quot;#1-报文格式&quot; class=&quot;headerlink&quot; title=&quot;1. 报文格式&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
    
      <category term="vxlan" scheme="https://weeweetan.github.io/tags/vxlan/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg学习笔记</title>
    <link href="https://weeweetan.github.io/2020/11/14/FFmpeg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://weeweetan.github.io/2020/11/14/FFmpeg学习笔记/</id>
    <published>2020-11-14T09:37:03.000Z</published>
    <updated>2021-04-09T14:27:28.830Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1、组件"><a href="#1、组件" class="headerlink" title="1、组件"></a>1、组件</h2><h3 id="1-1、avcodec：编解码（最重要的库）"><a href="#1-1、avcodec：编解码（最重要的库）" class="headerlink" title="1.1、avcodec：编解码（最重要的库）"></a>1.1、avcodec：编解码（最重要的库）</h3><h3 id="1-2、avdevice：各种设备的输入输出"><a href="#1-2、avdevice：各种设备的输入输出" class="headerlink" title="1.2、avdevice：各种设备的输入输出"></a>1.2、avdevice：各种设备的输入输出</h3><h3 id="1-3、avfilter：滤镜特效处理"><a href="#1-3、avfilter：滤镜特效处理" class="headerlink" title="1.3、avfilter：滤镜特效处理"></a>1.3、avfilter：滤镜特效处理</h3><h3 id="1-4、avformat：封装格式处理"><a href="#1-4、avformat：封装格式处理" class="headerlink" title="1.4、avformat：封装格式处理"></a>1.4、avformat：封装格式处理</h3><h3 id="1-5、avutil：工具库（大部分库都需要这个库的支持）"><a href="#1-5、avutil：工具库（大部分库都需要这个库的支持）" class="headerlink" title="1.5、avutil：工具库（大部分库都需要这个库的支持）"></a>1.5、avutil：工具库（大部分库都需要这个库的支持）</h3><h3 id="1-6、postproc：后加工"><a href="#1-6、postproc：后加工" class="headerlink" title="1.6、postproc：后加工"></a>1.6、postproc：后加工</h3><h3 id="1-7、swresample：音频采样数据格式转换"><a href="#1-7、swresample：音频采样数据格式转换" class="headerlink" title="1.7、swresample：音频采样数据格式转换"></a>1.7、swresample：音频采样数据格式转换</h3><h3 id="1-8、swscale：视频像素数据格式转换"><a href="#1-8、swscale：视频像素数据格式转换" class="headerlink" title="1.8、swscale：视频像素数据格式转换"></a>1.8、swscale：视频像素数据格式转换</h3><h2 id="2、命令行工具"><a href="#2、命令行工具" class="headerlink" title="2、命令行工具"></a>2、命令行工具</h2><h3 id="2-1、ffmpeg"><a href="#2-1、ffmpeg" class="headerlink" title="2.1、ffmpeg"></a>2.1、ffmpeg</h3><blockquote><p>fmpeg是用于转码的应用程序，常用命令可用ffmpeg -h显示</p></blockquote><h3 id="2-2、ffplay"><a href="#2-2、ffplay" class="headerlink" title="2.2、ffplay"></a>2.2、ffplay</h3><blockquote><p>ffplay用 SDL和FFmpeg库开发的一个简单的媒体播放器，支持格式众多，可支持udp、rtp、hls、rtsp等</p></blockquote><h3 id="2-3、ffprobe"><a href="#2-3、ffprobe" class="headerlink" title="2.3、ffprobe"></a>2.3、ffprobe</h3><blockquote><p>查看多媒体文件信息的模块，此模块可以用来查看多媒体文件格式以及编码。</p></blockquote><h3 id="2-4、ffserver"><a href="#2-4、ffserver" class="headerlink" title="2.4、ffserver"></a>2.4、ffserver</h3><blockquote><p>基于HTTP、RTSP用于实时广播的多媒体服务器.也支持时间平移</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、组件&quot;&gt;&lt;a href=&quot;#1、组件&quot; class=&quot;headerlink&quot; title=&quot;1、组件&quot;&gt;&lt;/a&gt;1、组件&lt;/h2&gt;
      
    
    </summary>
    
      <category term="FFmpeg" scheme="https://weeweetan.github.io/categories/FFmpeg/"/>
    
    
      <category term="FFmpeg" scheme="https://weeweetan.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的共享内存详解</title>
    <link href="https://weeweetan.github.io/2020/05/25/Nginx%E7%9A%84%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2020/05/25/Nginx的共享内存详解/</id>
    <published>2020-05-25T12:05:11.000Z</published>
    <updated>2020-08-11T11:41:49.819Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h2><h3 id="1-1-应用介绍"><a href="#1-1-应用介绍" class="headerlink" title="1.1 应用介绍"></a>1.1 应用介绍</h3><blockquote><p>nginx使用共享内存的模块有ngx_http_file_cache_module、ngx_http_limit_conn_module、ngx_http_limit_req_module等模块。无一例外，这几个模块都是使用nginx实现的红黑树，基于共享内存来保存他们所需要的数据。</p></blockquote><h2 id="2-源码详解"><a href="#2-源码详解" class="headerlink" title="2 源码详解"></a>2 源码详解</h2><h3 id="2-1-首先来看看相关结构体定义"><a href="#2-1-首先来看看相关结构体定义" class="headerlink" title="2.1 首先来看看相关结构体定义"></a>2.1 首先来看看相关结构体定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_slab_page_s</span>  <span class="title">ngx_slab_page_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_slab_page_s</span> &#123;</span></span><br><span class="line">    <span class="keyword">uintptr_t</span>         slab;</span><br><span class="line">    <span class="keyword">ngx_slab_page_t</span>  *next;         <span class="comment">//下一个page页</span></span><br><span class="line">    <span class="keyword">uintptr_t</span>         prev;         <span class="comment">//上一个page页</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// slab状态结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>        total;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>        used;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>        reqs;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>        fails;</span><br><span class="line">&#125; <span class="keyword">ngx_slab_stat_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_shmtx_sh_t</span>    lock;         <span class="comment">//mutex锁</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span>            min_size;     <span class="comment">//设定的最小内存块长度；</span></span><br><span class="line">    <span class="keyword">size_t</span>            min_shift;    <span class="comment">//ngx_init_zone_pool中默认为3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_slab_page_t</span>  *pages;        <span class="comment">//每一页对应一个ngx_slab_page_t页描述结构体，所有的ngx_slab_page_t存放在连续的内存中构成数组，而pages就是数组首地址</span></span><br><span class="line">    <span class="keyword">ngx_slab_page_t</span>  *last;         <span class="comment">//最后页面地址</span></span><br><span class="line">    <span class="keyword">ngx_slab_page_t</span>   <span class="built_in">free</span>;         <span class="comment">//所有的空闲页组成一个链表挂在free成员上</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_slab_stat_t</span>  *stats;        </span><br><span class="line">    <span class="keyword">ngx_uint_t</span>        pfree;        <span class="comment">// 剩余页数</span></span><br><span class="line"></span><br><span class="line">    u_char           *start;        <span class="comment">//第一页的首地址</span></span><br><span class="line">    u_char           *end;          <span class="comment">//指向这段共享内存的尾部</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_shmtx_t</span>       mutex;        <span class="comment">//Nginx封装的互斥锁</span></span><br><span class="line"></span><br><span class="line">    u_char           *log_ctx;      <span class="comment">// slab操作失败时会记录日志，为区别是哪个slab共享内存出错，可以在slab中分配一段内存存放描述的字符串，然后再用</span></span><br><span class="line">log_ctx指向这个字符串</span><br><span class="line">    u_char            zero;         <span class="comment">// 表示空字符串防止出错</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span>          log_nomem:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span>             *data;     <span class="comment">//slab的模块自由使用，slab管理内存时不会用到它</span></span><br><span class="line">    <span class="keyword">void</span>             *addr;     <span class="comment">//指向所属的ngx_shm_zone_t里的ngx_shm_t成员的addr成员，一般用于指示一段共享内存块的起始位置</span></span><br><span class="line">&#125; <span class="keyword">ngx_slab_pool_t</span>;</span><br></pre></td></tr></table></figure><h3 id="2-2-相关函数及其介绍"><a href="#2-2-相关函数及其介绍" class="headerlink" title="2.2 相关函数及其介绍"></a>2.2 相关函数及其介绍</h3><blockquote><p>主要涉及到共享内存的初始化，加锁申请，不加锁申请，加锁释放，不加锁释放等函数。首先来看下初始化的两个函数ngx_slab_sizes_init、ngx_slab_init，ngx_slab_sizes_init函数使用操作系统内存页初始化slab_max_size。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_slab_sizes_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>  n;</span><br><span class="line"></span><br><span class="line">    ngx_slab_max_size = ngx_pagesize / <span class="number">2</span>;</span><br><span class="line">    ngx_slab_exact_size = ngx_pagesize / (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>));</span><br><span class="line">    <span class="keyword">for</span> (n = ngx_slab_exact_size; n &gt;&gt;= <span class="number">1</span>; ngx_slab_exact_shift++) &#123;</span><br><span class="line">        <span class="comment">/* void */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_slab_init(<span class="keyword">ngx_slab_pool_t</span> *pool)</span><br><span class="line">&#123;</span><br><span class="line">    u_char           *p;</span><br><span class="line">    <span class="keyword">size_t</span>            size;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>         m;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>        i, n, pages;</span><br><span class="line">    <span class="keyword">ngx_slab_page_t</span>  *slots, *page;</span><br><span class="line">    <span class="comment">//最小分配的空间是8byte </span></span><br><span class="line">    pool-&gt;min_size = (<span class="keyword">size_t</span>) <span class="number">1</span> &lt;&lt; pool-&gt;min_shift;</span><br><span class="line"></span><br><span class="line">    slots = ngx_slab_slots(pool);</span><br><span class="line"></span><br><span class="line">    p = (u_char *) slots;</span><br><span class="line">    size = pool-&gt;end - p;</span><br><span class="line"></span><br><span class="line">    ngx_slab_junk(p, size);</span><br><span class="line"></span><br><span class="line">    n = ngx_pagesize_shift - pool-&gt;min_shift;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">/* only "next" is used in list head */</span></span><br><span class="line">        slots[i].slab = <span class="number">0</span>;</span><br><span class="line">        slots[i].next = &amp;slots[i];</span><br><span class="line">        slots[i].prev = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跳过上面那些slab page</span></span><br><span class="line">    p += n * <span class="keyword">sizeof</span>(<span class="keyword">ngx_slab_page_t</span>);</span><br><span class="line"></span><br><span class="line">    pool-&gt;stats = (<span class="keyword">ngx_slab_stat_t</span> *) p;</span><br><span class="line">    ngx_memzero(pool-&gt;stats, n * <span class="keyword">sizeof</span>(<span class="keyword">ngx_slab_stat_t</span>));</span><br><span class="line"></span><br><span class="line">    p += n * <span class="keyword">sizeof</span>(<span class="keyword">ngx_slab_stat_t</span>);</span><br><span class="line"></span><br><span class="line">    size -= n * (<span class="keyword">sizeof</span>(<span class="keyword">ngx_slab_page_t</span>) + <span class="keyword">sizeof</span>(<span class="keyword">ngx_slab_stat_t</span>));</span><br><span class="line"></span><br><span class="line">    pages = (<span class="keyword">ngx_uint_t</span>) (size / (ngx_pagesize + <span class="keyword">sizeof</span>(<span class="keyword">ngx_slab_page_t</span>)));</span><br><span class="line"></span><br><span class="line">    pool-&gt;pages = (<span class="keyword">ngx_slab_page_t</span> *) p;</span><br><span class="line">    ngx_memzero(pool-&gt;pages, pages * <span class="keyword">sizeof</span>(<span class="keyword">ngx_slab_page_t</span>));</span><br><span class="line"></span><br><span class="line">    page = pool-&gt;pages;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* only "next" is used in list head */</span></span><br><span class="line">    <span class="comment">//初始化free，free.next是下次分配页时候的入口  </span></span><br><span class="line">    pool-&gt;<span class="built_in">free</span>.slab = <span class="number">0</span>;</span><br><span class="line">    pool-&gt;<span class="built_in">free</span>.next = page;</span><br><span class="line">    pool-&gt;<span class="built_in">free</span>.prev = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//更新第一个slab page的状态，这儿slab成员记录了整个缓存区的页数目  </span></span><br><span class="line">    page-&gt;slab = pages;</span><br><span class="line">    page-&gt;next = &amp;pool-&gt;<span class="built_in">free</span>;</span><br><span class="line">    page-&gt;prev = (<span class="keyword">uintptr_t</span>) &amp;pool-&gt;<span class="built_in">free</span>;</span><br><span class="line">    <span class="comment">//实际缓存区(页)的开头，对齐   </span></span><br><span class="line">    <span class="comment">//因为对齐的原因,使得m_page数组和数据区域之间可能有些内存无法使用</span></span><br><span class="line">    pool-&gt;start = ngx_align_ptr(p + pages * <span class="keyword">sizeof</span>(<span class="keyword">ngx_slab_page_t</span>),</span><br><span class="line">                                ngx_pagesize);</span><br><span class="line"></span><br><span class="line">    m = pages - (pool-&gt;end - pool-&gt;start) / ngx_pagesize;</span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        pages -= m;</span><br><span class="line">        page-&gt;slab = pages;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跳过pages * sizeof(ngx_slab_page_t)</span></span><br><span class="line">    pool-&gt;last = pool-&gt;pages + pages;</span><br><span class="line">    pool-&gt;pfree = pages;</span><br><span class="line"></span><br><span class="line">    pool-&gt;log_nomem = <span class="number">1</span>;</span><br><span class="line">    pool-&gt;log_ctx = &amp;pool-&gt;zero;</span><br><span class="line">    pool-&gt;zero = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>接下来看看申请内存的相关函数ngx_slab_alloc、ngx_slab_alloc_locked、ngx_slab_calloc、ngx_slab_calloc_locked<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> *</span><br><span class="line">ngx_slab_alloc(<span class="keyword">ngx_slab_pool_t</span> *pool, <span class="keyword">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span>  *p;</span><br><span class="line">    <span class="comment">//由于是共享内存，所以在进程间需要用锁来保持同步</span></span><br><span class="line">    ngx_shmtx_lock(&amp;pool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">    p = ngx_slab_alloc_locked(pool, size);</span><br><span class="line"></span><br><span class="line">    ngx_shmtx_unlock(&amp;pool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> *</span><br><span class="line">ngx_slab_alloc_locked(<span class="keyword">ngx_slab_pool_t</span> *pool, <span class="keyword">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">size_t</span>            s;</span><br><span class="line">    <span class="keyword">uintptr_t</span>         p, m, mask, *bitmap;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>        i, n, slot, shift, <span class="built_in">map</span>;</span><br><span class="line">    <span class="keyword">ngx_slab_page_t</span>  *page, *prev, *slots;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &gt; ngx_slab_max_size) &#123;</span><br><span class="line"></span><br><span class="line">        ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, ngx_cycle-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                       <span class="string">"slab alloc: %uz"</span>, size);</span><br><span class="line"></span><br><span class="line">        page = ngx_slab_alloc_pages(pool, (size &gt;&gt; ngx_pagesize_shift)</span><br><span class="line">                                          + ((size % ngx_pagesize) ? <span class="number">1</span> : <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">if</span> (page) &#123;</span><br><span class="line">            p = ngx_slab_page_addr(pool, page);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &gt; pool-&gt;min_size) &#123;</span><br><span class="line">        shift = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (s = size - <span class="number">1</span>; s &gt;&gt;= <span class="number">1</span>; shift++) &#123; <span class="comment">/* void */</span> &#125;</span><br><span class="line">        slot = shift - pool-&gt;min_shift;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        shift = pool-&gt;min_shift;</span><br><span class="line">        slot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pool-&gt;stats[slot].reqs++;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, ngx_cycle-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"slab alloc: %uz slot: %ui"</span>, size, slot);</span><br><span class="line"></span><br><span class="line">    slots = ngx_slab_slots(pool);</span><br><span class="line">    page = slots[slot].next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (page-&gt;next != page) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shift &lt; ngx_slab_exact_shift) &#123;</span><br><span class="line"></span><br><span class="line">            bitmap = (<span class="keyword">uintptr_t</span> *) ngx_slab_page_addr(pool, page);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">map</span> = (ngx_pagesize &gt;&gt; shift) / (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; <span class="built_in">map</span>; n++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (bitmap[n] != NGX_SLAB_BUSY) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (m = <span class="number">1</span>, i = <span class="number">0</span>; m; m &lt;&lt;= <span class="number">1</span>, i++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (bitmap[n] &amp; m) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        bitmap[n] |= m;</span><br><span class="line"></span><br><span class="line">                        i = (n * <span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>) + i) &lt;&lt; shift;</span><br><span class="line"></span><br><span class="line">                        p = (<span class="keyword">uintptr_t</span>) bitmap + i;</span><br><span class="line"></span><br><span class="line">                        pool-&gt;stats[slot].used++;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (bitmap[n] == NGX_SLAB_BUSY) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (n = n + <span class="number">1</span>; n &lt; <span class="built_in">map</span>; n++) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (bitmap[n] != NGX_SLAB_BUSY) &#123;</span><br><span class="line">                                    <span class="keyword">goto</span> done;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            prev = ngx_slab_page_prev(page);</span><br><span class="line">                            prev-&gt;next = page-&gt;next;</span><br><span class="line">                            page-&gt;next-&gt;prev = page-&gt;prev;</span><br><span class="line"></span><br><span class="line">                            page-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                            page-&gt;prev = NGX_SLAB_SMALL;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">goto</span> done;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shift == ngx_slab_exact_shift) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (m = <span class="number">1</span>, i = <span class="number">0</span>; m; m &lt;&lt;= <span class="number">1</span>, i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (page-&gt;slab &amp; m) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                page-&gt;slab |= m;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (page-&gt;slab == NGX_SLAB_BUSY) &#123;</span><br><span class="line">                    prev = ngx_slab_page_prev(page);</span><br><span class="line">                    prev-&gt;next = page-&gt;next;</span><br><span class="line">                    page-&gt;next-&gt;prev = page-&gt;prev;</span><br><span class="line"></span><br><span class="line">                    page-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                    page-&gt;prev = NGX_SLAB_EXACT;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                p = ngx_slab_page_addr(pool, page) + (i &lt;&lt; shift);</span><br><span class="line"></span><br><span class="line">                pool-&gt;stats[slot].used++;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">goto</span> done;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">/* shift &gt; ngx_slab_exact_shift */</span></span><br><span class="line"></span><br><span class="line">            mask = ((<span class="keyword">uintptr_t</span>) <span class="number">1</span> &lt;&lt; (ngx_pagesize &gt;&gt; shift)) - <span class="number">1</span>;</span><br><span class="line">            mask &lt;&lt;= NGX_SLAB_MAP_SHIFT;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (m = (<span class="keyword">uintptr_t</span>) <span class="number">1</span> &lt;&lt; NGX_SLAB_MAP_SHIFT, i = <span class="number">0</span>;</span><br><span class="line">                 m &amp; mask;</span><br><span class="line">                 m &lt;&lt;= <span class="number">1</span>, i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (page-&gt;slab &amp; m) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                page-&gt;slab |= m;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((page-&gt;slab &amp; NGX_SLAB_MAP_MASK) == mask) &#123;</span><br><span class="line">                    prev = ngx_slab_page_prev(page);</span><br><span class="line">                    prev-&gt;next = page-&gt;next;</span><br><span class="line">                    page-&gt;next-&gt;prev = page-&gt;prev;</span><br><span class="line"></span><br><span class="line">                    page-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                    page-&gt;prev = NGX_SLAB_BIG;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                p = ngx_slab_page_addr(pool, page) + (i &lt;&lt; shift);</span><br><span class="line"></span><br><span class="line">                pool-&gt;stats[slot].used++;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">goto</span> done;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_slab_error(pool, NGX_LOG_ALERT, <span class="string">"ngx_slab_alloc(): page is busy"</span>);</span><br><span class="line">        ngx_debug_point();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分出一页加入到m_slot数组对应元素中  </span></span><br><span class="line">    page = ngx_slab_alloc_pages(pool, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (page) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shift &lt; ngx_slab_exact_shift) &#123;</span><br><span class="line">            bitmap = (<span class="keyword">uintptr_t</span> *) ngx_slab_page_addr(pool, page);</span><br><span class="line"></span><br><span class="line">            n = (ngx_pagesize &gt;&gt; shift) / ((<span class="number">1</span> &lt;&lt; shift) * <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">                n = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* "n" elements for bitmap, plus one requested */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (n + <span class="number">1</span>) / (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>)); i++) &#123;</span><br><span class="line">                bitmap[i] = NGX_SLAB_BUSY;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m = ((<span class="keyword">uintptr_t</span>) <span class="number">1</span> &lt;&lt; ((n + <span class="number">1</span>) % (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>)))) - <span class="number">1</span>;</span><br><span class="line">            bitmap[i] = m;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">map</span> = (ngx_pagesize &gt;&gt; shift) / (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i = i + <span class="number">1</span>; i &lt; <span class="built_in">map</span>; i++) &#123;</span><br><span class="line">                bitmap[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            page-&gt;slab = shift;</span><br><span class="line">            page-&gt;next = &amp;slots[slot];</span><br><span class="line">            page-&gt;prev = (<span class="keyword">uintptr_t</span>) &amp;slots[slot] | NGX_SLAB_SMALL;</span><br><span class="line"></span><br><span class="line">            slots[slot].next = page;</span><br><span class="line"></span><br><span class="line">            pool-&gt;stats[slot].total += (ngx_pagesize &gt;&gt; shift) - n;</span><br><span class="line"></span><br><span class="line">            p = ngx_slab_page_addr(pool, page) + (n &lt;&lt; shift);</span><br><span class="line"></span><br><span class="line">            pool-&gt;stats[slot].used++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shift == ngx_slab_exact_shift) &#123;</span><br><span class="line"></span><br><span class="line">            page-&gt;slab = <span class="number">1</span>;</span><br><span class="line">            page-&gt;next = &amp;slots[slot];</span><br><span class="line">            page-&gt;prev = (<span class="keyword">uintptr_t</span>) &amp;slots[slot] | NGX_SLAB_EXACT;</span><br><span class="line"></span><br><span class="line">            slots[slot].next = page;</span><br><span class="line"></span><br><span class="line">            pool-&gt;stats[slot].total += <span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>);</span><br><span class="line"></span><br><span class="line">            p = ngx_slab_page_addr(pool, page);</span><br><span class="line"></span><br><span class="line">            pool-&gt;stats[slot].used++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">/* shift &gt; ngx_slab_exact_shift */</span></span><br><span class="line"></span><br><span class="line">            page-&gt;slab = ((<span class="keyword">uintptr_t</span>) <span class="number">1</span> &lt;&lt; NGX_SLAB_MAP_SHIFT) | shift;</span><br><span class="line">            page-&gt;next = &amp;slots[slot];</span><br><span class="line">            page-&gt;prev = (<span class="keyword">uintptr_t</span>) &amp;slots[slot] | NGX_SLAB_BIG;</span><br><span class="line"></span><br><span class="line">            slots[slot].next = page;</span><br><span class="line"></span><br><span class="line">            pool-&gt;stats[slot].total += ngx_pagesize &gt;&gt; shift;</span><br><span class="line"></span><br><span class="line">            p = ngx_slab_page_addr(pool, page);</span><br><span class="line"></span><br><span class="line">            pool-&gt;stats[slot].used++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    pool-&gt;stats[slot].fails++;</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line"></span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, ngx_cycle-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"slab alloc: %p"</span>, (<span class="keyword">void</span> *) p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *) p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 由于是共享内存，所以在进程间需要用锁来保持同步 */</span></span><br><span class="line"><span class="keyword">void</span> *</span><br><span class="line">ngx_slab_calloc(<span class="keyword">ngx_slab_pool_t</span> *pool, <span class="keyword">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span>  *p;</span><br><span class="line"></span><br><span class="line">    ngx_shmtx_lock(&amp;pool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">    p = ngx_slab_calloc_locked(pool, size);</span><br><span class="line"></span><br><span class="line">    ngx_shmtx_unlock(&amp;pool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> *</span><br><span class="line">ngx_slab_calloc_locked(<span class="keyword">ngx_slab_pool_t</span> *pool, <span class="keyword">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span>  *p;</span><br><span class="line"></span><br><span class="line">    p = ngx_slab_alloc_locked(pool, size);</span><br><span class="line">    <span class="keyword">if</span> (p) &#123;</span><br><span class="line">        ngx_memzero(p, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_slab_page_t</span> *</span><br><span class="line">ngx_slab_alloc_pages(<span class="keyword">ngx_slab_pool_t</span> *pool, <span class="keyword">ngx_uint_t</span> pages)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_slab_page_t</span>  *page, *p;</span><br><span class="line">    <span class="comment">//初始化的时候pool-&gt;free.next默认指向第一个pool-&gt;pages</span></span><br><span class="line">    <span class="comment">//从pool-&gt;free.next开始，每次取(slab page) page = page-&gt;next</span></span><br><span class="line">    <span class="keyword">for</span> (page = pool-&gt;<span class="built_in">free</span>.next; page != &amp;pool-&gt;<span class="built_in">free</span>; page = page-&gt;next) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (page-&gt;slab &gt;= pages) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (page-&gt;slab &gt; pages) &#123;</span><br><span class="line">                page[page-&gt;slab - <span class="number">1</span>].prev = (<span class="keyword">uintptr_t</span>) &amp;page[pages];</span><br><span class="line"></span><br><span class="line">                page[pages].slab = page-&gt;slab - pages;</span><br><span class="line">                page[pages].next = page-&gt;next;</span><br><span class="line">                page[pages].prev = page-&gt;prev;</span><br><span class="line"></span><br><span class="line">                p = (<span class="keyword">ngx_slab_page_t</span> *) page-&gt;prev;</span><br><span class="line">                p-&gt;next = &amp;page[pages];</span><br><span class="line">                page-&gt;next-&gt;prev = (<span class="keyword">uintptr_t</span>) &amp;page[pages];</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//page页不够用了，则free的next和prev都指向自己</span></span><br><span class="line">                p = (<span class="keyword">ngx_slab_page_t</span> *) page-&gt;prev;</span><br><span class="line">                p-&gt;next = page-&gt;next;</span><br><span class="line">                page-&gt;next-&gt;prev = page-&gt;prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//NGX_SLAB_PAGE_START标记page是分配的pages个页的第一个页，并在第一个页page中记录出其后连续的pages个页是一起分配的</span></span><br><span class="line">            page-&gt;slab = pages | NGX_SLAB_PAGE_START;</span><br><span class="line">            page-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            page-&gt;prev = NGX_SLAB_PAGE;</span><br><span class="line"></span><br><span class="line">            pool-&gt;pfree -= pages;</span><br><span class="line">            <span class="comment">//pages为1。则直接返回该page</span></span><br><span class="line">            <span class="keyword">if</span> (--pages == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> page;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (p = page + <span class="number">1</span>; pages; pages--) &#123;</span><br><span class="line">                <span class="comment">//如果分配的页数pages&gt;1，更新后面page slab的slab成员为NGX_SLAB_PAGE_BUSY</span></span><br><span class="line">                p-&gt;slab = NGX_SLAB_PAGE_BUSY;</span><br><span class="line">                p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                p-&gt;prev = NGX_SLAB_PAGE;</span><br><span class="line">                p++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pool-&gt;log_nomem) &#123;</span><br><span class="line">        ngx_slab_error(pool, NGX_LOG_CRIT,</span><br><span class="line">                       <span class="string">"ngx_slab_alloc() failed: no memory"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p></blockquote><blockquote><p>最后来看看释放内存相关函数ngx_slab_free、ngx_slab_free_locked<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_slab_free(<span class="keyword">ngx_slab_pool_t</span> *pool, <span class="keyword">void</span> *p)</span><br><span class="line">&#123;</span><br><span class="line">    ngx_shmtx_lock(&amp;pool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">    ngx_slab_free_locked(pool, p);</span><br><span class="line"></span><br><span class="line">    ngx_shmtx_unlock(&amp;pool-&gt;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_slab_free_locked(<span class="keyword">ngx_slab_pool_t</span> *pool, <span class="keyword">void</span> *p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">size_t</span>            size;</span><br><span class="line">    <span class="keyword">uintptr_t</span>         slab, m, *bitmap;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>        i, n, type, slot, shift, <span class="built_in">map</span>;</span><br><span class="line">    <span class="keyword">ngx_slab_page_t</span>  *slots, *page;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, ngx_cycle-&gt;<span class="built_in">log</span>, <span class="number">0</span>, <span class="string">"slab free: %p"</span>, p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((u_char *) p &lt; pool-&gt;start || (u_char *) p &gt; pool-&gt;end) &#123;</span><br><span class="line">        ngx_slab_error(pool, NGX_LOG_ALERT, <span class="string">"ngx_slab_free(): outside of pool"</span>);</span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据p找到需要释放的m_page元素  </span></span><br><span class="line">    n = ((u_char *) p - pool-&gt;start) &gt;&gt; ngx_pagesize_shift;</span><br><span class="line">    page = &amp;pool-&gt;pages[n];</span><br><span class="line">    <span class="comment">//如果分配的时候一次性分配多个page，则第一个page的slab指定本次一次性分配了多少个页page</span></span><br><span class="line">    slab = page-&gt;slab;</span><br><span class="line">    type = ngx_slab_page_type(page);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> NGX_SLAB_SMALL:</span><br><span class="line"></span><br><span class="line">        shift = slab &amp; NGX_SLAB_SHIFT_MASK;</span><br><span class="line">        size = (<span class="keyword">size_t</span>) <span class="number">1</span> &lt;&lt; shift;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">uintptr_t</span>) p &amp; (size - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">goto</span> wrong_chunk;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n = ((<span class="keyword">uintptr_t</span>) p &amp; (ngx_pagesize - <span class="number">1</span>)) &gt;&gt; shift;</span><br><span class="line">        m = (<span class="keyword">uintptr_t</span>) <span class="number">1</span> &lt;&lt; (n % (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>)));</span><br><span class="line">        n /= <span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>);</span><br><span class="line">        bitmap = (<span class="keyword">uintptr_t</span> *)</span><br><span class="line">                             ((<span class="keyword">uintptr_t</span>) p &amp; ~((<span class="keyword">uintptr_t</span>) ngx_pagesize - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bitmap[n] &amp; m) &#123;</span><br><span class="line">            slot = shift - pool-&gt;min_shift;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (page-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                slots = ngx_slab_slots(pool);</span><br><span class="line"></span><br><span class="line">                page-&gt;next = slots[slot].next;</span><br><span class="line">                slots[slot].next = page;</span><br><span class="line"></span><br><span class="line">                page-&gt;prev = (<span class="keyword">uintptr_t</span>) &amp;slots[slot] | NGX_SLAB_SMALL;</span><br><span class="line">                page-&gt;next-&gt;prev = (<span class="keyword">uintptr_t</span>) page | NGX_SLAB_SMALL;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            bitmap[n] &amp;= ~m;</span><br><span class="line"></span><br><span class="line">            n = (ngx_pagesize &gt;&gt; shift) / ((<span class="number">1</span> &lt;&lt; shift) * <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">                n = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            i = n / (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>));</span><br><span class="line">            m = ((<span class="keyword">uintptr_t</span>) <span class="number">1</span> &lt;&lt; (n % (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>)))) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bitmap[i] &amp; ~m) &#123;</span><br><span class="line">                <span class="keyword">goto</span> done;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">map</span> = (ngx_pagesize &gt;&gt; shift) / (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i = i + <span class="number">1</span>; i &lt; <span class="built_in">map</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bitmap[i]) &#123;</span><br><span class="line">                    <span class="keyword">goto</span> done;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ngx_slab_free_pages(pool, page, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            pool-&gt;stats[slot].total -= (ngx_pagesize &gt;&gt; shift) - n;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">goto</span> chunk_already_free;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> NGX_SLAB_EXACT:</span><br><span class="line"></span><br><span class="line">        m = (<span class="keyword">uintptr_t</span>) <span class="number">1</span> &lt;&lt;</span><br><span class="line">                (((<span class="keyword">uintptr_t</span>) p &amp; (ngx_pagesize - <span class="number">1</span>)) &gt;&gt; ngx_slab_exact_shift);</span><br><span class="line">        size = ngx_slab_exact_size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">uintptr_t</span>) p &amp; (size - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">goto</span> wrong_chunk;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//slab(位图)中对应的位为1  </span></span><br><span class="line">        <span class="keyword">if</span> (slab &amp; m) &#123;</span><br><span class="line">            slot = ngx_slab_exact_shift - pool-&gt;min_shift;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (slab == NGX_SLAB_BUSY) &#123;</span><br><span class="line">                slots = ngx_slab_slots(pool);</span><br><span class="line"></span><br><span class="line">                page-&gt;next = slots[slot].next;</span><br><span class="line">                slots[slot].next = page;</span><br><span class="line"></span><br><span class="line">                page-&gt;prev = (<span class="keyword">uintptr_t</span>) &amp;slots[slot] | NGX_SLAB_EXACT;</span><br><span class="line">                page-&gt;next-&gt;prev = (<span class="keyword">uintptr_t</span>) page | NGX_SLAB_EXACT;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            page-&gt;slab &amp;= ~m;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (page-&gt;slab) &#123;</span><br><span class="line">                <span class="keyword">goto</span> done;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ngx_slab_free_pages(pool, page, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            pool-&gt;stats[slot].total -= <span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">goto</span> chunk_already_free;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> NGX_SLAB_BIG:</span><br><span class="line">        <span class="comment">//slab的高16位是slot块的位图,低16位用于存储slot块大小的偏移</span></span><br><span class="line">        shift = slab &amp; NGX_SLAB_SHIFT_MASK;</span><br><span class="line">        size = (<span class="keyword">size_t</span>) <span class="number">1</span> &lt;&lt; shift;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">uintptr_t</span>) p &amp; (size - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">goto</span> wrong_chunk;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m = (<span class="keyword">uintptr_t</span>) <span class="number">1</span> &lt;&lt; ((((<span class="keyword">uintptr_t</span>) p &amp; (ngx_pagesize - <span class="number">1</span>)) &gt;&gt; shift)</span><br><span class="line">                              + NGX_SLAB_MAP_SHIFT);</span><br><span class="line">        <span class="comment">//该slab块确实正在被使用  </span></span><br><span class="line">        <span class="keyword">if</span> (slab &amp; m) &#123;</span><br><span class="line">            slot = shift - pool-&gt;min_shift;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (page-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                slots = ngx_slab_slots(pool);</span><br><span class="line"></span><br><span class="line">                page-&gt;next = slots[slot].next;</span><br><span class="line">                slots[slot].next = page;</span><br><span class="line"></span><br><span class="line">                page-&gt;prev = (<span class="keyword">uintptr_t</span>) &amp;slots[slot] | NGX_SLAB_BIG;</span><br><span class="line">                page-&gt;next-&gt;prev = (<span class="keyword">uintptr_t</span>) page | NGX_SLAB_BIG;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            page-&gt;slab &amp;= ~m;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (page-&gt;slab &amp; NGX_SLAB_MAP_MASK) &#123;</span><br><span class="line">                <span class="keyword">goto</span> done;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果page页中所有slab块都不在使用就将该页面链入free中</span></span><br><span class="line">            ngx_slab_free_pages(pool, page, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            pool-&gt;stats[slot].total -= ngx_pagesize &gt;&gt; shift;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">goto</span> chunk_already_free;</span><br><span class="line">    <span class="comment">//用户归还整个页面 </span></span><br><span class="line">    <span class="keyword">case</span> NGX_SLAB_PAGE:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">uintptr_t</span>) p &amp; (ngx_pagesize - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">goto</span> wrong_chunk;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(slab &amp; NGX_SLAB_PAGE_START)) &#123;</span><br><span class="line">            ngx_slab_error(pool, NGX_LOG_ALERT,</span><br><span class="line">                           <span class="string">"ngx_slab_free(): page is already free"</span>);</span><br><span class="line">            <span class="keyword">goto</span> fail;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (slab == NGX_SLAB_PAGE_BUSY) &#123;</span><br><span class="line">            ngx_slab_error(pool, NGX_LOG_ALERT,</span><br><span class="line">                           <span class="string">"ngx_slab_free(): pointer to wrong page"</span>);</span><br><span class="line">            <span class="keyword">goto</span> fail;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算归还page的个数</span></span><br><span class="line">        size = slab &amp; ~NGX_SLAB_PAGE_START;</span><br><span class="line">        <span class="comment">//归还页面 </span></span><br><span class="line">        ngx_slab_free_pages(pool, page, size);</span><br><span class="line"></span><br><span class="line">        ngx_slab_junk(p, size &lt;&lt; ngx_pagesize_shift);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* not reached */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line"></span><br><span class="line">    pool-&gt;stats[slot].used--;</span><br><span class="line"></span><br><span class="line">    ngx_slab_junk(p, size);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">wrong_chunk:</span><br><span class="line"></span><br><span class="line">    ngx_slab_error(pool, NGX_LOG_ALERT,</span><br><span class="line">                   <span class="string">"ngx_slab_free(): pointer to wrong chunk"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">goto</span> fail;</span><br><span class="line"></span><br><span class="line">chunk_already_free:</span><br><span class="line"></span><br><span class="line">    ngx_slab_error(pool, NGX_LOG_ALERT,</span><br><span class="line">                   <span class="string">"ngx_slab_free(): chunk is already free"</span>);</span><br><span class="line"></span><br><span class="line">fail:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><blockquote><p>以上就是slab相关函数实现，nginx的slab共享内存借鉴了linux内核的内存管理的实现。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-简述&quot;&gt;&lt;a href=&quot;#1-简述&quot; class=&quot;headerlink&quot; title=&quot;1. 简述&quot;&gt;&lt;/a&gt;1. 简述&lt;/h
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx限流模块详解</title>
    <link href="https://weeweetan.github.io/2020/04/15/Nginx%E9%99%90%E6%B5%81%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2020/04/15/Nginx限流模块详解/</id>
    <published>2020-04-15T14:54:37.000Z</published>
    <updated>2021-06-05T14:20:15.119Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1-相关指令"><a href="#1-相关指令" class="headerlink" title="1.相关指令"></a>1.相关指令</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: limit_conn_zone key zone=name:size;</span><br><span class="line">Default: —</span><br><span class="line">Context: http</span><br></pre></td></tr></table></figure><blockquote><p>此指令设置限流所需共享内存的名称和size，key指定限流的标志，比如$binary_remote_addr。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Syntax:limit_conn zone number;</span><br><span class="line">Default: —</span><br><span class="line">Context: http, server, location</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>此指令指定共享内存名以及限制多少连接，比如limit_conn_zone指令key设置为$binary_remote_addr，zone设置为limit_zone，那么来自于$binary_remote_addr的连接超过number，nginx直接给客户端响应503。</p></blockquote><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2.源码解析"></a>2.源码解析</h2><h3 id="2-1-配置解析函数"><a href="#2-1-配置解析函数" class="headerlink" title="2.1 配置解析函数"></a>2.1 配置解析函数</h3><blockquote><ol><li>首先来看下limit_conn_zone指令的解析函数ngx_http_limit_conn_zone，这个函数的功能主要是解析共享内存的name和size，然后使用这两个值作为参数调用ngx_shared_memory_add函数，将共享内存添加到nginx共享内存管理模块中，设置共享内存的data以及初始化函数。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_limit_conn_zone(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    u_char                            *p;</span><br><span class="line">    <span class="keyword">ssize_t</span>                            size;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                         *value, name, s;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                         i;</span><br><span class="line">    <span class="keyword">ngx_shm_zone_t</span>                    *shm_zone;</span><br><span class="line">    <span class="keyword">ngx_http_limit_conn_ctx_t</span>         *ctx;</span><br><span class="line">    <span class="keyword">ngx_http_compile_complex_value_t</span>   ccv;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    ctx = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_limit_conn_ctx_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;ccv, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_compile_complex_value_t</span>));</span><br><span class="line"></span><br><span class="line">    ccv.cf = cf;</span><br><span class="line">    ccv.value = &amp;value[<span class="number">1</span>];</span><br><span class="line">    ccv.complex_value = &amp;ctx-&gt;key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_compile_complex_value(&amp;ccv) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    name.len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; cf-&gt;args-&gt;nelts; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_strncmp(value[i].data, <span class="string">"zone="</span>, <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            name.data = value[i].data + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">            p = (u_char *) ngx_strchr(name.data, <span class="string">':'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                                   <span class="string">"invalid zone size \"%V\""</span>, &amp;value[i]);</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            name.len = p - name.data;</span><br><span class="line"></span><br><span class="line">            s.data = p + <span class="number">1</span>;</span><br><span class="line">            s.len = value[i].data + value[i].len - s.data;</span><br><span class="line"></span><br><span class="line">            size = ngx_parse_size(&amp;s);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (size == NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                                   <span class="string">"invalid zone size \"%V\""</span>, &amp;value[i]);</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (size &lt; (<span class="keyword">ssize_t</span>) (<span class="number">8</span> * ngx_pagesize)) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                                   <span class="string">"zone \"%V\" is too small"</span>, &amp;value[i]);</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"invalid parameter \"%V\""</span>, &amp;value[i]);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name.len == <span class="number">0</span>) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"\"%V\" must have \"zone\" parameter"</span>,</span><br><span class="line">                           &amp;cmd-&gt;name);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shm_zone = ngx_shared_memory_add(cf, &amp;name, size,</span><br><span class="line">                                     &amp;ngx_http_limit_conn_module);</span><br><span class="line">    <span class="keyword">if</span> (shm_zone == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shm_zone-&gt;data) &#123;</span><br><span class="line">        ctx = shm_zone-&gt;data;</span><br><span class="line"></span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"%V \"%V\" is already bound to key \"%V\""</span>,</span><br><span class="line">                           &amp;cmd-&gt;name, &amp;name, &amp;ctx-&gt;key.value);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shm_zone-&gt;init = ngx_http_limit_conn_init_zone;</span><br><span class="line">    shm_zone-&gt;data = ctx;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="2"><li>接下来看下limit_conn指令解析函数ngx_http_limit_conn，这个函数主要是保存配置的共享内存名以及限制连接的个数。</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_limit_conn(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_shm_zone_t</span>               *shm_zone;</span><br><span class="line">    <span class="keyword">ngx_http_limit_conn_conf_t</span>   *lccf = conf;</span><br><span class="line">    <span class="keyword">ngx_http_limit_conn_limit_t</span>  *limit, *limits;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_str_t</span>  *value;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>   n;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>  i;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    shm_zone = ngx_shared_memory_add(cf, &amp;value[<span class="number">1</span>], <span class="number">0</span>,</span><br><span class="line">                                     &amp;ngx_http_limit_conn_module);</span><br><span class="line">    <span class="keyword">if</span> (shm_zone == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    limits = lccf-&gt;limits.elts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (limits == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ngx_array_init(&amp;lccf-&gt;limits, cf-&gt;pool, <span class="number">1</span>,</span><br><span class="line">                           <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_limit_conn_limit_t</span>))</span><br><span class="line">            != NGX_OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lccf-&gt;limits.nelts; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shm_zone == limits[i].shm_zone) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"is duplicate"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析配置种被限制的连接数</span></span><br><span class="line">    n = ngx_atoi(value[<span class="number">2</span>].data, value[<span class="number">2</span>].len);</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"invalid number of connections \"%V\""</span>, &amp;value[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"connection limit must be less 65536"</span>);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    limit = ngx_array_push(&amp;lccf-&gt;limits);</span><br><span class="line">    <span class="keyword">if</span> (limit == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    limit-&gt;conn = n;</span><br><span class="line">    limit-&gt;shm_zone = shm_zone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>接下来就来看下nginx是如何实现限流的，这个功能由ngx_http_limit_conn_handler实现，主要功能就是统计各个进程与key对应的连接数，超过则返回503，在统计各个进程数据的时候使用了共享内存。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_limit_conn_handler(<span class="keyword">ngx_http_request_t</span> *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">size_t</span>                          n;</span><br><span class="line">    <span class="keyword">uint32_t</span>                        hash;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                       key;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                      i;</span><br><span class="line">    <span class="keyword">ngx_slab_pool_t</span>                *shpool;</span><br><span class="line">    <span class="keyword">ngx_rbtree_node_t</span>              *node;</span><br><span class="line">    <span class="keyword">ngx_pool_cleanup_t</span>             *cln;</span><br><span class="line">    <span class="keyword">ngx_http_limit_conn_ctx_t</span>      *ctx;</span><br><span class="line">    <span class="keyword">ngx_http_limit_conn_node_t</span>     *lc;</span><br><span class="line">    <span class="keyword">ngx_http_limit_conn_conf_t</span>     *lccf;</span><br><span class="line">    <span class="keyword">ngx_http_limit_conn_limit_t</span>    *limits;</span><br><span class="line">    <span class="keyword">ngx_http_limit_conn_cleanup_t</span>  *lccln;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;main-&gt;limit_conn_set) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lccf = ngx_http_get_module_loc_conf(r, ngx_http_limit_conn_module);</span><br><span class="line">    limits = lccf-&gt;limits.elts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lccf-&gt;limits.nelts; i++) &#123;</span><br><span class="line">        ctx = limits[i].shm_zone-&gt;data;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取limit_conn_zone指令后key的值</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_http_complex_value(r, &amp;ctx-&gt;key, &amp;key) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key.len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key.len &gt; <span class="number">255</span>) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_ERR, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                          <span class="string">"the value of the \"%V\" key "</span></span><br><span class="line">                          <span class="string">"is more than 255 bytes: \"%V\""</span>,</span><br><span class="line">                          &amp;ctx-&gt;key.value, &amp;key);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r-&gt;main-&gt;limit_conn_set = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//对key进行crc计算，用于在红黑树中查找结点</span></span><br><span class="line">        hash = ngx_crc32_short(key.data, key.len);</span><br><span class="line"></span><br><span class="line">        shpool = (<span class="keyword">ngx_slab_pool_t</span> *) limits[i].shm_zone-&gt;shm.addr;</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_lock(&amp;shpool-&gt;mutex);</span><br><span class="line">        <span class="comment">// 查找符合要求的结点</span></span><br><span class="line">        node = ngx_http_limit_conn_lookup(ctx-&gt;rbtree, &amp;key, hash);</span><br><span class="line">        <span class="comment">// 没有找到对应的结点，将此次请求插入到红黑树中</span></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">//计算结点所需内存</span></span><br><span class="line">            n = offsetof(<span class="keyword">ngx_rbtree_node_t</span>, color)</span><br><span class="line">                + offsetof(<span class="keyword">ngx_http_limit_conn_node_t</span>, data)</span><br><span class="line">                + key.len;</span><br><span class="line">            <span class="comment">// 申请结点内存</span></span><br><span class="line">            node = ngx_slab_alloc_locked(shpool, n);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                ngx_shmtx_unlock(&amp;shpool-&gt;mutex);</span><br><span class="line">                ngx_http_limit_conn_cleanup_all(r-&gt;pool);</span><br><span class="line">                <span class="keyword">return</span> lccf-&gt;status_code;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lc = (<span class="keyword">ngx_http_limit_conn_node_t</span> *) &amp;node-&gt;color;</span><br><span class="line">            <span class="comment">// 赋值key，用于下次请求到来查询</span></span><br><span class="line">            node-&gt;key = hash;</span><br><span class="line">            lc-&gt;len = (u_char) key.len;</span><br><span class="line">            lc-&gt;conn = <span class="number">1</span>;</span><br><span class="line">            ngx_memcpy(lc-&gt;data, key.data, key.len);</span><br><span class="line"></span><br><span class="line">            ngx_rbtree_insert(ctx-&gt;rbtree, node);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            lc = (<span class="keyword">ngx_http_limit_conn_node_t</span> *) &amp;node-&gt;color;</span><br><span class="line">            <span class="comment">// 判断key标记的connections是否超过配置，如果超过则返回错误码</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">ngx_uint_t</span>) lc-&gt;conn &gt;= limits[i].conn) &#123;</span><br><span class="line"></span><br><span class="line">                ngx_shmtx_unlock(&amp;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">                ngx_log_error(lccf-&gt;log_level, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                              <span class="string">"limiting connections by zone \"%V\""</span>,</span><br><span class="line">                              &amp;limits[i].shm_zone-&gt;shm.name);</span><br><span class="line"></span><br><span class="line">                ngx_http_limit_conn_cleanup_all(r-&gt;pool);</span><br><span class="line">                <span class="keyword">return</span> lccf-&gt;status_code;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//连接数量+1</span></span><br><span class="line">            lc-&gt;conn++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                       <span class="string">"limit conn: %08Xi %d"</span>, node-&gt;key, lc-&gt;conn);</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_unlock(&amp;shpool-&gt;mutex);</span><br><span class="line">        <span class="comment">//注册内存池清理函数</span></span><br><span class="line">        cln = ngx_pool_cleanup_add(r-&gt;pool,</span><br><span class="line">                                   <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_limit_conn_cleanup_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (cln == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定内存清理函数</span></span><br><span class="line">        cln-&gt;handler = ngx_http_limit_conn_cleanup;</span><br><span class="line">        lccln = cln-&gt;data;</span><br><span class="line"></span><br><span class="line">        lccln-&gt;shm_zone = limits[i].shm_zone;</span><br><span class="line">        lccln-&gt;node = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="4"><li>结点插入函数，限流模块是将每个连接都存进一颗红黑树中，nginx提供一个默认的插入函数，限流模块自己实现了一个插入函数。</li></ol></blockquote><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><blockquote><p>以上就是nginx限流模块的基本实现，其他限制请求数的模块类似。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关指令&quot;&gt;&lt;a href=&quot;#1-相关指令&quot; class=&quot;headerlink&quot; title=&quot;1.相关指令&quot;&gt;&lt;/a&gt;1.相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>GDB调试技巧</title>
    <link href="https://weeweetan.github.io/2020/02/26/GDB%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>https://weeweetan.github.io/2020/02/26/GDB调试技巧/</id>
    <published>2020-02-26T11:24:12.000Z</published>
    <updated>2021-05-05T13:27:15.127Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1-预备工作"><a href="#1-预备工作" class="headerlink" title="1 预备工作"></a>1 预备工作</h2><h3 id="1-1-添加编译参数"><a href="#1-1-添加编译参数" class="headerlink" title="1.1 添加编译参数"></a>1.1 添加编译参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g</span><br></pre></td></tr></table></figure><blockquote><p>只有在编译的时候添加了-g这个参数，才能够使用gdb进行调试。</p></blockquote><h2 id="2-调试过程"><a href="#2-调试过程" class="headerlink" title="2 调试过程"></a>2 调试过程</h2><h3 id="2-1-调试新进程"><a href="#2-1-调试新进程" class="headerlink" title="2.1 调试新进程"></a>2.1 调试新进程</h3><blockquote><p>gdb 程序名称</p></blockquote><h3 id="2-2-调试已有进程"><a href="#2-2-调试已有进程" class="headerlink" title="2.2 调试已有进程"></a>2.2 调试已有进程</h3><blockquote><p>使用命令 gdb attach pid，跟踪现有进程</p></blockquote><h3 id="2-3-常用命令"><a href="#2-3-常用命令" class="headerlink" title="2.3 常用命令"></a>2.3 常用命令</h3><blockquote><ol><li>单步调式 s，全称step，意味着每个函数都会进入</li><li>单步调试 n, 全称next，不会进入函数</li><li>打印变量 p, 全称print，可以打印各种变量的值，打印二进制 p/t xxx</li><li>继续进程 c, 全称continue，设置好断点后，继续运行，直到发生断点</li><li>设置断点 b, 全称breakpoint，可设置函数断点也可以设置代码行号断点</li><li>打印堆栈 bt, 全称backtrace, 打印当前函数调用栈</li><li>退出当前函数栈 finish, 当使用s命令进入到某个函数后，可以使用finish指令退出当前函数</li><li>设置命令行参数 set args, 若函数需要argv，args，可以使用此命令设置</li><li>跳转到指定调用栈 f (0…N), 后面跟随栈层，伴随bt命令使用，首先使用bt参看当前函数调用栈，然后使用f命令查看对应栈的信息</li><li>显示隐藏字符串set print elements 0，字符串过长的情况下使用p打印会以…结束，无法完整显示，使用此命令可以显示完全</li><li>条件断点 b point if condition，条件满足才会触发中断</li><li>监控某个值 watch，值改变就会触发中断，也可监控某个内存地址，watch *(内存地址)，适用于跟踪一些全局的结构体指针。</li><li>跳转到指定行 until 行号，对于跳出循环很有用</li><li>格式化打印printf fmt, var，类似于C语言的库函数 printf “%s”, str</li><li>打印错误号: p errno</li></ol></blockquote><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><blockquote><p>以上就是gdb调试常用命令，大多数场景都能应用。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-预备工作&quot;&gt;&lt;a href=&quot;#1-预备工作&quot; class=&quot;headerlink&quot; title=&quot;1 预备工作&quot;&gt;&lt;/a&gt;1 预
      
    
    </summary>
    
      <category term="总结" scheme="https://weeweetan.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="GDB" scheme="https://weeweetan.github.io/tags/GDB/"/>
    
  </entry>
  
  <entry>
    <title>Nginx缓存清理</title>
    <link href="https://weeweetan.github.io/2019/10/27/Nginx%E7%BC%93%E5%AD%98%E6%B8%85%E7%90%86/"/>
    <id>https://weeweetan.github.io/2019/10/27/Nginx缓存清理/</id>
    <published>2019-10-27T13:56:19.000Z</published>
    <updated>2020-11-13T11:47:58.998Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1、相关配置"><a href="#1、相关配置" class="headerlink" title="1、相关配置"></a>1、相关配置</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">proxy_cache_path /dev/sda1/data inactive=<span class="number">60</span>m max_size=<span class="number">10</span>G;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>proxy_cache_path指令的inactive参数和max_size参数用来维护缓存队列大小</p></blockquote><h2 id="2、源码解析"><a href="#2、源码解析" class="headerlink" title="2、源码解析"></a>2、源码解析</h2><blockquote><ol><li>首先来看看配置解析函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br></pre></td><td class="code"><pre><span class="line">char *</span><br><span class="line">ngx_http_file_cache_set_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)</span><br><span class="line">&#123;</span><br><span class="line">    char  *confp = conf;</span><br><span class="line"></span><br><span class="line">    off_t                   max_size;</span><br><span class="line">    u_char                 *last, *p;</span><br><span class="line">    time_t                  inactive;</span><br><span class="line">    ssize_t                 size;</span><br><span class="line">    ngx_str_t               s, name, *value;</span><br><span class="line">    ngx_int_t               loader_files, manager_files;</span><br><span class="line">    ngx_msec_t              loader_sleep, manager_sleep, loader_threshold,</span><br><span class="line">                            manager_threshold;</span><br><span class="line">    ngx_uint_t              i, n, use_temp_path;</span><br><span class="line">    ngx_array_t            *caches;</span><br><span class="line">    ngx_http_file_cache_t  *cache, **ce;</span><br><span class="line"></span><br><span class="line">    cache = ngx_pcalloc(cf-&gt;pool, sizeof(ngx_http_file_cache_t));</span><br><span class="line">    if (cache == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cache-&gt;path = ngx_pcalloc(cf-&gt;pool, sizeof(ngx_path_t));</span><br><span class="line">    if (cache-&gt;path == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    use_temp_path = 1;</span><br><span class="line"></span><br><span class="line">    inactive = 600;</span><br><span class="line"></span><br><span class="line">    loader_files = 100;</span><br><span class="line">    loader_sleep = 50;</span><br><span class="line">    loader_threshold = 200;</span><br><span class="line"></span><br><span class="line">    manager_files = 100;</span><br><span class="line">    manager_sleep = 50;</span><br><span class="line">    manager_threshold = 200;</span><br><span class="line"></span><br><span class="line">    name.len = 0;</span><br><span class="line">    size = 0;</span><br><span class="line">    max_size = NGX_MAX_OFF_T_VALUE;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line">    //指定路径名称</span><br><span class="line">    cache-&gt;path-&gt;name = value[1];</span><br><span class="line"></span><br><span class="line">    if (cache-&gt;path-&gt;name.data[cache-&gt;path-&gt;name.len - 1] == &apos;/&apos;) &#123;</span><br><span class="line">        cache-&gt;path-&gt;name.len--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ngx_conf_full_name(cf-&gt;cycle, &amp;cache-&gt;path-&gt;name, 0) != NGX_OK) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //解析proxy_cache_path指令后的参数</span><br><span class="line">    for (i = 2; i &lt; cf-&gt;args-&gt;nelts; i++) &#123;</span><br><span class="line">        //解析目录层级参数</span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;levels=&quot;, 7) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            p = value[i].data + 7;</span><br><span class="line">            last = value[i].data + value[i].len;</span><br><span class="line"></span><br><span class="line">            for (n = 0; n &lt; NGX_MAX_PATH_LEVEL &amp;&amp; p &lt; last; n++) &#123;</span><br><span class="line"></span><br><span class="line">                if (*p &gt; &apos;0&apos; &amp;&amp; *p &lt; &apos;3&apos;) &#123;</span><br><span class="line"></span><br><span class="line">                    cache-&gt;path-&gt;level[n] = *p++ - &apos;0&apos;;</span><br><span class="line">                    cache-&gt;path-&gt;len += cache-&gt;path-&gt;level[n] + 1;</span><br><span class="line"></span><br><span class="line">                    if (p == last) &#123;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (*p++ == &apos;:&apos; &amp;&amp; n &lt; NGX_MAX_PATH_LEVEL - 1 &amp;&amp; p &lt; last) &#123;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    goto invalid_levels;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                goto invalid_levels;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (cache-&gt;path-&gt;len &lt; 10 + NGX_MAX_PATH_LEVEL) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        invalid_levels:</span><br><span class="line"></span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                               &quot;invalid \&quot;levels\&quot; \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;use_temp_path=&quot;, 14) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            if (ngx_strcmp(&amp;value[i].data[14], &quot;on&quot;) == 0) &#123;</span><br><span class="line">                use_temp_path = 1;</span><br><span class="line"></span><br><span class="line">            &#125; else if (ngx_strcmp(&amp;value[i].data[14], &quot;off&quot;) == 0) &#123;</span><br><span class="line">                use_temp_path = 0;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                                   &quot;invalid use_temp_path value \&quot;%V\&quot;, &quot;</span><br><span class="line">                                   &quot;it must be \&quot;on\&quot; or \&quot;off\&quot;&quot;,</span><br><span class="line">                                   &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //解析共享内存名称参数</span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;keys_zone=&quot;, 10) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            name.data = value[i].data + 10;</span><br><span class="line"></span><br><span class="line">            p = (u_char *) ngx_strchr(name.data, &apos;:&apos;);</span><br><span class="line"></span><br><span class="line">            if (p == NULL) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                                   &quot;invalid keys zone size \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            name.len = p - name.data;</span><br><span class="line"></span><br><span class="line">            s.data = p + 1;</span><br><span class="line">            s.len = value[i].data + value[i].len - s.data;</span><br><span class="line"></span><br><span class="line">            size = ngx_parse_size(&amp;s);</span><br><span class="line"></span><br><span class="line">            if (size == NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                                   &quot;invalid keys zone size \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (size &lt; (ssize_t) (2 * ngx_pagesize)) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                                   &quot;keys zone \&quot;%V\&quot; is too small&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //解析缓存分片活跃时间</span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;inactive=&quot;, 9) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            s.len = value[i].len - 9;</span><br><span class="line">            s.data = value[i].data + 9;</span><br><span class="line"></span><br><span class="line">            inactive = ngx_parse_time(&amp;s, 1);</span><br><span class="line">            if (inactive == (time_t) NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                                   &quot;invalid inactive value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //解析配置的目录最大能保存多少缓存分片</span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;max_size=&quot;, 9) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            s.len = value[i].len - 9;</span><br><span class="line">            s.data = value[i].data + 9;</span><br><span class="line"></span><br><span class="line">            max_size = ngx_parse_offset(&amp;s);</span><br><span class="line">            if (max_size &lt; 0) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                                   &quot;invalid max_size value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //解析缓存加载进程暂停阈值</span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;loader_files=&quot;, 13) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            loader_files = ngx_atoi(value[i].data + 13, value[i].len - 13);</span><br><span class="line">            if (loader_files == NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid loader_files value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //解析缓存加载进程暂停时间</span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;loader_sleep=&quot;, 13) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            s.len = value[i].len - 13;</span><br><span class="line">            s.data = value[i].data + 13;</span><br><span class="line"></span><br><span class="line">            loader_sleep = ngx_parse_time(&amp;s, 0);</span><br><span class="line">            if (loader_sleep == (ngx_msec_t) NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid loader_sleep value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;loader_threshold=&quot;, 17) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            s.len = value[i].len - 17;</span><br><span class="line">            s.data = value[i].data + 17;</span><br><span class="line"></span><br><span class="line">            loader_threshold = ngx_parse_time(&amp;s, 0);</span><br><span class="line">            if (loader_threshold == (ngx_msec_t) NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid loader_threshold value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //解析缓存管理进程暂停阈值</span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;manager_files=&quot;, 14) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            manager_files = ngx_atoi(value[i].data + 14, value[i].len - 14);</span><br><span class="line">            if (manager_files == NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid manager_files value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //manager进程达到阈值后的睡眠时间</span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;manager_sleep=&quot;, 14) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            s.len = value[i].len - 14;</span><br><span class="line">            s.data = value[i].data + 14;</span><br><span class="line"></span><br><span class="line">            manager_sleep = ngx_parse_time(&amp;s, 0);</span><br><span class="line">            if (manager_sleep == (ngx_msec_t) NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid manager_sleep value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;manager_threshold=&quot;, 18) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            s.len = value[i].len - 18;</span><br><span class="line">            s.data = value[i].data + 18;</span><br><span class="line"></span><br><span class="line">            manager_threshold = ngx_parse_time(&amp;s, 0);</span><br><span class="line">            if (manager_threshold == (ngx_msec_t) NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid manager_threshold value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid parameter \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (name.len == 0 || size == 0) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;\&quot;%V\&quot; must have \&quot;keys_zone\&quot; parameter&quot;,</span><br><span class="line">                           &amp;cmd-&gt;name);</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置loader跟manager进程的回调函数</span><br><span class="line">    cache-&gt;path-&gt;manager = ngx_http_file_cache_manager;</span><br><span class="line">    cache-&gt;path-&gt;loader = ngx_http_file_cache_loader;</span><br><span class="line">    cache-&gt;path-&gt;data = cache;</span><br><span class="line">    cache-&gt;path-&gt;conf_file = cf-&gt;conf_file-&gt;file.name.data;</span><br><span class="line">    cache-&gt;path-&gt;line = cf-&gt;conf_file-&gt;line;</span><br><span class="line">    cache-&gt;loader_files = loader_files;</span><br><span class="line">    cache-&gt;loader_sleep = loader_sleep;</span><br><span class="line">    cache-&gt;loader_threshold = loader_threshold;</span><br><span class="line">    cache-&gt;manager_files = manager_files;</span><br><span class="line">    cache-&gt;manager_sleep = manager_sleep;</span><br><span class="line">    cache-&gt;manager_threshold = manager_threshold;</span><br><span class="line">    //将缓存路径添加到全局管理</span><br><span class="line">    if (ngx_add_path(cf, &amp;cache-&gt;path) != NGX_OK) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    //添加共享内存名称</span><br><span class="line">    cache-&gt;shm_zone = ngx_shared_memory_add(cf, &amp;name, size, cmd-&gt;post);</span><br><span class="line">    if (cache-&gt;shm_zone == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (cache-&gt;shm_zone-&gt;data) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;duplicate zone \&quot;%V\&quot;&quot;, &amp;name);</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置共享内存初始化函数指针</span><br><span class="line">    cache-&gt;shm_zone-&gt;init = ngx_http_file_cache_init;</span><br><span class="line">    cache-&gt;shm_zone-&gt;data = cache;</span><br><span class="line"></span><br><span class="line">    cache-&gt;use_temp_path = use_temp_path;</span><br><span class="line"></span><br><span class="line">    cache-&gt;inactive = inactive;</span><br><span class="line">    cache-&gt;max_size = max_size;</span><br><span class="line"></span><br><span class="line">    caches = (ngx_array_t *) (confp + cmd-&gt;offset);</span><br><span class="line">    //保存cache结构体</span><br><span class="line">    ce = ngx_array_push(caches);</span><br><span class="line">    if (ce == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *ce = cache;</span><br><span class="line"></span><br><span class="line">    return NGX_CONF_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="2"><li>上述代码中我们只关注inactive，max_size参数解析、cache-&gt;path相关成员赋值以及loader和manager相关的赋值代码，如下所示：</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cache-&gt;path-&gt;manager = ngx_http_file_cache_manager;</span><br><span class="line">cache-&gt;path-&gt;loader = ngx_http_file_cache_loader;</span><br><span class="line">cache-&gt;path-&gt;data = cache;</span><br><span class="line">cache-&gt;path-&gt;conf_file = cf-&gt;conf_file-&gt;file.name.data;</span><br><span class="line">cache-&gt;path-&gt;line = cf-&gt;conf_file-&gt;line;</span><br><span class="line">cache-&gt;loader_files = loader_files;</span><br><span class="line">cache-&gt;loader_sleep = loader_sleep;</span><br><span class="line">cache-&gt;loader_threshold = loader_threshold;</span><br><span class="line">cache-&gt;manager_files = manager_files;</span><br><span class="line">cache-&gt;manager_sleep = manager_sleep;</span><br><span class="line">cache-&gt;manager_threshold = manager_threshold;</span><br><span class="line"></span><br><span class="line">if (ngx_add_path(cf, &amp;cache-&gt;path) != NGX_OK) &#123;</span><br><span class="line">    return NGX_CONF_ERROR;</span><br><span class="line">&#125;</span><br><span class="line">//添加共享内存名称</span><br><span class="line">cache-&gt;shm_zone = ngx_shared_memory_add(cf, &amp;name, size, cmd-&gt;post);</span><br><span class="line">if (cache-&gt;shm_zone == NULL) &#123;</span><br><span class="line">    return NGX_CONF_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (cache-&gt;shm_zone-&gt;data) &#123;</span><br><span class="line">    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                       &quot;duplicate zone \&quot;%V\&quot;&quot;, &amp;name);</span><br><span class="line">    return NGX_CONF_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//设置共享内存初始化函数</span><br><span class="line">cache-&gt;shm_zone-&gt;init = ngx_http_file_cache_init;</span><br><span class="line">cache-&gt;shm_zone-&gt;data = cache;</span><br><span class="line"></span><br><span class="line">cache-&gt;use_temp_path = use_temp_path;</span><br><span class="line"></span><br><span class="line">cache-&gt;inactive = inactive;</span><br><span class="line">cache-&gt;max_size = max_size;</span><br><span class="line">//保存cache</span><br><span class="line">caches = (ngx_array_t *) (confp + cmd-&gt;offset);</span><br><span class="line"></span><br><span class="line">ce = ngx_array_push(caches);</span><br><span class="line">if (ce == NULL) &#123;</span><br><span class="line">    return NGX_CONF_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*ce = cache;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>path结构体初始化完成之后，ngx_add_path函数将配置的路径添加到nginx全局路径管理器后，配置解析完成之后会统一管理，接下来我们来看看几个跟目录相关的回调函数。</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ngx_http_file_cache_manager</span><br><span class="line">//加载本地已有缓存函数</span><br><span class="line">ngx_http_file_cache_loader</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>首先来看看ngx_http_file_cache_manager函数的具体实现</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static ngx_msec_t</span><br><span class="line">ngx_http_file_cache_manager(void *data)</span><br><span class="line">&#123;</span><br><span class="line">    ngx_http_file_cache_t  *cache = data;</span><br><span class="line"></span><br><span class="line">    off_t       size;</span><br><span class="line">    time_t      wait;</span><br><span class="line">    ngx_msec_t  elapsed, next;</span><br><span class="line">    ngx_uint_t  count, watermark;</span><br><span class="line"></span><br><span class="line">    cache-&gt;last = ngx_current_msec;</span><br><span class="line">    cache-&gt;files = 0;</span><br><span class="line">    //查找过期缓存结点</span><br><span class="line">    next = (ngx_msec_t) ngx_http_file_cache_expire(cache) * 1000;</span><br><span class="line"></span><br><span class="line">    if (next == 0) &#123;</span><br><span class="line">        next = cache-&gt;manager_sleep;</span><br><span class="line">        goto done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for ( ;; ) &#123;</span><br><span class="line">        ngx_shmtx_lock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        size = cache-&gt;sh-&gt;size;</span><br><span class="line">        count = cache-&gt;sh-&gt;count;</span><br><span class="line">        watermark = cache-&gt;sh-&gt;watermark;</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_unlock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        ngx_log_debug3(NGX_LOG_DEBUG_HTTP, ngx_cycle-&gt;log, 0,</span><br><span class="line">                       &quot;http file cache size: %O c:%ui w:%i&quot;,</span><br><span class="line">                       size, count, (ngx_int_t) watermark);</span><br><span class="line"></span><br><span class="line">        if (size &lt; cache-&gt;max_size &amp;&amp; count &lt; watermark) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        //处理缓存目录已经满了的情况</span><br><span class="line">        wait = ngx_http_file_cache_forced_expire(cache);</span><br><span class="line"></span><br><span class="line">        if (wait &gt; 0) &#123;</span><br><span class="line">            next = (ngx_msec_t) wait * 1000;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_quit || ngx_terminate) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (++cache-&gt;files &gt;= cache-&gt;manager_files) &#123;</span><br><span class="line">            next = cache-&gt;manager_sleep;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_time_update();</span><br><span class="line"></span><br><span class="line">        elapsed = ngx_abs((ngx_msec_int_t) (ngx_current_msec - cache-&gt;last));</span><br><span class="line"></span><br><span class="line">        if (elapsed &gt;= cache-&gt;manager_threshold) &#123;</span><br><span class="line">            next = cache-&gt;manager_sleep;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line"></span><br><span class="line">    elapsed = ngx_abs((ngx_msec_int_t) (ngx_current_msec - cache-&gt;last));</span><br><span class="line"></span><br><span class="line">    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, ngx_cycle-&gt;log, 0,</span><br><span class="line">                   &quot;http file cache manager: %ui e:%M n:%M&quot;,</span><br><span class="line">                   cache-&gt;files, elapsed, next);</span><br><span class="line"></span><br><span class="line">    return next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="5"><li>这个函数主要的功能就是遍历缓存结点数，找出过期结点，并删除，接下来看看ngx_http_file_cache_loader函数实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">static void</span><br><span class="line">ngx_http_file_cache_loader(void *data)</span><br><span class="line">&#123;</span><br><span class="line">    ngx_http_file_cache_t  *cache = data;</span><br><span class="line"></span><br><span class="line">    ngx_tree_ctx_t  tree;</span><br><span class="line"></span><br><span class="line">    if (!cache-&gt;sh-&gt;cold || cache-&gt;sh-&gt;loading) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!ngx_atomic_cmp_set(&amp;cache-&gt;sh-&gt;loading, 0, ngx_pid)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, ngx_cycle-&gt;log, 0,</span><br><span class="line">                   &quot;http file cache loader&quot;);</span><br><span class="line">    //设置遍历目录时所需的函数指针</span><br><span class="line">    tree.init_handler = NULL;</span><br><span class="line">    //遍历目录时，遇到文件处理函数</span><br><span class="line">    tree.file_handler = ngx_http_file_cache_manage_file;</span><br><span class="line">    //遍历目录时，遇到文件处理函数</span><br><span class="line">    tree.pre_tree_handler = ngx_http_file_cache_manage_directory;</span><br><span class="line">    tree.post_tree_handler = ngx_http_file_cache_noop;</span><br><span class="line">    //缓存目录中有不符合规则的缓存文件，会删除文件</span><br><span class="line">    tree.spec_handler = ngx_http_file_cache_delete_file;</span><br><span class="line">    tree.data = cache;</span><br><span class="line">    tree.alloc = 0;</span><br><span class="line">    tree.log = ngx_cycle-&gt;log;</span><br><span class="line"></span><br><span class="line">    cache-&gt;last = ngx_current_msec;</span><br><span class="line">    cache-&gt;files = 0;</span><br><span class="line">    //遍历配置路径下所有文件</span><br><span class="line">    if (ngx_walk_tree(&amp;tree, &amp;cache-&gt;path-&gt;name) == NGX_ABORT) &#123;</span><br><span class="line">        cache-&gt;sh-&gt;loading = 0;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cache-&gt;sh-&gt;cold = 0;</span><br><span class="line">    cache-&gt;sh-&gt;loading = 0;</span><br><span class="line"></span><br><span class="line">    ngx_log_error(NGX_LOG_NOTICE, ngx_cycle-&gt;log, 0,</span><br><span class="line">                  &quot;http file cache: %V %.3fM, bsize: %uz&quot;,</span><br><span class="line">                  &amp;cache-&gt;path-&gt;name,</span><br><span class="line">                  ((double) cache-&gt;sh-&gt;size * cache-&gt;bsize) / (1024 * 1024),</span><br><span class="line">                  cache-&gt;bsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;6. 此函数功能就是绑定回调函数，然后遍历配置的目录，根据目录中不同的对象调用不同的回调函数</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><blockquote><p>以上就是nginx缓存管理的主要代码，总的来说就是在解析配置时设置ngx_path_t结构体的回调函数，cache_manager进程定时启动扫描LRU队列，删除过期结点</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、相关配置&quot;&gt;&lt;a href=&quot;#1、相关配置&quot; class=&quot;headerlink&quot; title=&quot;1、相关配置&quot;&gt;&lt;/a&gt;1、相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的return模块</title>
    <link href="https://weeweetan.github.io/2019/10/12/Nginx%E7%9A%84return%E6%A8%A1%E5%9D%97/"/>
    <id>https://weeweetan.github.io/2019/10/12/Nginx的return模块/</id>
    <published>2019-10-12T06:05:34.000Z</published>
    <updated>2021-05-29T14:39:16.013Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1-相关配置"><a href="#1-相关配置" class="headerlink" title="1 相关配置"></a>1 相关配置</h2><blockquote><p>return模块配置指令如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> value;</span><br></pre></td></tr></table></figure><p></p></blockquote><p>详细用法参考<a href="http://nginx.org/en/docs/stream/ngx_stream_return_module.html#return" target="_blank" rel="noopener">nginx官方文档</a></p><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2 源码解析"></a>2 源码解析</h2><h3 id="2-1-首先看看指令解析函数，这个函数的主要功能就是把return指令后面的文本以nginx变量的形式保存，绑定此阶段的处理函数。"><a href="#2-1-首先看看指令解析函数，这个函数的主要功能就是把return指令后面的文本以nginx变量的形式保存，绑定此阶段的处理函数。" class="headerlink" title="2.1 首先看看指令解析函数，这个函数的主要功能就是把return指令后面的文本以nginx变量的形式保存，绑定此阶段的处理函数。"></a>2.1 首先看看指令解析函数，这个函数的主要功能就是把return指令后面的文本以nginx变量的形式保存，绑定此阶段的处理函数。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_stream_return(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_stream_return_srv_conf_t</span> *rscf = conf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_str_t</span>                           *value;</span><br><span class="line">    <span class="keyword">ngx_stream_core_srv_conf_t</span>          *cscf;</span><br><span class="line">    <span class="keyword">ngx_stream_compile_complex_value_t</span>   ccv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rscf-&gt;text.value.data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"is duplicate"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;ccv, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_compile_complex_value_t</span>));</span><br><span class="line"></span><br><span class="line">    ccv.cf = cf;</span><br><span class="line">    ccv.value = &amp;value[<span class="number">1</span>];</span><br><span class="line">    ccv.complex_value = &amp;rscf-&gt;text;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_stream_compile_complex_value(&amp;ccv) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cscf = ngx_stream_conf_get_module_srv_conf(cf, ngx_stream_core_module);</span><br><span class="line"></span><br><span class="line">    cscf-&gt;handler = ngx_stream_return_handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-在上一步设置好处理函数后，nginx运行到此阶段就会调用ngx-stream-return-handler函数，并给客户端响应"><a href="#2-2-在上一步设置好处理函数后，nginx运行到此阶段就会调用ngx-stream-return-handler函数，并给客户端响应" class="headerlink" title="2.2 在上一步设置好处理函数后，nginx运行到此阶段就会调用ngx_stream_return_handler函数，并给客户端响应"></a>2.2 在上一步设置好处理函数后，nginx运行到此阶段就会调用ngx_stream_return_handler函数，并给客户端响应</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">ngx_stream_return_handler(<span class="keyword">ngx_stream_session_t</span> *s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                      text;</span><br><span class="line">    <span class="keyword">ngx_buf_t</span>                     *b;</span><br><span class="line">    <span class="keyword">ngx_connection_t</span>              *c;</span><br><span class="line">    <span class="keyword">ngx_stream_return_ctx_t</span>       *ctx;</span><br><span class="line">    <span class="keyword">ngx_stream_return_srv_conf_t</span>  *rscf;</span><br><span class="line"></span><br><span class="line">    c = s-&gt;connection;</span><br><span class="line"></span><br><span class="line">    c-&gt;<span class="built_in">log</span>-&gt;action = <span class="string">"returning text"</span>;</span><br><span class="line"></span><br><span class="line">    rscf = ngx_stream_get_module_srv_conf(s, ngx_stream_return_module);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取变量值</span></span><br><span class="line">    <span class="keyword">if</span> (ngx_stream_complex_value(s, &amp;rscf-&gt;text, &amp;text) != NGX_OK) &#123;</span><br><span class="line">        ngx_stream_finalize_session(s, NGX_STREAM_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, c-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"stream return text: \"%V\""</span>, &amp;text);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (text.len == <span class="number">0</span>) &#123;</span><br><span class="line">        ngx_stream_finalize_session(s, NGX_STREAM_OK);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配上下文内存</span></span><br><span class="line">    ctx = ngx_pcalloc(c-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_return_ctx_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ngx_stream_finalize_session(s, NGX_STREAM_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置模块上下文</span></span><br><span class="line">    ngx_stream_set_ctx(s, ctx, ngx_stream_return_module);</span><br><span class="line"></span><br><span class="line">    b = ngx_calloc_buf(c-&gt;pool);</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ngx_stream_finalize_session(s, NGX_STREAM_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    b-&gt;memory = <span class="number">1</span>;</span><br><span class="line">    b-&gt;pos = text.data;</span><br><span class="line">    b-&gt;last = text.data + text.len;</span><br><span class="line">    b-&gt;last_buf = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ctx-&gt;out = ngx_alloc_chain_link(c-&gt;pool);</span><br><span class="line">    <span class="keyword">if</span> (ctx-&gt;out == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ngx_stream_finalize_session(s, NGX_STREAM_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂载输出buf</span></span><br><span class="line">    ctx-&gt;out-&gt;buf = b;</span><br><span class="line">    ctx-&gt;out-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置写回调函数</span></span><br><span class="line">    c-&gt;write-&gt;handler = ngx_stream_return_write_handler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用写回调函数</span></span><br><span class="line">    ngx_stream_return_write_handler(c-&gt;write);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>ngx_stream_return_handler函数首先解析出return指令后面的字符串值，然后为当前模块的ngx_stream_return_ctx_t申请内存，主要用来挂载发送数据的chain，再为发送数据的chain以及buf申请内存，设置写事件的handler，最后发送响应到客户端。</p></blockquote><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><blockquote><p>return模块属于stream模块，在stream模块中处于第4阶段，所以需要绑定handler函数，将return指令后的变量或者纯文本响应给客户端。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关配置&quot;&gt;&lt;a href=&quot;#1-相关配置&quot; class=&quot;headerlink&quot; title=&quot;1 相关配置&quot;&gt;&lt;/a&gt;1 相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的geo模块</title>
    <link href="https://weeweetan.github.io/2019/10/12/Nginx%E7%9A%84geo%E6%A8%A1%E5%9D%97/"/>
    <id>https://weeweetan.github.io/2019/10/12/Nginx的geo模块/</id>
    <published>2019-10-12T01:26:55.000Z</published>
    <updated>2019-12-20T12:45:20.028Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1、相关配置"><a href="#1、相关配置" class="headerlink" title="1、相关配置"></a>1、相关配置</h2><blockquote><p>geo模块配置指令如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">geo $remote_addr $var &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p></blockquote><p>详细用法参考<a href="http://nginx.org/en/docs/http/ngx_http_geo_module.html#geo" target="_blank" rel="noopener">nginx官方文档</a></p><h2 id="2、源码详解"><a href="#2、源码详解" class="headerlink" title="2、源码详解"></a>2、源码详解</h2><blockquote><p>2.1 首先来看看geo指令配置解析函数，这个函数的主要功能就是解析geo指令之后的变量，然后再调用ngx_http_geo解析{}中的内容</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_geo_block(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span>                     *rv;</span><br><span class="line">    <span class="keyword">size_t</span>                    len;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                *value, name;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                i;</span><br><span class="line">    <span class="keyword">ngx_conf_t</span>                save;</span><br><span class="line">    <span class="keyword">ngx_pool_t</span>               *pool;</span><br><span class="line">    <span class="keyword">ngx_array_t</span>              *a;</span><br><span class="line">    <span class="keyword">ngx_http_variable_t</span>      *var;</span><br><span class="line">    <span class="keyword">ngx_http_geo_ctx_t</span>       *geo;</span><br><span class="line">    <span class="keyword">ngx_http_geo_conf_ctx_t</span>   ctx;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_INET6)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span>    <span class="title">zero</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    geo = ngx_palloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_geo_ctx_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (geo == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    name = value[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name.data[<span class="number">0</span>] != <span class="string">'$'</span>) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"invalid variable name \"%V\""</span>, &amp;name);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    name.len--;</span><br><span class="line">    name.data++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cf-&gt;args-&gt;nelts == <span class="number">3</span>) &#123;</span><br><span class="line"></span><br><span class="line">        geo-&gt;index = ngx_http_get_variable_index(cf, &amp;name);</span><br><span class="line">        <span class="keyword">if</span> (geo-&gt;index == NGX_ERROR) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        name = value[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (name.data[<span class="number">0</span>] != <span class="string">'$'</span>) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"invalid variable name \"%V\""</span>, &amp;name);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        name.len--;</span><br><span class="line">        name.data++;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        geo-&gt;index = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var = ngx_http_add_variable(cf, &amp;name, NGX_HTTP_VAR_CHANGEABLE);</span><br><span class="line">    <span class="keyword">if</span> (var == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pool = ngx_create_pool(NGX_DEFAULT_POOL_SIZE, cf-&gt;<span class="built_in">log</span>);</span><br><span class="line">    <span class="keyword">if</span> (pool == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;ctx, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_geo_conf_ctx_t</span>));</span><br><span class="line"></span><br><span class="line">    ctx.temp_pool = ngx_create_pool(NGX_DEFAULT_POOL_SIZE, cf-&gt;<span class="built_in">log</span>);</span><br><span class="line">    <span class="keyword">if</span> (ctx.temp_pool == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_rbtree_init(&amp;ctx.rbtree, &amp;ctx.sentinel, ngx_str_rbtree_insert_value);</span><br><span class="line"></span><br><span class="line">    ctx.pool = cf-&gt;pool;</span><br><span class="line">    ctx.data_size = <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_geo_header_t</span>)</span><br><span class="line">                  + <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_variable_value_t</span>)</span><br><span class="line">                  + <span class="number">0x10000</span> * <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_geo_range_t</span> *);</span><br><span class="line">    ctx.allow_binary_include = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    save = *cf;</span><br><span class="line">    cf-&gt;pool = pool;</span><br><span class="line">    cf-&gt;ctx = &amp;ctx;</span><br><span class="line">    cf-&gt;handler = ngx_http_geo;</span><br><span class="line">    cf-&gt;handler_conf = conf;</span><br><span class="line"></span><br><span class="line">    rv = ngx_conf_parse(cf, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    *cf = save;</span><br><span class="line"></span><br><span class="line">    geo-&gt;proxies = ctx.proxies;</span><br><span class="line">    geo-&gt;proxy_recursive = ctx.proxy_recursive;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ctx.ranges) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ctx.high.low &amp;&amp; !ctx.binary_include) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; i++) &#123;</span><br><span class="line">                a = (<span class="keyword">ngx_array_t</span> *) ctx.high.low[i];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (a == <span class="literal">NULL</span> || a-&gt;nelts == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                len = a-&gt;nelts * <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_geo_range_t</span>);</span><br><span class="line"></span><br><span class="line">                ctx.high.low[i] = ngx_palloc(cf-&gt;pool, len + <span class="keyword">sizeof</span>(<span class="keyword">void</span> *));</span><br><span class="line">                <span class="keyword">if</span> (ctx.high.low[i] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ngx_memcpy(ctx.high.low[i], a-&gt;elts, len);</span><br><span class="line">                ctx.high.low[i][a-&gt;nelts].value = <span class="literal">NULL</span>;</span><br><span class="line">                ctx.data_size += len + <span class="keyword">sizeof</span>(<span class="keyword">void</span> *);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ctx.allow_binary_include</span><br><span class="line">                &amp;&amp; !ctx.outside_entries</span><br><span class="line">                &amp;&amp; ctx.entries &gt; <span class="number">100000</span></span><br><span class="line">                &amp;&amp; ctx.includes == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ngx_http_geo_create_binary_base(&amp;ctx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ctx.high.default_value == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ctx.high.default_value = &amp;ngx_http_variable_null_value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        geo-&gt;u.high = ctx.high;</span><br><span class="line"></span><br><span class="line">        var-&gt;get_handler = ngx_http_geo_range_variable;</span><br><span class="line">        var-&gt;data = (<span class="keyword">uintptr_t</span>) geo;</span><br><span class="line"></span><br><span class="line">        ngx_destroy_pool(ctx.temp_pool);</span><br><span class="line">        ngx_destroy_pool(pool);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ctx.tree == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ctx.tree = ngx_radix_tree_create(cf-&gt;pool, <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span> (ctx.tree == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        geo-&gt;u.trees.tree = ctx.tree;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_INET6)</span></span><br><span class="line">        <span class="keyword">if</span> (ctx.tree6 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ctx.tree6 = ngx_radix_tree_create(cf-&gt;pool, <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span> (ctx.tree6 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        geo-&gt;u.trees.tree6 = ctx.tree6;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        var-&gt;get_handler = ngx_http_geo_cidr_variable;</span><br><span class="line">        var-&gt;data = (<span class="keyword">uintptr_t</span>) geo;</span><br><span class="line"></span><br><span class="line">        ngx_destroy_pool(ctx.temp_pool);</span><br><span class="line">        ngx_destroy_pool(pool);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_radix32tree_insert(ctx.tree, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                                   (<span class="keyword">uintptr_t</span>) &amp;ngx_http_variable_null_value)</span><br><span class="line">            == NGX_ERROR)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* NGX_BUSY is okay (default was set explicitly) */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_INET6)</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_radix128tree_insert(ctx.tree6, zero.s6_addr, zero.s6_addr,</span><br><span class="line">                                    (<span class="keyword">uintptr_t</span>) &amp;ngx_http_variable_null_value)</span><br><span class="line">            == NGX_ERROR)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>2.2 ngx_http_geo解析{}中的内容，处理ranges等指令和IP地址段或者CIDR地址</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_geo(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *dummy, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span>                     *rv;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                *value;</span><br><span class="line">    <span class="keyword">ngx_cidr_t</span>                cidr;</span><br><span class="line">    <span class="keyword">ngx_http_geo_conf_ctx_t</span>  *ctx;</span><br><span class="line"></span><br><span class="line">    ctx = cf-&gt;ctx;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cf-&gt;args-&gt;nelts == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">0</span>].data, <span class="string">"ranges"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ctx-&gt;tree</span><br><span class="line">#<span class="keyword">if</span> (NGX_HAVE_INET6)</span><br><span class="line">                || ctx-&gt;tree6</span><br><span class="line">#endif</span><br><span class="line">               )</span><br><span class="line">            &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                                   <span class="string">"the \"ranges\" directive must be "</span></span><br><span class="line">                                   <span class="string">"the first directive inside \"geo\" block"</span>);</span><br><span class="line">                <span class="keyword">goto</span> failed;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ctx-&gt;ranges = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            rv = NGX_CONF_OK;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">0</span>].data, <span class="string">"proxy_recursive"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            ctx-&gt;proxy_recursive = <span class="number">1</span>;</span><br><span class="line">            rv = NGX_CONF_OK;</span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cf-&gt;args-&gt;nelts != <span class="number">2</span>) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"invalid number of the geo parameters"</span>);</span><br><span class="line">        <span class="keyword">goto</span> failed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">0</span>].data, <span class="string">"include"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        rv = ngx_http_geo_include(cf, ctx, &amp;value[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">0</span>].data, <span class="string">"proxy"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_http_geo_cidr_value(cf, &amp;value[<span class="number">1</span>], &amp;cidr) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">goto</span> failed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rv = ngx_http_geo_add_proxy(cf, ctx, &amp;cidr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ctx-&gt;ranges) &#123;</span><br><span class="line">        rv = ngx_http_geo_range(cf, ctx, value);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rv = ngx_http_geo_cidr(cf, ctx, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line"></span><br><span class="line">    ngx_reset_pool(cf-&gt;pool);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rv;</span><br><span class="line"></span><br><span class="line">failed:</span><br><span class="line"></span><br><span class="line">    ngx_reset_pool(cf-&gt;pool);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>2.3 处理range地址，调用ngx_http_geo_range函数实现，接下来看看这个函数的实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static char *</span><br><span class="line">ngx_http_geo_range(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,</span><br><span class="line">    ngx_str_t *value)</span><br><span class="line">&#123;</span><br><span class="line">    u_char      *p, *last;</span><br><span class="line">    in_addr_t    start, end;</span><br><span class="line">    ngx_str_t   *net;</span><br><span class="line">    ngx_uint_t   del;</span><br><span class="line"></span><br><span class="line">    if (ngx_strcmp(value[0].data, &quot;default&quot;) == 0) &#123;</span><br><span class="line"></span><br><span class="line">        if (ctx-&gt;high.default_value) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_WARN, cf, 0,</span><br><span class="line">                &quot;duplicate default geo range value: \&quot;%V\&quot;, old value: \&quot;%v\&quot;&quot;,</span><br><span class="line">                &amp;value[1], ctx-&gt;high.default_value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx-&gt;high.default_value = ngx_http_geo_value(cf, ctx, &amp;value[1]);</span><br><span class="line">        if (ctx-&gt;high.default_value == NULL) &#123;</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ctx-&gt;binary_include) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">            &quot;binary geo range base \&quot;%s\&quot; cannot be mixed with usual entries&quot;,</span><br><span class="line">            ctx-&gt;include_name.data);</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ctx-&gt;high.low == NULL) &#123;</span><br><span class="line">        ctx-&gt;high.low = ngx_pcalloc(ctx-&gt;pool,</span><br><span class="line">                                    0x10000 * sizeof(ngx_http_geo_range_t *));</span><br><span class="line">        if (ctx-&gt;high.low == NULL) &#123;</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx-&gt;entries++;</span><br><span class="line">    ctx-&gt;outside_entries = 1;</span><br><span class="line"></span><br><span class="line">    if (ngx_strcmp(value[0].data, &quot;delete&quot;) == 0) &#123;</span><br><span class="line">        net = &amp;value[1];</span><br><span class="line">        del = 1;</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        net = &amp;value[0];</span><br><span class="line">        del = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    last = net-&gt;data + net-&gt;len;</span><br><span class="line"></span><br><span class="line">    p = ngx_strlchr(net-&gt;data, last, &apos;-&apos;);</span><br><span class="line"></span><br><span class="line">    if (p == NULL) &#123;</span><br><span class="line">        goto invalid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start = ngx_inet_addr(net-&gt;data, p - net-&gt;data);</span><br><span class="line"></span><br><span class="line">    if (start == INADDR_NONE) &#123;</span><br><span class="line">        goto invalid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start = ntohl(start);</span><br><span class="line"></span><br><span class="line">    p++;</span><br><span class="line"></span><br><span class="line">    end = ngx_inet_addr(p, last - p);</span><br><span class="line"></span><br><span class="line">    if (end == INADDR_NONE) &#123;</span><br><span class="line">        goto invalid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    end = ntohl(end);</span><br><span class="line"></span><br><span class="line">    if (start &gt; end) &#123;</span><br><span class="line">        goto invalid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (del) &#123;</span><br><span class="line">        if (ngx_http_geo_delete_range(cf, ctx, start, end)) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_WARN, cf, 0,</span><br><span class="line">                               &quot;no address range \&quot;%V\&quot; to delete&quot;, net);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx-&gt;value = ngx_http_geo_value(cf, ctx, &amp;value[1]);</span><br><span class="line"></span><br><span class="line">    if (ctx-&gt;value == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx-&gt;net = net;</span><br><span class="line"></span><br><span class="line">    return ngx_http_geo_add_range(cf, ctx, start, end);</span><br><span class="line"></span><br><span class="line">invalid:</span><br><span class="line"></span><br><span class="line">    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, &quot;invalid range \&quot;%V\&quot;&quot;, net);</span><br><span class="line"></span><br><span class="line">    return NGX_CONF_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>2.4 处理CIDR地址，调用ngx_http_geo_cidr函数实现，接下来看看这个函数的实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static char *</span><br><span class="line">ngx_http_geo_cidr(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,</span><br><span class="line">    ngx_str_t *value)</span><br><span class="line">&#123;</span><br><span class="line">    char        *rv;</span><br><span class="line">    ngx_int_t    rc, del;</span><br><span class="line">    ngx_str_t   *net;</span><br><span class="line">    ngx_cidr_t   cidr;</span><br><span class="line"></span><br><span class="line">    if (ctx-&gt;tree == NULL) &#123;</span><br><span class="line">        ctx-&gt;tree = ngx_radix_tree_create(ctx-&gt;pool, -1);</span><br><span class="line">        if (ctx-&gt;tree == NULL) &#123;</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#if (NGX_HAVE_INET6)</span><br><span class="line">    if (ctx-&gt;tree6 == NULL) &#123;</span><br><span class="line">        ctx-&gt;tree6 = ngx_radix_tree_create(ctx-&gt;pool, -1);</span><br><span class="line">        if (ctx-&gt;tree6 == NULL) &#123;</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    if (ngx_strcmp(value[0].data, &quot;default&quot;) == 0) &#123;</span><br><span class="line">        cidr.family = AF_INET;</span><br><span class="line">        cidr.u.in.addr = 0;</span><br><span class="line">        cidr.u.in.mask = 0;</span><br><span class="line"></span><br><span class="line">        rv = ngx_http_geo_cidr_add(cf, ctx, &amp;cidr, &amp;value[1], &amp;value[0]);</span><br><span class="line"></span><br><span class="line">        if (rv != NGX_CONF_OK) &#123;</span><br><span class="line">            return rv;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#if (NGX_HAVE_INET6)</span><br><span class="line">        cidr.family = AF_INET6;</span><br><span class="line">        ngx_memzero(&amp;cidr.u.in6, sizeof(ngx_in6_cidr_t));</span><br><span class="line"></span><br><span class="line">        rv = ngx_http_geo_cidr_add(cf, ctx, &amp;cidr, &amp;value[1], &amp;value[0]);</span><br><span class="line"></span><br><span class="line">        if (rv != NGX_CONF_OK) &#123;</span><br><span class="line">            return rv;</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">        return NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ngx_strcmp(value[0].data, &quot;delete&quot;) == 0) &#123;</span><br><span class="line">        net = &amp;value[1];</span><br><span class="line">        del = 1;</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        net = &amp;value[0];</span><br><span class="line">        del = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ngx_http_geo_cidr_value(cf, net, &amp;cidr) != NGX_OK) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (cidr.family == AF_INET) &#123;</span><br><span class="line">        cidr.u.in.addr = ntohl(cidr.u.in.addr);</span><br><span class="line">        cidr.u.in.mask = ntohl(cidr.u.in.mask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (del) &#123;</span><br><span class="line">        switch (cidr.family) &#123;</span><br><span class="line"></span><br><span class="line">#if (NGX_HAVE_INET6)</span><br><span class="line">        case AF_INET6:</span><br><span class="line">            rc = ngx_radix128tree_delete(ctx-&gt;tree6,</span><br><span class="line">                                         cidr.u.in6.addr.s6_addr,</span><br><span class="line">                                         cidr.u.in6.mask.s6_addr);</span><br><span class="line">            break;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">        default: /* AF_INET */</span><br><span class="line">            rc = ngx_radix32tree_delete(ctx-&gt;tree, cidr.u.in.addr,</span><br><span class="line">                                        cidr.u.in.mask);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (rc != NGX_OK) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_WARN, cf, 0,</span><br><span class="line">                               &quot;no network \&quot;%V\&quot; to delete&quot;, net);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return ngx_http_geo_cidr_add(cf, ctx, &amp;cidr, &amp;value[1], net);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>2.5 获取解析好的变量值，调用ngx_http_geo_range_variable函数实现，接下来看看这个函数的实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static ngx_int_t</span><br><span class="line">ngx_http_geo_range_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,</span><br><span class="line">    uintptr_t data)</span><br><span class="line">&#123;</span><br><span class="line">    ngx_http_geo_ctx_t *ctx = (ngx_http_geo_ctx_t *) data;</span><br><span class="line"></span><br><span class="line">    in_addr_t              inaddr;</span><br><span class="line">    ngx_addr_t             addr;</span><br><span class="line">    ngx_uint_t             n;</span><br><span class="line">    struct sockaddr_in    *sin;</span><br><span class="line">    ngx_http_geo_range_t  *range;</span><br><span class="line">#if (NGX_HAVE_INET6)</span><br><span class="line">    u_char                *p;</span><br><span class="line">    struct in6_addr       *inaddr6;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    *v = *ctx-&gt;u.high.default_value;</span><br><span class="line"></span><br><span class="line">    if (ngx_http_geo_addr(r, ctx, &amp;addr) == NGX_OK) &#123;</span><br><span class="line"></span><br><span class="line">        switch (addr.sockaddr-&gt;sa_family) &#123;</span><br><span class="line"></span><br><span class="line">#if (NGX_HAVE_INET6)</span><br><span class="line">        case AF_INET6:</span><br><span class="line">            inaddr6 = &amp;((struct sockaddr_in6 *) addr.sockaddr)-&gt;sin6_addr;</span><br><span class="line"></span><br><span class="line">            if (IN6_IS_ADDR_V4MAPPED(inaddr6)) &#123;</span><br><span class="line">                p = inaddr6-&gt;s6_addr;</span><br><span class="line"></span><br><span class="line">                inaddr = p[12] &lt;&lt; 24;</span><br><span class="line">                inaddr += p[13] &lt;&lt; 16;</span><br><span class="line">                inaddr += p[14] &lt;&lt; 8;</span><br><span class="line">                inaddr += p[15];</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                inaddr = INADDR_NONE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            break;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#if (NGX_HAVE_UNIX_DOMAIN)</span><br><span class="line">        case AF_UNIX:</span><br><span class="line">            inaddr = INADDR_NONE;</span><br><span class="line">            break;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">        default: /* AF_INET */</span><br><span class="line">            sin = (struct sockaddr_in *) addr.sockaddr;</span><br><span class="line">            inaddr = ntohl(sin-&gt;sin_addr.s_addr);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        inaddr = INADDR_NONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ctx-&gt;u.high.low) &#123;</span><br><span class="line">        range = ctx-&gt;u.high.low[inaddr &gt;&gt; 16];</span><br><span class="line"></span><br><span class="line">        if (range) &#123;</span><br><span class="line">            n = inaddr &amp; 0xffff;</span><br><span class="line">            do &#123;</span><br><span class="line">                if (n &gt;= (ngx_uint_t) range-&gt;start</span><br><span class="line">                    &amp;&amp; n &lt;= (ngx_uint_t) range-&gt;end)</span><br><span class="line">                &#123;</span><br><span class="line">                    *v = *range-&gt;value;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; while ((++range)-&gt;value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;log, 0,</span><br><span class="line">                   &quot;http geo: %v&quot;, v);</span><br><span class="line"></span><br><span class="line">    return NGX_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><blockquote><p>以上就是整个geo模块的核心，stream下的geo模块实现方式类似。s</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、相关配置&quot;&gt;&lt;a href=&quot;#1、相关配置&quot; class=&quot;headerlink&quot; title=&quot;1、相关配置&quot;&gt;&lt;/a&gt;1、相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的map模块</title>
    <link href="https://weeweetan.github.io/2019/10/12/Nginx%E7%9A%84map%E6%A8%A1%E5%9D%97/"/>
    <id>https://weeweetan.github.io/2019/10/12/Nginx的map模块/</id>
    <published>2019-10-12T01:25:27.000Z</published>
    <updated>2021-05-24T13:50:05.498Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1、相关配置"><a href="#1、相关配置" class="headerlink" title="1、相关配置"></a>1、相关配置</h2><blockquote><p>geo模块配置指令如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">map</span> $var1 $var2 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p></blockquote><p>详细用法参考<a href="http://nginx.org/en/docs/http/ngx_http_map_module.html#map" target="_blank" rel="noopener">nginx官方文档</a>,此模块的功能是将$var1通过{}中的匹配条件生成$var2的值，支持正则表达式。</p><h2 id="2、代码详解"><a href="#2、代码详解" class="headerlink" title="2、代码详解"></a>2、代码详解</h2><h3 id="2-1、首先来看看配置解析函数，负责解析map指令后的两个变量，并设置获取变量值的函数指针"><a href="#2-1、首先来看看配置解析函数，负责解析map指令后的两个变量，并设置获取变量值的函数指针" class="headerlink" title="2.1、首先来看看配置解析函数，负责解析map指令后的两个变量，并设置获取变量值的函数指针"></a>2.1、首先来看看配置解析函数，负责解析map指令后的两个变量，并设置获取变量值的函数指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_map_block(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_map_conf_t</span>  *mcf = conf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>                              *rv;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                         *value, name;</span><br><span class="line">    <span class="keyword">ngx_conf_t</span>                         save;</span><br><span class="line">    <span class="keyword">ngx_pool_t</span>                        *pool;</span><br><span class="line">    <span class="keyword">ngx_hash_init_t</span>                    hash;</span><br><span class="line">    <span class="keyword">ngx_http_map_ctx_t</span>                *<span class="built_in">map</span>;</span><br><span class="line">    <span class="keyword">ngx_http_variable_t</span>               *var;</span><br><span class="line">    <span class="keyword">ngx_http_map_conf_ctx_t</span>            ctx;</span><br><span class="line">    <span class="keyword">ngx_http_compile_complex_value_t</span>   ccv;</span><br><span class="line">    <span class="comment">//设置hash桶最大值</span></span><br><span class="line">    <span class="keyword">if</span> (mcf-&gt;hash_max_size == NGX_CONF_UNSET_UINT) &#123;</span><br><span class="line">        mcf-&gt;hash_max_size = <span class="number">2048</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mcf-&gt;hash_bucket_size == NGX_CONF_UNSET_UINT) &#123;</span><br><span class="line">        mcf-&gt;hash_bucket_size = ngx_cacheline_size;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mcf-&gt;hash_bucket_size = ngx_align(mcf-&gt;hash_bucket_size,</span><br><span class="line">                                          ngx_cacheline_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span> = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_map_ctx_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">map</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;ccv, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_compile_complex_value_t</span>));</span><br><span class="line"></span><br><span class="line">    ccv.cf = cf;</span><br><span class="line">    ccv.value = &amp;value[<span class="number">1</span>];</span><br><span class="line">    ccv.complex_value = &amp;<span class="built_in">map</span>-&gt;value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_compile_complex_value(&amp;ccv) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析第二个变量</span></span><br><span class="line">    name = value[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name.data[<span class="number">0</span>] != <span class="string">'$'</span>) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"invalid variable name \"%V\""</span>, &amp;name);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存$符号后面的字符串</span></span><br><span class="line">    name.len--;</span><br><span class="line">    name.data++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把变量名添加到全局变量中</span></span><br><span class="line">    var = ngx_http_add_variable(cf, &amp;name, NGX_HTTP_VAR_CHANGEABLE);</span><br><span class="line">    <span class="keyword">if</span> (var == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置获取此变量值的handler</span></span><br><span class="line">    var-&gt;get_handler = ngx_http_map_variable;</span><br><span class="line">    var-&gt;data = (<span class="keyword">uintptr_t</span>) <span class="built_in">map</span>;</span><br><span class="line"></span><br><span class="line">    pool = ngx_create_pool(NGX_DEFAULT_POOL_SIZE, cf-&gt;<span class="built_in">log</span>);</span><br><span class="line">    <span class="keyword">if</span> (pool == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.keys.pool = cf-&gt;pool;</span><br><span class="line">    ctx.keys.temp_pool = pool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_hash_keys_array_init(&amp;ctx.keys, NGX_HASH_LARGE) != NGX_OK) &#123;</span><br><span class="line">        ngx_destroy_pool(pool);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.values_hash = ngx_pcalloc(pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_array_t</span>) * ctx.keys.hsize);</span><br><span class="line">    <span class="keyword">if</span> (ctx.values_hash == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ngx_destroy_pool(pool);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化正则表达式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_PCRE)</span></span><br><span class="line">    <span class="keyword">if</span> (ngx_array_init(&amp;ctx.regexes, cf-&gt;pool, <span class="number">2</span>, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_map_regex_t</span>))</span><br><span class="line">        != NGX_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        ngx_destroy_pool(pool);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ctx.default_value = <span class="literal">NULL</span>;</span><br><span class="line">    ctx.cf = &amp;save;</span><br><span class="line">    ctx.hostnames = <span class="number">0</span>;</span><br><span class="line">    ctx.no_cacheable = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    save = *cf;</span><br><span class="line">    cf-&gt;pool = pool;</span><br><span class="line">    cf-&gt;ctx = &amp;ctx;</span><br><span class="line">    cf-&gt;handler = ngx_http_map;</span><br><span class="line">    cf-&gt;handler_conf = conf;</span><br><span class="line"></span><br><span class="line">    rv = ngx_conf_parse(cf, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    *cf = save;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rv != NGX_CONF_OK) &#123;</span><br><span class="line">        ngx_destroy_pool(pool);</span><br><span class="line">        <span class="keyword">return</span> rv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ctx.no_cacheable) &#123;</span><br><span class="line">        var-&gt;flags |= NGX_HTTP_VAR_NOCACHEABLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>-&gt;default_value = ctx.default_value ? ctx.default_value:</span><br><span class="line">                                             &amp;ngx_http_variable_null_value;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>-&gt;hostnames = ctx.hostnames;</span><br><span class="line"></span><br><span class="line">    hash.key = ngx_hash_key_lc;</span><br><span class="line">    hash.max_size = mcf-&gt;hash_max_size;</span><br><span class="line">    hash.bucket_size = mcf-&gt;hash_bucket_size;</span><br><span class="line">    hash.name = <span class="string">"map_hash"</span>;</span><br><span class="line">    hash.pool = cf-&gt;pool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ctx.keys.keys.nelts) &#123;</span><br><span class="line">        hash.hash = &amp;<span class="built_in">map</span>-&gt;<span class="built_in">map</span>.hash.hash;</span><br><span class="line">        hash.temp_pool = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_hash_init(&amp;hash, ctx.keys.keys.elts, ctx.keys.keys.nelts)</span><br><span class="line">            != NGX_OK)</span><br><span class="line">        &#123;</span><br><span class="line">            ngx_destroy_pool(pool);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ctx.keys.dns_wc_head.nelts) &#123;</span><br><span class="line"></span><br><span class="line">        ngx_qsort(ctx.keys.dns_wc_head.elts,</span><br><span class="line">                  (<span class="keyword">size_t</span>) ctx.keys.dns_wc_head.nelts,</span><br><span class="line">                  <span class="keyword">sizeof</span>(<span class="keyword">ngx_hash_key_t</span>), ngx_http_map_cmp_dns_wildcards);</span><br><span class="line"></span><br><span class="line">        hash.hash = <span class="literal">NULL</span>;</span><br><span class="line">        hash.temp_pool = pool;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_hash_wildcard_init(&amp;hash, ctx.keys.dns_wc_head.elts,</span><br><span class="line">                                   ctx.keys.dns_wc_head.nelts)</span><br><span class="line">            != NGX_OK)</span><br><span class="line">        &#123;</span><br><span class="line">            ngx_destroy_pool(pool);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">map</span>-&gt;<span class="built_in">map</span>.hash.wc_head = (<span class="keyword">ngx_hash_wildcard_t</span> *) hash.hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ctx.keys.dns_wc_tail.nelts) &#123;</span><br><span class="line"></span><br><span class="line">        ngx_qsort(ctx.keys.dns_wc_tail.elts,</span><br><span class="line">                  (<span class="keyword">size_t</span>) ctx.keys.dns_wc_tail.nelts,</span><br><span class="line">                  <span class="keyword">sizeof</span>(<span class="keyword">ngx_hash_key_t</span>), ngx_http_map_cmp_dns_wildcards);</span><br><span class="line"></span><br><span class="line">        hash.hash = <span class="literal">NULL</span>;</span><br><span class="line">        hash.temp_pool = pool;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_hash_wildcard_init(&amp;hash, ctx.keys.dns_wc_tail.elts,</span><br><span class="line">                                   ctx.keys.dns_wc_tail.nelts)</span><br><span class="line">            != NGX_OK)</span><br><span class="line">        &#123;</span><br><span class="line">            ngx_destroy_pool(pool);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">map</span>-&gt;<span class="built_in">map</span>.hash.wc_tail = (<span class="keyword">ngx_hash_wildcard_t</span> *) hash.hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_PCRE)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ctx.regexes.nelts) &#123;</span><br><span class="line">        <span class="built_in">map</span>-&gt;<span class="built_in">map</span>.regex = ctx.regexes.elts;</span><br><span class="line">        <span class="built_in">map</span>-&gt;<span class="built_in">map</span>.nregex = ctx.regexes.nelts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ngx_destroy_pool(pool);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2、解析map块中的内容"><a href="#2-2、解析map块中的内容" class="headerlink" title="2.2、解析map块中的内容"></a>2.2、解析map块中的内容</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_map(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *dummy, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    u_char                            *data;</span><br><span class="line">    <span class="keyword">size_t</span>                             len;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                          rv;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                         *value, v;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                         i, key;</span><br><span class="line">    <span class="keyword">ngx_http_map_conf_ctx_t</span>           *ctx;</span><br><span class="line">    <span class="keyword">ngx_http_complex_value_t</span>           cv, *cvp;</span><br><span class="line">    <span class="keyword">ngx_http_variable_value_t</span>         *var, **vp;</span><br><span class="line">    <span class="keyword">ngx_http_compile_complex_value_t</span>   ccv;</span><br><span class="line"></span><br><span class="line">    ctx = cf-&gt;ctx;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cf-&gt;args-&gt;nelts == <span class="number">1</span></span><br><span class="line">        &amp;&amp; ngx_strcmp(value[<span class="number">0</span>].data, <span class="string">"hostnames"</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ctx-&gt;hostnames = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cf-&gt;args-&gt;nelts == <span class="number">1</span></span><br><span class="line">        &amp;&amp; ngx_strcmp(value[<span class="number">0</span>].data, <span class="string">"volatile"</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ctx-&gt;no_cacheable = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cf-&gt;args-&gt;nelts != <span class="number">2</span>) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"invalid number of the map parameters"</span>);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">0</span>].data, <span class="string">"include"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ngx_conf_include(cf, dummy, conf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    key = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; value[<span class="number">1</span>].len; i++) &#123;</span><br><span class="line">        key = ngx_hash(key, value[<span class="number">1</span>].data[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    key %= ctx-&gt;keys.hsize;</span><br><span class="line"></span><br><span class="line">    vp = ctx-&gt;values_hash[key].elts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vp) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ctx-&gt;values_hash[key].nelts; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (vp[i]-&gt;valid) &#123;</span><br><span class="line">                data = vp[i]-&gt;data;</span><br><span class="line">                len = vp[i]-&gt;len;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cvp = (<span class="keyword">ngx_http_complex_value_t</span> *) vp[i]-&gt;data;</span><br><span class="line">                data = cvp-&gt;value.data;</span><br><span class="line">                len = cvp-&gt;value.len;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (value[<span class="number">1</span>].len != len) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_strncmp(value[<span class="number">1</span>].data, data, len) == <span class="number">0</span>) &#123;</span><br><span class="line">                var = vp[i];</span><br><span class="line">                <span class="keyword">goto</span> found;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ngx_array_init(&amp;ctx-&gt;values_hash[key], cf-&gt;pool, <span class="number">4</span>,</span><br><span class="line">                           <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_variable_value_t</span> *))</span><br><span class="line">            != NGX_OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var = ngx_palloc(ctx-&gt;keys.pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_variable_value_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (var == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v.len = value[<span class="number">1</span>].len;</span><br><span class="line">    v.data = ngx_pstrdup(ctx-&gt;keys.pool, &amp;value[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (v.data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;ccv, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_compile_complex_value_t</span>));</span><br><span class="line"></span><br><span class="line">    ccv.cf = ctx-&gt;cf;</span><br><span class="line">    ccv.value = &amp;v;</span><br><span class="line">    ccv.complex_value = &amp;cv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_compile_complex_value(&amp;ccv) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cv.lengths != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cvp = ngx_palloc(ctx-&gt;keys.pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_complex_value_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (cvp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        *cvp = cv;</span><br><span class="line"></span><br><span class="line">        var-&gt;len = <span class="number">0</span>;</span><br><span class="line">        var-&gt;data = (u_char *) cvp;</span><br><span class="line">        var-&gt;valid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        var-&gt;len = v.len;</span><br><span class="line">        var-&gt;data = v.data;</span><br><span class="line">        var-&gt;valid = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var-&gt;no_cacheable = <span class="number">0</span>;</span><br><span class="line">    var-&gt;not_found = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    vp = ngx_array_push(&amp;ctx-&gt;values_hash[key]);</span><br><span class="line">    <span class="keyword">if</span> (vp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *vp = var;</span><br><span class="line"></span><br><span class="line">found:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">0</span>].data, <span class="string">"default"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ctx-&gt;default_value) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"duplicate default map parameter"</span>);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx-&gt;default_value = var;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_PCRE)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value[<span class="number">0</span>].len &amp;&amp; value[<span class="number">0</span>].data[<span class="number">0</span>] == <span class="string">'~'</span>) &#123;</span><br><span class="line">        <span class="keyword">ngx_regex_compile_t</span>    rc;</span><br><span class="line">        <span class="keyword">ngx_http_map_regex_t</span>  *regex;</span><br><span class="line">        u_char                 errstr[NGX_MAX_CONF_ERRSTR];</span><br><span class="line"></span><br><span class="line">        regex = ngx_array_push(&amp;ctx-&gt;regexes);</span><br><span class="line">        <span class="keyword">if</span> (regex == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        value[<span class="number">0</span>].len--;</span><br><span class="line">        value[<span class="number">0</span>].data++;</span><br><span class="line"></span><br><span class="line">        ngx_memzero(&amp;rc, <span class="keyword">sizeof</span>(<span class="keyword">ngx_regex_compile_t</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value[<span class="number">0</span>].data[<span class="number">0</span>] == <span class="string">'*'</span>) &#123;</span><br><span class="line">            value[<span class="number">0</span>].len--;</span><br><span class="line">            value[<span class="number">0</span>].data++;</span><br><span class="line">            rc.options = NGX_REGEX_CASELESS;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rc.pattern = value[<span class="number">0</span>];</span><br><span class="line">        rc.err.len = NGX_MAX_CONF_ERRSTR;</span><br><span class="line">        rc.err.data = errstr;</span><br><span class="line"></span><br><span class="line">        regex-&gt;regex = ngx_http_regex_compile(ctx-&gt;cf, &amp;rc);</span><br><span class="line">        <span class="keyword">if</span> (regex-&gt;regex == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        regex-&gt;value = var;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value[<span class="number">0</span>].len &amp;&amp; value[<span class="number">0</span>].data[<span class="number">0</span>] == <span class="string">'\\'</span>) &#123;</span><br><span class="line">        value[<span class="number">0</span>].len--;</span><br><span class="line">        value[<span class="number">0</span>].data++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rv = ngx_hash_add_key(&amp;ctx-&gt;keys, &amp;value[<span class="number">0</span>], var,</span><br><span class="line">                          (ctx-&gt;hostnames) ? NGX_HASH_WILDCARD_KEY : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rv == NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rv == NGX_DECLINED) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"invalid hostname or wildcard \"%V\""</span>, &amp;value[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rv == NGX_BUSY) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"conflicting parameter \"%V\""</span>, &amp;value[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><blockquote><p>map模块生成的变量遵循nginx的变量规则，获取变量值的方式也与nginx其他变量类似</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、相关配置&quot;&gt;&lt;a href=&quot;#1、相关配置&quot; class=&quot;headerlink&quot; title=&quot;1、相关配置&quot;&gt;&lt;/a&gt;1、相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx变量详解</title>
    <link href="https://weeweetan.github.io/2019/10/12/Nginx%E5%8F%98%E9%87%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2019/10/12/Nginx变量详解/</id>
    <published>2019-10-12T01:19:08.000Z</published>
    <updated>2020-02-03T09:29:04.682Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1、源码解析"><a href="#1、源码解析" class="headerlink" title="1、源码解析"></a>1、源码解析</h2><h3 id="1-1-变量分类"><a href="#1-1-变量分类" class="headerlink" title="1.1 变量分类"></a>1.1 变量分类</h3><blockquote><p>nginx变量分为两种，一种是nginx内置变量，可以通过<a href="http://nginx.org/en/docs/varindex.html" target="_blank" rel="noopener">官方网站</a>查询到的含义，另外一种则是在nginx配置文件中通过set指令设置的变量，首先来看一下nginx的内置变量实现方式。</p></blockquote><h4 id="1-1-1-nginx内置变量"><a href="#1-1-1-nginx内置变量" class="headerlink" title="1.1.1 nginx内置变量"></a>1.1.1 nginx内置变量</h4><blockquote><p>首先看看定义内置变量的结构体<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_variable_s</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_str_t</span>                     name;   <span class="comment">/* must be first to build the hash */</span></span><br><span class="line">    ngx_http_set_variable_pt      set_handler;</span><br><span class="line">    ngx_http_get_variable_pt      get_handler;</span><br><span class="line">    <span class="keyword">uintptr_t</span>                     data;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                    flags;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                    index;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>上面这个结构体中，name代表变量名称，比如$request_uri,$args等，set_handler暂时没有使用到，get_handler获取变量值，data一般表示为变量值来自于这里，flags表示此变量遵循的一些规则，比如NGX_HTTP_VAR_CHANGEABLE，index表示此变量在整个nginx变量系统中的索引。<p></p></blockquote><blockquote><p>接下来就是将变量添加到nginx的变量系统中了，这里以http模块的核心变量为例进行说明。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ngx_http_variable_t</span> *</span><br><span class="line">ngx_http_add_variable(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_str_t</span> *name, <span class="keyword">ngx_uint_t</span> flags)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                   rc;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                  i;</span><br><span class="line">    <span class="keyword">ngx_hash_key_t</span>             *key;</span><br><span class="line">    <span class="keyword">ngx_http_variable_t</span>        *v;</span><br><span class="line">    <span class="keyword">ngx_http_core_main_conf_t</span>  *cmcf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name-&gt;len == <span class="number">0</span>) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"invalid variable name \"$\""</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; NGX_HTTP_VAR_PREFIX) &#123;</span><br><span class="line">        <span class="keyword">return</span> ngx_http_add_prefix_variable(cf, name, flags);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);</span><br><span class="line"></span><br><span class="line">    key = cmcf-&gt;variables_keys-&gt;keys.elts;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cmcf-&gt;variables_keys-&gt;keys.nelts; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name-&gt;len != key[i].key.len</span><br><span class="line">            || ngx_strncasecmp(name-&gt;data, key[i].key.data, name-&gt;len) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        v = key[i].value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(v-&gt;flags &amp; NGX_HTTP_VAR_CHANGEABLE)) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"the duplicate \"%V\" variable"</span>, name);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(flags &amp; NGX_HTTP_VAR_WEAK)) &#123;</span><br><span class="line">            v-&gt;flags &amp;= ~NGX_HTTP_VAR_WEAK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v = ngx_palloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_variable_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v-&gt;name.len = name-&gt;len;</span><br><span class="line">    v-&gt;name.data = ngx_pnalloc(cf-&gt;pool, name-&gt;len);</span><br><span class="line">    <span class="keyword">if</span> (v-&gt;name.data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_strlow(v-&gt;name.data, name-&gt;data, name-&gt;len);</span><br><span class="line"></span><br><span class="line">    v-&gt;set_handler = <span class="literal">NULL</span>;</span><br><span class="line">    v-&gt;get_handler = <span class="literal">NULL</span>;</span><br><span class="line">    v-&gt;data = <span class="number">0</span>;</span><br><span class="line">    v-&gt;flags = flags;</span><br><span class="line">    v-&gt;index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rc = ngx_hash_add_key(cmcf-&gt;variables_keys, &amp;v-&gt;name, v, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_BUSY) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"conflicting variable name \"%V\""</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p></blockquote><blockquote><p>这个函数的作用就是将定义的变量添加到http核心配置中，为获取变量的值做好准备，其他变量类似。接下来就是如何获取变量值了，http的日志模块提供了一个很好的范本。</p></blockquote><h3 id="1-1-2-配置文件变量"><a href="#1-1-2-配置文件变量" class="headerlink" title="1.1.2 配置文件变量"></a>1.1.2 配置文件变量</h3><blockquote><p>配置文件变量是指set指令设置的变量，<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> $a value;</span><br></pre></td></tr></table></figure><p></p></blockquote><p>具体可以参考<a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#set" target="_blank" rel="noopener">set</a>，</p><blockquote><p>首先来看看set指令解析函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_rewrite_set(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span>  *lcf = conf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_int_t</span>                            index;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                           *value;</span><br><span class="line">    <span class="keyword">ngx_http_variable_t</span>                 *v;</span><br><span class="line">    <span class="keyword">ngx_http_script_var_code_t</span>          *vcode;</span><br><span class="line">    <span class="keyword">ngx_http_script_var_handler_code_t</span>  *vhcode;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value[<span class="number">1</span>].data[<span class="number">0</span>] != <span class="string">'$'</span>) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"invalid variable name \"%V\""</span>, &amp;value[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value[<span class="number">1</span>].len--;</span><br><span class="line">    value[<span class="number">1</span>].data++;</span><br><span class="line"></span><br><span class="line">    v = ngx_http_add_variable(cf, &amp;value[<span class="number">1</span>],</span><br><span class="line">                              NGX_HTTP_VAR_CHANGEABLE|NGX_HTTP_VAR_WEAK);</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    index = ngx_http_get_variable_index(cf, &amp;value[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (index == NGX_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v-&gt;get_handler == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        v-&gt;get_handler = ngx_http_rewrite_var;</span><br><span class="line">        v-&gt;data = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_rewrite_value(cf, lcf, &amp;value[<span class="number">2</span>]) != NGX_CONF_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v-&gt;set_handler) &#123;</span><br><span class="line">        vhcode = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes,</span><br><span class="line">                                   <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_var_handler_code_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (vhcode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vhcode-&gt;code = ngx_http_script_var_set_handler_code;</span><br><span class="line">        vhcode-&gt;handler = v-&gt;set_handler;</span><br><span class="line">        vhcode-&gt;data = v-&gt;data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vcode = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes,</span><br><span class="line">                                       <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_var_code_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (vcode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vcode-&gt;code = ngx_http_script_set_var_code;</span><br><span class="line">    vcode-&gt;index = (<span class="keyword">uintptr_t</span>) index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p></blockquote><blockquote><p>这个函数首先解析出第一个变量的名字，并将其加入到nginx的变量系统中，其次解析作为第一个值的变量(第二个变量)，但是第二个变量可能是一个普通的字符串也有可能是多个变量组成的字符串，都是在ngx_http_rewrite_value函数中进行处理，接下来看看ngx_http_rewrite_value函数实现。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_rewrite_value(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_http_rewrite_loc_conf_t</span> *lcf,</span><br><span class="line">    <span class="keyword">ngx_str_t</span> *value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                              n;</span><br><span class="line">    <span class="keyword">ngx_http_script_compile_t</span>              sc;</span><br><span class="line">    <span class="keyword">ngx_http_script_value_code_t</span>          *val;</span><br><span class="line">    <span class="keyword">ngx_http_script_complex_value_code_t</span>  *<span class="keyword">complex</span>;</span><br><span class="line"></span><br><span class="line">    n = ngx_http_script_variables_count(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        val = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes,</span><br><span class="line">                                         <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_value_code_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n = ngx_atoi(value-&gt;data, value-&gt;len);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == NGX_ERROR) &#123;</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        val-&gt;code = ngx_http_script_value_code;</span><br><span class="line">        val-&gt;value = (<span class="keyword">uintptr_t</span>) n;</span><br><span class="line">        val-&gt;text_len = (<span class="keyword">uintptr_t</span>) value-&gt;len;</span><br><span class="line">        val-&gt;text_data = (<span class="keyword">uintptr_t</span>) value-&gt;data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//带有$的变量，value也是变量，如set $aa $bb，这里的$bb就是变量，</span></span><br><span class="line">    <span class="keyword">complex</span> = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes,</span><br><span class="line">                                 <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_complex_value_code_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">complex</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">complex</span>-&gt;code = ngx_http_script_complex_value_code;</span><br><span class="line">    <span class="keyword">complex</span>-&gt;lengths = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;sc, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_compile_t</span>));</span><br><span class="line"></span><br><span class="line">    sc.cf = cf;</span><br><span class="line">    sc.source = value;</span><br><span class="line">    sc.lengths = &amp;<span class="keyword">complex</span>-&gt;lengths;</span><br><span class="line">    sc.values = &amp;lcf-&gt;codes;</span><br><span class="line">    sc.variables = n;</span><br><span class="line">    sc.complete_lengths = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_script_compile(&amp;sc) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这个函数中，n为0表示value不包含变量，为纯字符串，否则表示value中包含变量，采用复杂变量解析方式。</p></blockquote><h2 id="2、总结"><a href="#2、总结" class="headerlink" title="2、总结"></a>2、总结</h2><blockquote><p>以上就是Nginx变量的相关解释，Nginx变量在nginx.conf配置文件中有着至关重要的作用，可定制性强。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、源码解析&quot;&gt;&lt;a href=&quot;#1、源码解析&quot; class=&quot;headerlink&quot; title=&quot;1、源码解析&quot;&gt;&lt;/a&gt;1、源
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的轮询算法</title>
    <link href="https://weeweetan.github.io/2019/09/15/Nginx%E7%9A%84%E8%BD%AE%E8%AF%A2%E7%AE%97%E6%B3%95/"/>
    <id>https://weeweetan.github.io/2019/09/15/Nginx的轮询算法/</id>
    <published>2019-09-15T10:27:13.000Z</published>
    <updated>2021-09-19T11:41:50.726Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><blockquote><p>Nginx轮询算法应用于http模块和stream模块的upstream块，根据权重选择相应的服务器进行负载均衡。</p></blockquote><h3 id="1-1、相关配置"><a href="#1-1、相关配置" class="headerlink" title="1.1、相关配置"></a>1.1、相关配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span> weight=<span class="number">10</span>;</span><br><span class="line">        server <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>:<span class="number">8080</span> weight=<span class="number">10</span>;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;若upstream块中没有指定负载均衡算法，则默认使用轮询算法。</span><br></pre></td></tr></table></figure><h2 id="2、算法实现"><a href="#2、算法实现" class="headerlink" title="2、算法实现"></a>2、算法实现</h2><blockquote><p>Nginx中http_upstream_module跟stream_upstream_module模块都使用了轮询算法，这里以stream_upstrean模块为例</p></blockquote><h3 id="2-1、相关结构体"><a href="#2-1、相关结构体" class="headerlink" title="2.1、相关结构体"></a>2.1、相关结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peers_t</span>  *peers;</span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peer_t</span>   *current;</span><br><span class="line">    <span class="keyword">uintptr_t</span>                       *tried;                  <span class="comment">//若后端服务器数量大于32，则使用此字段表示各个服务器是否使用</span></span><br><span class="line">    <span class="keyword">uintptr_t</span>                        data;                   <span class="comment">//若后端服务器数量小于32，则使用此字段表示各个服务器是否使用</span></span><br><span class="line">&#125; <span class="keyword">ngx_stream_upstream_rr_peer_data_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_stream_upstream_rr_peer_s</span>   <span class="title">ngx_stream_upstream_rr_peer_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_stream_upstream_rr_peer_s</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>                 *<span class="title">sockaddr</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span>                        socklen;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                        name;                      <span class="comment">//服务器名称，一般是ip地址</span></span><br><span class="line">    <span class="keyword">ngx_str_t</span>                        server;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_int_t</span>                        current_weight;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                        effective_weight;           <span class="comment">//RR算法权重，初始值与weight相同</span></span><br><span class="line">    <span class="keyword">ngx_int_t</span>                        weight;                     <span class="comment">//配置的权重</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       conns;                      <span class="comment">//该后端peer上面的成功连接数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       fails;                      <span class="comment">//已尝试失败次数</span></span><br><span class="line">    <span class="keyword">time_t</span>                           accessed;</span><br><span class="line">    <span class="keyword">time_t</span>                           checked;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       max_fails;                 <span class="comment">//配置的max_fails阈值</span></span><br><span class="line">    <span class="keyword">time_t</span>                           fail_timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       down;         <span class="comment">/* unsigned  down:1; */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_STREAM_SSL)</span></span><br><span class="line">    <span class="keyword">void</span>                            *ssl_session;</span><br><span class="line">    <span class="keyword">int</span>                              ssl_session_len;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peer_t</span>   *next;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_STREAM_UPSTREAM_ZONE)</span></span><br><span class="line">    <span class="keyword">ngx_atomic_t</span>                     lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_stream_upstream_rr_peers_s</span>  <span class="title">ngx_stream_upstream_rr_peers_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_stream_upstream_rr_peers_s</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       number;           <span class="comment">//服务器数量  为后端配置了多少个服务器  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_STREAM_UPSTREAM_ZONE)</span></span><br><span class="line">    <span class="keyword">ngx_slab_pool_t</span>                 *shpool;</span><br><span class="line">    <span class="keyword">ngx_atomic_t</span>                     rwlock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       total_weight;        <span class="comment">//所有服务器的权重和</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span>                         single:<span class="number">1</span>;           <span class="comment">//是否只有一个服务器</span></span><br><span class="line">    <span class="keyword">unsigned</span>                         weighted:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_str_t</span>                       *name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peers_t</span>  *next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peer_t</span>   *peer;   <span class="comment">//服务器信息 //所有的peer[]服务器信息通过peers-&gt;peer连接在一起</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上述3个结构体是整个轮询算法的核心，ngx_stream_upstream_rr_peer_data_t结构体保存已经选择过的服务器以及当前选择的服务器，ngx_stream_upstream_rr_peers_t结构体中几个weight成员用来选择服务器。</p></blockquote><h3 id="2-1-初始化ngx-stream-upstream-rr-peer-t结构体"><a href="#2-1-初始化ngx-stream-upstream-rr-peer-t结构体" class="headerlink" title="2.1 初始化ngx_stream_upstream_rr_peer_t结构体"></a>2.1 初始化ngx_stream_upstream_rr_peer_t结构体</h3><blockquote><p>Nginx在解析配置文件时，当解析到upstream块时，会调用ngx_stream_upstream_init_round_robin函数，将配置文件中的server保存在ngx_stream_upstream_rr_peer_t结构体中。接下来看看ngx_stream_upstream_init_round_robin函数定义</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_stream_upstream_init_round_robin(<span class="keyword">ngx_conf_t</span> *cf,</span><br><span class="line">    <span class="keyword">ngx_stream_upstream_srv_conf_t</span> *us)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_url_t</span>                        u;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       i, j, n, w;</span><br><span class="line">    <span class="keyword">ngx_stream_upstream_server_t</span>    *server;</span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peer_t</span>   *peer, **peerp;</span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peers_t</span>  *peers, *backup;<span class="comment">//一个是正常的servers，一个是backup servers</span></span><br><span class="line"></span><br><span class="line">    us-&gt;peer.init = ngx_stream_upstream_init_round_robin_peer;<span class="comment">//upstream中服务器节点的初始化赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (us-&gt;servers) &#123;</span><br><span class="line">        server = us-&gt;servers-&gt;elts;</span><br><span class="line"></span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        w = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; us-&gt;servers-&gt;nelts; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (server[i].backup) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            n += server[i].naddrs;</span><br><span class="line">            w += server[i].naddrs * server[i].weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_EMERG, cf-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                          <span class="string">"no servers in upstream \"%V\" in %s:%ui"</span>,</span><br><span class="line">                          &amp;us-&gt;host, us-&gt;file_name, us-&gt;line);</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peers = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_upstream_rr_peers_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (peers == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peer = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_upstream_rr_peer_t</span>) * n);</span><br><span class="line">        <span class="keyword">if</span> (peer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peers-&gt;single = (n == <span class="number">1</span>);</span><br><span class="line">        peers-&gt;number = n;</span><br><span class="line">        peers-&gt;weighted = (w != n);</span><br><span class="line">        peers-&gt;total_weight = w;</span><br><span class="line">        peers-&gt;name = &amp;us-&gt;host;</span><br><span class="line"></span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        peerp = &amp;peers-&gt;peer;</span><br><span class="line">        <span class="comment">//初始化peer数据</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; us-&gt;servers-&gt;nelts; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (server[i].backup) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server[i].naddrs; j++) &#123;</span><br><span class="line">                peer[n].sockaddr = server[i].addrs[j].sockaddr;</span><br><span class="line">                peer[n].socklen = server[i].addrs[j].socklen;</span><br><span class="line">                peer[n].name = server[i].addrs[j].name;</span><br><span class="line">                peer[n].weight = server[i].weight;</span><br><span class="line">                peer[n].effective_weight = server[i].weight;</span><br><span class="line">                peer[n].current_weight = <span class="number">0</span>;</span><br><span class="line">                peer[n].max_fails = server[i].max_fails;</span><br><span class="line">                peer[n].fail_timeout = server[i].fail_timeout;</span><br><span class="line">                peer[n].down = server[i].down;</span><br><span class="line">                peer[n].server = server[i].name;</span><br><span class="line"></span><br><span class="line">                *peerp = &amp;peer[n];</span><br><span class="line">                peerp = &amp;peer[n].next;</span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        us-&gt;peer.data = peers;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* backup servers */</span></span><br><span class="line"></span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        w = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; us-&gt;servers-&gt;nelts; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!server[i].backup) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            n += server[i].naddrs;</span><br><span class="line">            w += server[i].naddrs * server[i].weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        backup = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_upstream_rr_peers_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (backup == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peer = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_upstream_rr_peer_t</span>) * n);</span><br><span class="line">        <span class="keyword">if</span> (peer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peers-&gt;single = <span class="number">0</span>;</span><br><span class="line">        backup-&gt;single = <span class="number">0</span>;</span><br><span class="line">        backup-&gt;number = n;</span><br><span class="line">        backup-&gt;weighted = (w != n);</span><br><span class="line">        backup-&gt;total_weight = w;</span><br><span class="line">        backup-&gt;name = &amp;us-&gt;host;</span><br><span class="line"></span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        peerp = &amp;backup-&gt;peer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; us-&gt;servers-&gt;nelts; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!server[i].backup) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server[i].naddrs; j++) &#123;</span><br><span class="line">                peer[n].sockaddr = server[i].addrs[j].sockaddr;</span><br><span class="line">                peer[n].socklen = server[i].addrs[j].socklen;</span><br><span class="line">                peer[n].name = server[i].addrs[j].name;</span><br><span class="line">                peer[n].weight = server[i].weight;</span><br><span class="line">                peer[n].effective_weight = server[i].weight;</span><br><span class="line">                peer[n].current_weight = <span class="number">0</span>;</span><br><span class="line">                peer[n].max_fails = server[i].max_fails;</span><br><span class="line">                peer[n].fail_timeout = server[i].fail_timeout;</span><br><span class="line">                peer[n].down = server[i].down;</span><br><span class="line">                peer[n].server = server[i].name;</span><br><span class="line"></span><br><span class="line">                *peerp = &amp;peer[n];</span><br><span class="line">                peerp = &amp;peer[n].next;</span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peers-&gt;next = backup;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NGX_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* an upstream implicitly defined by proxy_pass, etc. */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (us-&gt;port == <span class="number">0</span>) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_EMERG, cf-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"no port in upstream \"%V\" in %s:%ui"</span>,</span><br><span class="line">                      &amp;us-&gt;host, us-&gt;file_name, us-&gt;line);</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;u, <span class="keyword">sizeof</span>(<span class="keyword">ngx_url_t</span>));</span><br><span class="line"></span><br><span class="line">    u.host = us-&gt;host;</span><br><span class="line">    u.port = us-&gt;port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_inet_resolve_host(cf-&gt;pool, &amp;u) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u.err) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_EMERG, cf-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                          <span class="string">"%s in upstream \"%V\" in %s:%ui"</span>,</span><br><span class="line">                          u.err, &amp;us-&gt;host, us-&gt;file_name, us-&gt;line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = u.naddrs;</span><br><span class="line"></span><br><span class="line">    peers = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_upstream_rr_peers_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (peers == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    peer = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_upstream_rr_peer_t</span>) * n);</span><br><span class="line">    <span class="keyword">if</span> (peer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    peers-&gt;single = (n == <span class="number">1</span>);</span><br><span class="line">    peers-&gt;number = n;</span><br><span class="line">    peers-&gt;weighted = <span class="number">0</span>;</span><br><span class="line">    peers-&gt;total_weight = n;</span><br><span class="line">    peers-&gt;name = &amp;us-&gt;host;</span><br><span class="line"></span><br><span class="line">    peerp = &amp;peers-&gt;peer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; u.naddrs; i++) &#123;</span><br><span class="line">        peer[i].sockaddr = u.addrs[i].sockaddr;</span><br><span class="line">        peer[i].socklen = u.addrs[i].socklen;</span><br><span class="line">        peer[i].name = u.addrs[i].name;</span><br><span class="line">        peer[i].weight = <span class="number">1</span>;</span><br><span class="line">        peer[i].effective_weight = <span class="number">1</span>;</span><br><span class="line">        peer[i].current_weight = <span class="number">0</span>;</span><br><span class="line">        peer[i].max_fails = <span class="number">1</span>;</span><br><span class="line">        peer[i].fail_timeout = <span class="number">10</span>;</span><br><span class="line">        *peerp = &amp;peer[i];</span><br><span class="line">        peerp = &amp;peer[i].next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    us-&gt;peer.data = peers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* implicitly defined upstream has no backup servers */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol><li>如果没有指定其他负载均衡算法，则此函数在配置解析阶段执行，由ngx_stream_upstream_init_main_conf函数调用执行。</li><li>将配置中的后端服务器使用peer连接起来，对backup服务器采取同样的操作。</li></ol></blockquote><h3 id="2-2-获取一个选中的server"><a href="#2-2-获取一个选中的server" class="headerlink" title="2.2 获取一个选中的server"></a>2.2 获取一个选中的server</h3><blockquote><p>选择一个上游peer，主要由ngx_http_upstream_get_round_robin_peer实现<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_upstream_get_round_robin_peer(<span class="keyword">ngx_peer_connection_t</span> *pc, <span class="keyword">void</span> *data)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_rr_peer_data_t</span>  *rrp = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_int_t</span>                      rc;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                     i, n;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_rr_peer_t</span>   *peer;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_rr_peers_t</span>  *peers;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"get rr peer, try: %ui"</span>, pc-&gt;tries);</span><br><span class="line"></span><br><span class="line">    pc-&gt;cached = <span class="number">0</span>;</span><br><span class="line">    pc-&gt;connection = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    peers = rrp-&gt;peers;</span><br><span class="line">    <span class="comment">//如果启用了zone，则加锁</span></span><br><span class="line">    ngx_http_upstream_rr_peers_wlock(peers);</span><br><span class="line">    <span class="comment">//只配置了一个server，则直接使用</span></span><br><span class="line">    <span class="keyword">if</span> (peers-&gt;single) &#123;</span><br><span class="line">        peer = peers-&gt;peer;</span><br><span class="line">        <span class="comment">//单个server被标记为down，不可用</span></span><br><span class="line">        <span class="keyword">if</span> (peer-&gt;down) &#123;</span><br><span class="line">            <span class="keyword">goto</span> failed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (peer-&gt;max_conns &amp;&amp; peer-&gt;conns &gt;= peer-&gt;max_conns) &#123;</span><br><span class="line">            <span class="keyword">goto</span> failed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rrp-&gt;current = peer;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* there are several peers */</span></span><br><span class="line">        <span class="comment">// 调用选择peer的函数。</span></span><br><span class="line">        peer = ngx_http_upstream_get_peer(rrp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (peer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">goto</span> failed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, pc-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                       <span class="string">"get rr peer, current: %p %i"</span>,</span><br><span class="line">                       peer, peer-&gt;current_weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值socket数据</span></span><br><span class="line">    pc-&gt;sockaddr = peer-&gt;sockaddr;</span><br><span class="line">    pc-&gt;socklen = peer-&gt;socklen;</span><br><span class="line">    pc-&gt;name = &amp;peer-&gt;name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此peer上的连接数自增</span></span><br><span class="line">    peer-&gt;conns++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解锁</span></span><br><span class="line">    ngx_http_upstream_rr_peers_unlock(peers);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line">failed:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (peers-&gt;next) &#123;</span><br><span class="line"></span><br><span class="line">        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, pc-&gt;<span class="built_in">log</span>, <span class="number">0</span>, <span class="string">"backup servers"</span>);</span><br><span class="line"></span><br><span class="line">        rrp-&gt;peers = peers-&gt;next;</span><br><span class="line"></span><br><span class="line">        n = (rrp-&gt;peers-&gt;number + (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>) - <span class="number">1</span>))</span><br><span class="line">                / (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            rrp-&gt;tried[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_http_upstream_rr_peers_unlock(peers);</span><br><span class="line"></span><br><span class="line">        rc = ngx_http_upstream_get_round_robin_peer(pc, rrp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc != NGX_BUSY) &#123;</span><br><span class="line">            <span class="keyword">return</span> rc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_http_upstream_rr_peers_wlock(peers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_http_upstream_rr_peers_unlock(peers);</span><br><span class="line"></span><br><span class="line">    pc-&gt;name = peers-&gt;name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_BUSY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//轮询的核心算法</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_http_upstream_rr_peer_t</span> *</span><br><span class="line">ngx_http_upstream_get_peer(<span class="keyword">ngx_http_upstream_rr_peer_data_t</span> *rrp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">time_t</span>                        now;</span><br><span class="line">    <span class="keyword">uintptr_t</span>                     m;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                     total;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                    i, n, p;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_rr_peer_t</span>  *peer, *best;</span><br><span class="line"></span><br><span class="line">    now = ngx_time();</span><br><span class="line"></span><br><span class="line">    best = <span class="literal">NULL</span>;</span><br><span class="line">    total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_SUPPRESS_WARN)</span></span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (peer = rrp-&gt;peers-&gt;peer, i = <span class="number">0</span>;</span><br><span class="line">         peer;</span><br><span class="line">         peer = peer-&gt;next, i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//查找已选择过的peer</span></span><br><span class="line">        n = i / (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>));</span><br><span class="line">        m = (<span class="keyword">uintptr_t</span>) <span class="number">1</span> &lt;&lt; i % (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>));</span><br><span class="line">        <span class="comment">//已选择过，跳过</span></span><br><span class="line">        <span class="keyword">if</span> (rrp-&gt;tried[n] &amp; m) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//被标记为不可用，跳过</span></span><br><span class="line">        <span class="keyword">if</span> (peer-&gt;down) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//失败次数超过阈值，跳过</span></span><br><span class="line">        <span class="keyword">if</span> (peer-&gt;max_fails</span><br><span class="line">            &amp;&amp; peer-&gt;fails &gt;= peer-&gt;max_fails</span><br><span class="line">            &amp;&amp; now - peer-&gt;checked &lt;= peer-&gt;fail_timeout)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最大连接数超过配置，跳过</span></span><br><span class="line">        <span class="keyword">if</span> (peer-&gt;max_conns &amp;&amp; peer-&gt;conns &gt;= peer-&gt;max_conns) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调整当前peer权重</span></span><br><span class="line">        peer-&gt;current_weight += peer-&gt;effective_weight;</span><br><span class="line">        total += peer-&gt;effective_weight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (peer-&gt;effective_weight &lt; peer-&gt;weight) &#123;</span><br><span class="line">            peer-&gt;effective_weight++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据权重选择</span></span><br><span class="line">        <span class="keyword">if</span> (best == <span class="literal">NULL</span> || peer-&gt;current_weight &gt; best-&gt;current_weight) &#123;</span><br><span class="line">            best = peer;</span><br><span class="line">            p = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有选择到合适的peer，退出</span></span><br><span class="line">    <span class="keyword">if</span> (best == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rrp-&gt;current = best;</span><br><span class="line"></span><br><span class="line">    n = p / (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>));</span><br><span class="line">    m = (<span class="keyword">uintptr_t</span>) <span class="number">1</span> &lt;&lt; p % (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>));</span><br><span class="line">    <span class="comment">//标记已选中</span></span><br><span class="line">    rrp-&gt;tried[n] |= m;</span><br><span class="line">    <span class="comment">//调整选中节点的权重</span></span><br><span class="line">    best-&gt;current_weight -= total;</span><br><span class="line">    <span class="comment">//调整不可用时间</span></span><br><span class="line">    <span class="keyword">if</span> (now - best-&gt;checked &gt; best-&gt;fail_timeout) &#123;</span><br><span class="line">        best-&gt;checked = now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> best;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p></blockquote><h3 id="2-3-释放server"><a href="#2-3-释放server" class="headerlink" title="2.3 释放server"></a>2.3 释放server</h3><blockquote><p>释放上游函数主要由ngx_http_upstream_free_round_robin_peer实现<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_http_upstream_free_round_robin_peer(<span class="keyword">ngx_peer_connection_t</span> *pc, <span class="keyword">void</span> *data,</span><br><span class="line">    <span class="keyword">ngx_uint_t</span> state)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_rr_peer_data_t</span>  *rrp = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span>                       now;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_rr_peer_t</span>  *peer;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, pc-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"free rr peer %ui %ui"</span>, pc-&gt;tries, state);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> NGX_PEER_KEEPALIVE */</span></span><br><span class="line"></span><br><span class="line">    peer = rrp-&gt;current;</span><br><span class="line"></span><br><span class="line">    ngx_http_upstream_rr_peers_rlock(rrp-&gt;peers);</span><br><span class="line">    ngx_http_upstream_rr_peer_lock(rrp-&gt;peers, peer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单个peer情况</span></span><br><span class="line">    <span class="keyword">if</span> (rrp-&gt;peers-&gt;single) &#123;</span><br><span class="line"></span><br><span class="line">        peer-&gt;conns--;</span><br><span class="line"></span><br><span class="line">        ngx_http_upstream_rr_peer_unlock(rrp-&gt;peers, peer);</span><br><span class="line">        ngx_http_upstream_rr_peers_unlock(rrp-&gt;peers);</span><br><span class="line"></span><br><span class="line">        pc-&gt;tries = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果以失败的状态进入此函数，调整权重</span></span><br><span class="line">    <span class="keyword">if</span> (state &amp; NGX_PEER_FAILED) &#123;</span><br><span class="line">        now = ngx_time();</span><br><span class="line"></span><br><span class="line">        peer-&gt;fails++;</span><br><span class="line">        peer-&gt;accessed = now;</span><br><span class="line">        peer-&gt;checked = now;</span><br><span class="line">        <span class="comment">//调整权重</span></span><br><span class="line">        <span class="keyword">if</span> (peer-&gt;max_fails) &#123;</span><br><span class="line">            peer-&gt;effective_weight -= peer-&gt;weight / peer-&gt;max_fails;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (peer-&gt;fails &gt;= peer-&gt;max_fails) &#123;</span><br><span class="line">                ngx_log_error(NGX_LOG_WARN, pc-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                              <span class="string">"upstream server temporarily disabled"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, pc-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                       <span class="string">"free rr peer failed: %p %i"</span>,</span><br><span class="line">                       peer, peer-&gt;effective_weight);</span><br><span class="line">        <span class="comment">//调整权重</span></span><br><span class="line">        <span class="keyword">if</span> (peer-&gt;effective_weight &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            peer-&gt;effective_weight = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* mark peer live if check passed */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (peer-&gt;accessed &lt; peer-&gt;checked) &#123;</span><br><span class="line">            peer-&gt;fails = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此上游连接数自减</span></span><br><span class="line">    peer-&gt;conns--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若启用了zone模块，则解锁</span></span><br><span class="line">    ngx_http_upstream_rr_peer_unlock(rrp-&gt;peers, peer);</span><br><span class="line">    ngx_http_upstream_rr_peers_unlock(rrp-&gt;peers);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pc-&gt;tries) &#123;</span><br><span class="line">        pc-&gt;tries--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><blockquote></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h2&gt;
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx链接自定义静态库</title>
    <link href="https://weeweetan.github.io/2019/08/13/Nginx%E9%93%BE%E6%8E%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9D%99%E6%80%81%E5%BA%93/"/>
    <id>https://weeweetan.github.io/2019/08/13/Nginx链接自定义静态库/</id>
    <published>2019-08-13T02:06:23.000Z</published>
    <updated>2019-08-30T07:27:44.819Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1-准备静态库"><a href="#1-准备静态库" class="headerlink" title="1.准备静态库"></a>1.准备静态库</h2><h3 id="1-1-编译静态库"><a href="#1-1-编译静态库" class="headerlink" title="1.1 编译静态库"></a>1.1 编译静态库</h3><blockquote><p>使用gcc将源代码编译为目标文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gcc -c test.c</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>-c选项只编译不链接，生成目标对象文件，编译成功会生成test.o文件，接着对test.o文件进行打包</p></blockquote><h3 id="1-2-打包静态库"><a href="#1-2-打包静态库" class="headerlink" title="1.2 打包静态库"></a>1.2 打包静态库</h3><blockquote><p>使用ar命令将test.o打包为静态库文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ar -crv libtest.a test.o</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在定义静态库文件文件名时，需要遵从命名规则。</p></blockquote><h2 id="2-配置静态库"><a href="#2-配置静态库" class="headerlink" title="2.配置静态库"></a>2.配置静态库</h2><blockquote><p>将生成的libtest.a 复制到/usr/lib64目录下，如有头文件，则复制到/usr/include目录下</p></blockquote><h2 id="3-修改Nginx编译脚本"><a href="#3-修改Nginx编译脚本" class="headerlink" title="3.修改Nginx编译脚本"></a>3.修改Nginx编译脚本</h2><blockquote><p>在auto/unix脚本中修改变量CORE_LIBS的值</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CORE_LIBS ="$CORE_LIBS -ltest"</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-使用第三方开发库"><a href="#4-使用第三方开发库" class="headerlink" title="4. 使用第三方开发库"></a>4. 使用第三方开发库</h2><h3 id="4-1-安装第三方开发库"><a href="#4-1-安装第三方开发库" class="headerlink" title="4.1 安装第三方开发库"></a>4.1 安装第三方开发库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum -y install xxx xxx-devel</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>安装成功后，在/usr/include/目录下能找到相应的头文件，在/usr/lib64/目录下能找到类似于libxxx.so的文件</p></blockquote><h3 id="4-2-在源码中包含第三方库的头文件，就可以使用相应的函数了"><a href="#4-2-在源码中包含第三方库的头文件，就可以使用相应的函数了" class="headerlink" title="4.2 在源码中包含第三方库的头文件，就可以使用相应的函数了"></a>4.2 在源码中包含第三方库的头文件，就可以使用相应的函数了</h3><h3 id="4-3-修改Nginx编译脚本"><a href="#4-3-修改Nginx编译脚本" class="headerlink" title="4.3 修改Nginx编译脚本"></a>4.3 修改Nginx编译脚本</h3><blockquote><p>在auto/unix脚本中修改变量CORE_LIBS的值</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CORE_LIBS ="$CORE_LIBS -lxxx"</span><br><span class="line"></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-准备静态库&quot;&gt;&lt;a href=&quot;#1-准备静态库&quot; class=&quot;headerlink&quot; title=&quot;1.准备静态库&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的rewrite模块详解</title>
    <link href="https://weeweetan.github.io/2019/08/09/Nginx%E7%9A%84rewrite%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2019/08/09/Nginx的rewrite模块详解/</id>
    <published>2019-08-09T06:06:55.000Z</published>
    <updated>2019-09-01T13:47:08.189Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1-相关指令"><a href="#1-相关指令" class="headerlink" title="1.相关指令"></a>1.相关指令</h2><h3 id="1-1-if指令"><a href="#1-1-if指令" class="headerlink" title="1.1 if指令"></a>1.1 if指令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Context: server, location</span><br></pre></td></tr></table></figure><blockquote><p>依据指定的条件决定是否执行 if 块语句中的内容</p></blockquote><h3 id="1-2-break指令"><a href="#1-2-break指令" class="headerlink" title="1.2 break指令"></a>1.2 break指令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Context: server, location, <span class="keyword">if</span></span><br></pre></td></tr></table></figure><blockquote><p>停止执行 ngx_http_rewrite_module 的指令集，但是其他模块指令是不受影响的</p></blockquote><h3 id="1-3-rewrite指令"><a href="#1-3-rewrite指令" class="headerlink" title="1.3 rewrite指令"></a>1.3 rewrite指令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Context: server, location, <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line">rewrite regex replacement [flag];</span><br></pre></td></tr></table></figure><blockquote><p>rewrite 指令是使用指定的正则表达式regex来匹配请求的urI，如果匹配成功，则使用replacement更改URI。rewrite指令按照它们在配置文件中出现的顺序执行。可以使用flag标志来终止指令的进一步处理。如果替换字符串replacement以http：//，https：//或$scheme开头，则停止处理后续内容，并直接重定向返回给客户端。</p></blockquote><h3 id="1-4-return指令"><a href="#1-4-return指令" class="headerlink" title="1.4 return指令"></a>1.4 return指令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Context: server, location, <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> code [text];</span><br><span class="line"><span class="keyword">return</span> code URL;</span><br><span class="line"><span class="keyword">return</span> URL;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>停止处理并将指定的code码返回给客户端。 非标准code码 444 关闭连接而不发送响应报头</p></blockquote><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2.源码解析"></a>2.源码解析</h2><h3 id="2-1-rewrite指令源码解析"><a href="#2-1-rewrite指令源码解析" class="headerlink" title="2.1 rewrite指令源码解析"></a>2.1 rewrite指令源码解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_rewrite(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span>  *lcf = conf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_str_t</span>                         *value;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                         last;</span><br><span class="line">    <span class="keyword">ngx_regex_compile_t</span>                rc;</span><br><span class="line">    ngx_http_script_code_pt           *code;</span><br><span class="line">    <span class="keyword">ngx_http_script_compile_t</span>          sc;</span><br><span class="line">    <span class="keyword">ngx_http_script_regex_code_t</span>      *regex;</span><br><span class="line">    <span class="keyword">ngx_http_script_regex_end_code_t</span>  *regex_end;</span><br><span class="line">    u_char                             errstr[NGX_MAX_CONF_ERRSTR];</span><br><span class="line"></span><br><span class="line">    regex = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes,</span><br><span class="line">                                       <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_regex_code_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (regex == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(regex, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_regex_code_t</span>));</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;rc, <span class="keyword">sizeof</span>(<span class="keyword">ngx_regex_compile_t</span>));</span><br><span class="line"></span><br><span class="line">    rc.pattern = value[<span class="number">1</span>];</span><br><span class="line">    rc.err.len = NGX_MAX_CONF_ERRSTR;</span><br><span class="line">    rc.err.data = errstr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> NGX_REGEX_CASELESS */</span></span><br><span class="line">    <span class="comment">//解析正则表达式，填写ngx_http_regex_t结构并返回。正则句柄，命名子模式等都在里面了。</span></span><br><span class="line">    regex-&gt;regex = ngx_http_regex_compile(cf, &amp;rc);</span><br><span class="line">    <span class="keyword">if</span> (regex-&gt;regex == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将其设置为第一个code函数，求出目标字符串大小。尾部还有ngx_http_script_regex_end_code</span></span><br><span class="line">    regex-&gt;code = ngx_http_script_regex_start_code;</span><br><span class="line">    regex-&gt;uri = <span class="number">1</span>;</span><br><span class="line">    regex-&gt;name = value[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value[<span class="number">2</span>].data[value[<span class="number">2</span>].len - <span class="number">1</span>] == <span class="string">'?'</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* the last "?" drops the original arguments */</span></span><br><span class="line">        value[<span class="number">2</span>].len--;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        regex-&gt;add_args = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    last = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_strncmp(value[<span class="number">2</span>].data, <span class="string">"http://"</span>, <span class="keyword">sizeof</span>(<span class="string">"http://"</span>) - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line">        || ngx_strncmp(value[<span class="number">2</span>].data, <span class="string">"https://"</span>, <span class="keyword">sizeof</span>(<span class="string">"https://"</span>) - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line">        || ngx_strncmp(value[<span class="number">2</span>].data, <span class="string">"$scheme"</span>, <span class="keyword">sizeof</span>(<span class="string">"$scheme"</span>) - <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        regex-&gt;status = NGX_HTTP_MOVED_TEMPORARILY;</span><br><span class="line">        regex-&gt;redirect = <span class="number">1</span>;</span><br><span class="line">        last = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cf-&gt;args-&gt;nelts == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">3</span>].data, <span class="string">"last"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            last = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">3</span>].data, <span class="string">"break"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            regex-&gt;break_cycle = <span class="number">1</span>;</span><br><span class="line">            last = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">3</span>].data, <span class="string">"redirect"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            regex-&gt;status = NGX_HTTP_MOVED_TEMPORARILY;</span><br><span class="line">            regex-&gt;redirect = <span class="number">1</span>;</span><br><span class="line">            last = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">3</span>].data, <span class="string">"permanent"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            regex-&gt;status = NGX_HTTP_MOVED_PERMANENTLY;</span><br><span class="line">            regex-&gt;redirect = <span class="number">1</span>;</span><br><span class="line">            last = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"invalid parameter \"%V\""</span>, &amp;value[<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;sc, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_compile_t</span>));</span><br><span class="line"></span><br><span class="line">    sc.cf = cf;</span><br><span class="line">    sc.source = &amp;value[<span class="number">2</span>];</span><br><span class="line">    sc.lengths = &amp;regex-&gt;lengths;</span><br><span class="line">    sc.values = &amp;lcf-&gt;codes;</span><br><span class="line">    sc.variables = ngx_http_script_variables_count(&amp;value[<span class="number">2</span>]);</span><br><span class="line">    sc.main = regex;</span><br><span class="line">    sc.complete_lengths = <span class="number">1</span>;</span><br><span class="line">    sc.compile_args = !regex-&gt;redirect;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_script_compile(&amp;sc) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regex = sc.main;</span><br><span class="line"></span><br><span class="line">    regex-&gt;size = sc.size;</span><br><span class="line">    regex-&gt;args = sc.args;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sc.variables == <span class="number">0</span> &amp;&amp; !sc.dup_capture) &#123;</span><br><span class="line">        regex-&gt;lengths = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regex_end = ngx_http_script_add_code(lcf-&gt;codes,</span><br><span class="line">                                      <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_regex_end_code_t</span>),</span><br><span class="line">                                      &amp;regex);</span><br><span class="line">    <span class="keyword">if</span> (regex_end == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regex_end-&gt;code = ngx_http_script_regex_end_code;   <span class="comment">//结束回调，对应前面的开始。</span></span><br><span class="line">    regex_end-&gt;uri = regex-&gt;uri;</span><br><span class="line">    regex_end-&gt;args = regex-&gt;args;</span><br><span class="line">    regex_end-&gt;add_args = regex-&gt;add_args;</span><br><span class="line">    regex_end-&gt;redirect = regex-&gt;redirect;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (last) &#123;</span><br><span class="line">        code = ngx_http_script_add_code(lcf-&gt;codes, <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>), &amp;regex);</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        *code = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下一个解析句柄组的地址。如果匹配失败，则会直接跳过该regex匹配相关的所有code</span></span><br><span class="line">    regex-&gt;next = (u_char *) lcf-&gt;codes-&gt;elts + lcf-&gt;codes-&gt;nelts</span><br><span class="line">                                              - (u_char *) regex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-return指令源码解析"><a href="#2-2-return指令源码解析" class="headerlink" title="2.2 return指令源码解析"></a>2.2 return指令源码解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_rewrite_return(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span>  *lcf = conf;</span><br><span class="line"></span><br><span class="line">    u_char                            *p;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                         *value, *v;</span><br><span class="line">    <span class="keyword">ngx_http_script_return_code_t</span>     *ret;</span><br><span class="line">    <span class="keyword">ngx_http_compile_complex_value_t</span>   ccv;</span><br><span class="line"></span><br><span class="line">    ret = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes,</span><br><span class="line">                                     <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_return_code_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(ret, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_return_code_t</span>));</span><br><span class="line">    <span class="comment">//注册code为ngx_http_script_return_code</span></span><br><span class="line">    ret-&gt;code = ngx_http_script_return_code;</span><br><span class="line"></span><br><span class="line">    p = value[<span class="number">1</span>].data;</span><br><span class="line"></span><br><span class="line">    ret-&gt;status = ngx_atoi(p, value[<span class="number">1</span>].len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret-&gt;status == (<span class="keyword">uintptr_t</span>) NGX_ERROR) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cf-&gt;args-&gt;nelts == <span class="number">2</span></span><br><span class="line">            &amp;&amp; (ngx_strncmp(p, <span class="string">"http://"</span>, <span class="keyword">sizeof</span>(<span class="string">"http://"</span>) - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line">                || ngx_strncmp(p, <span class="string">"https://"</span>, <span class="keyword">sizeof</span>(<span class="string">"https://"</span>) - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line">                || ngx_strncmp(p, <span class="string">"$scheme"</span>, <span class="keyword">sizeof</span>(<span class="string">"$scheme"</span>) - <span class="number">1</span>) == <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            ret-&gt;status = NGX_HTTP_MOVED_TEMPORARILY;</span><br><span class="line">            v = &amp;value[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"invalid return code \"%V\""</span>, &amp;value[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ret-&gt;status &gt; <span class="number">999</span>) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"invalid return code \"%V\""</span>, &amp;value[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cf-&gt;args-&gt;nelts == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        v = &amp;value[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;ccv, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_compile_complex_value_t</span>));</span><br><span class="line"></span><br><span class="line">    ccv.cf = cf;</span><br><span class="line">    ccv.value = v;</span><br><span class="line">    ccv.complex_value = &amp;ret-&gt;text;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_compile_complex_value(&amp;ccv) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-break指令源码解析"><a href="#2-3-break指令源码解析" class="headerlink" title="2.3 break指令源码解析"></a>2.3 break指令源码解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_rewrite_break(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span> *lcf = conf;</span><br><span class="line"></span><br><span class="line">    ngx_http_script_code_pt  *code;</span><br><span class="line"></span><br><span class="line">    code = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes, <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (code == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *code = ngx_http_script_break_code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>配合ngx_http_rewrite_handler读代码，可以看到如果设置一个code节点到codes数组，那么在ngx_http_rewrite_handler的for循环执行到该节点code的时候，就会把e-&gt;ip置为NULL，这样就直接退出while (<em>(uintptr_t </em>) e-&gt;ip){}循环</p></blockquote><h3 id="2-4-if指令源码解析"><a href="#2-4-if指令源码解析" class="headerlink" title="2.4 if指令源码解析"></a>2.4 if指令源码解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> * </span><br><span class="line">ngx_http_rewrite_if(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span>  *lcf = conf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span>                         *mconf;</span><br><span class="line">    <span class="keyword">char</span>                         *rv;</span><br><span class="line">    u_char                       *elts;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                    i;</span><br><span class="line">    <span class="keyword">ngx_conf_t</span>                    save;</span><br><span class="line">    <span class="keyword">ngx_http_module_t</span>            *<span class="keyword">module</span>;</span><br><span class="line">    <span class="keyword">ngx_http_conf_ctx_t</span>          *ctx, *pctx;</span><br><span class="line">    <span class="keyword">ngx_http_core_loc_conf_t</span>     *clcf, *pclcf;</span><br><span class="line">    <span class="keyword">ngx_http_script_if_code_t</span>    *if_code;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span>  *nlcf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//if的解析过程和location&#123;&#125;解析过程差不多,也有ctx</span></span><br><span class="line">    ctx = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_conf_ctx_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pctx = cf-&gt;ctx; <span class="comment">//父块&#123;&#125;的上下文ctx</span></span><br><span class="line">    ctx-&gt;main_conf = pctx-&gt;main_conf;</span><br><span class="line">    ctx-&gt;srv_conf = pctx-&gt;srv_conf;</span><br><span class="line"></span><br><span class="line">    ctx-&gt;loc_conf = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">void</span> *) * ngx_http_max_module);</span><br><span class="line">    <span class="keyword">if</span> (ctx-&gt;loc_conf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; ngx_modules[i]; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ngx_modules[i]-&gt;type != NGX_HTTP_MODULE) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = ngx_modules[i]-&gt;ctx;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;create_loc_conf) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">               在解析if时， nginx会把它当做一个location来对待的，并且它的location type为noname。通过ngx_http_add_location将该“location”添</span></span><br><span class="line"><span class="comment">               加到上层的locations中。这里将if看做location自然有它的合理性，因为if的配置也是需要进行url匹配的。</span></span><br><span class="line"><span class="comment">               */</span></span><br><span class="line">            mconf = <span class="keyword">module</span>-&gt;create_loc_conf(cf);</span><br><span class="line">            <span class="keyword">if</span> (mconf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                 <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ctx-&gt;loc_conf[ngx_modules[i]-&gt;ctx_index] = mconf;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pclcf = pctx-&gt;loc_conf[ngx_http_core_module.ctx_index];<span class="comment">//该if&#123;&#125;所在location&#123;&#125;的配置信息</span></span><br><span class="line"></span><br><span class="line">    clcf = ctx-&gt;loc_conf[ngx_http_core_module.ctx_index]; <span class="comment">//if&#123;&#125;的配置信息</span></span><br><span class="line">    clcf-&gt;loc_conf = ctx-&gt;loc_conf;</span><br><span class="line">    clcf-&gt;name = pclcf-&gt;name;</span><br><span class="line">    clcf-&gt;noname = <span class="number">1</span>; <span class="comment">//if配置被作为location的noname形式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_add_location(cf, &amp;pclcf-&gt;locations, clcf) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_rewrite_if_condition(cf, lcf) != NGX_CONF_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if_code = ngx_array_push_n(lcf-&gt;codes, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_if_code_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (if_code == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if_code-&gt;code = ngx_http_script_if_code;</span><br><span class="line"></span><br><span class="line">    elts = lcf-&gt;codes-&gt;elts;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the inner directives must be compiled to the same code array */</span></span><br><span class="line"></span><br><span class="line">    nlcf = ctx-&gt;loc_conf[ngx_http_rewrite_module.ctx_index];</span><br><span class="line">    nlcf-&gt;codes = lcf-&gt;codes;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    save = *cf;</span><br><span class="line">    cf-&gt;ctx = ctx;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pclcf-&gt;name.len == <span class="number">0</span>) &#123;</span><br><span class="line">        if_code-&gt;loc_conf = <span class="literal">NULL</span>;</span><br><span class="line">        cf-&gt;cmd_type = NGX_HTTP_SIF_CONF;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        if_code-&gt;loc_conf = ctx-&gt;loc_conf;</span><br><span class="line">        cf-&gt;cmd_type = NGX_HTTP_LIF_CONF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rv = ngx_conf_parse(cf, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    *cf = save;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rv != NGX_CONF_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> rv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (elts != lcf-&gt;codes-&gt;elts) &#123;</span><br><span class="line">        if_code = (<span class="keyword">ngx_http_script_if_code_t</span> *)</span><br><span class="line">                   ((u_char *) if_code + ((u_char *) lcf-&gt;codes-&gt;elts - elts));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if_code-&gt;next = (u_char *) lcf-&gt;codes-&gt;elts + lcf-&gt;codes-&gt;nelts</span><br><span class="line">                                                - (u_char *) if_code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the code array belong to parent block */</span></span><br><span class="line"></span><br><span class="line">    nlcf-&gt;codes = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-set指令源码解析"><a href="#2-5-set指令源码解析" class="headerlink" title="2.5 set指令源码解析"></a>2.5 set指令源码解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*Syntax:set $variable value</span></span><br><span class="line"><span class="comment">1. 将$variable加入到变量系统中，cmcf-&gt;variables_keys-&gt;keys和cmcf-&gt;variables。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a. 如果value是简单字符串，那么解析之后，lcf-&gt;codes就会追加这样的到后面: </span></span><br><span class="line"><span class="comment">ngx_http_script_value_code  直接简单字符串指向一下就行，都不用拷贝了。</span></span><br><span class="line"><span class="comment">b. 如果value是复杂的包含变量的串，那么lcf-&gt;codes就会追加如下的进去 :</span></span><br><span class="line"><span class="comment">ngx_http_script_complex_value_code  调用lengths的lcode获取组合字符串的总长度，并且申请内存</span></span><br><span class="line"><span class="comment">lengths</span></span><br><span class="line"><span class="comment">values，这里根据表达式的不同而不同。 分别将value代表的复杂表达式拆分成语法单元，进行一个个求值，并合并在一起。</span></span><br><span class="line"><span class="comment">ngx_http_script_set_var_code负责将上述合并出的最终结果设置到variables[]数组中去。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_rewrite_set(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span>  *lcf = conf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_int_t</span>                            index;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                           *value;</span><br><span class="line">    <span class="keyword">ngx_http_variable_t</span>                 *v;</span><br><span class="line">    <span class="keyword">ngx_http_script_var_code_t</span>          *vcode;</span><br><span class="line">    <span class="keyword">ngx_http_script_var_handler_code_t</span>  *vhcode;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value[<span class="number">1</span>].data[<span class="number">0</span>] != <span class="string">'$'</span>) &#123;<span class="comment">//变量必须以$开头</span></span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"invalid variable name \"%V\""</span>, &amp;value[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value[<span class="number">1</span>].len--;</span><br><span class="line">    value[<span class="number">1</span>].data++;</span><br><span class="line">    <span class="comment">//下面根据这个变量名，将其加入到cmcf-&gt;variables_keys-&gt;keys里面。</span></span><br><span class="line">    v = ngx_http_add_variable(cf, &amp;value[<span class="number">1</span>], NGX_HTTP_VAR_CHANGEABLE);</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将其加入到cmcf-&gt;variables里面，并返回其下标</span></span><br><span class="line">    index = ngx_http_get_variable_index(cf, &amp;value[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (index == NGX_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set $variable value中的第一个参数$variable对应的在这里或者ngx_http_variables_init_vars设置ngx_http_variable_t的get_handler和data成员</span></span><br><span class="line">    <span class="keyword">if</span> (v-&gt;get_handler == <span class="literal">NULL</span></span><br><span class="line">        &amp;&amp; ngx_strncasecmp(value[<span class="number">1</span>].data, (u_char *) <span class="string">"http_"</span>, <span class="number">5</span>) != <span class="number">0</span></span><br><span class="line">        &amp;&amp; ngx_strncasecmp(value[<span class="number">1</span>].data, (u_char *) <span class="string">"sent_http_"</span>, <span class="number">10</span>) != <span class="number">0</span></span><br><span class="line">        &amp;&amp; ngx_strncasecmp(value[<span class="number">1</span>].data, (u_char *) <span class="string">"upstream_http_"</span>, <span class="number">14</span>) != <span class="number">0</span></span><br><span class="line">        &amp;&amp; ngx_strncasecmp(value[<span class="number">1</span>].data, (u_char *) <span class="string">"cookie_"</span>, <span class="number">7</span>) != <span class="number">0</span></span><br><span class="line">        &amp;&amp; ngx_strncasecmp(value[<span class="number">1</span>].data, (u_char *) <span class="string">"upstream_cookie_"</span>, <span class="number">16</span>)</span><br><span class="line">           != <span class="number">0</span></span><br><span class="line">        &amp;&amp; ngx_strncasecmp(value[<span class="number">1</span>].data, (u_char *) <span class="string">"arg_"</span>, <span class="number">4</span>) != <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//如果变量名称不是以上开头，则其get_handler为ngx_http_rewrite_var，data为index 。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//设置一个默认的handler。在ngx_http_variables_init_vars里面其实是会将上面这些"http_" "sent_http_"这些变量get_hendler的</span></span><br><span class="line">        v-&gt;get_handler = ngx_http_rewrite_var;</span><br><span class="line">        v-&gt;data = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    脚本引擎是一系列的凹调函数以及相关数据（它们被组织成ngx_httpscript_ xxx_codet这样的结构体，代表各种不同功能的操</span></span><br><span class="line"><span class="comment">作步骤），被保存在变量lcf-&gt;codes数组内，而ngx_httprewrite_loc_conf_t类型变量Icf是与当前location相关联的，所以这个脚本引擎只有</span></span><br><span class="line"><span class="comment">当客户端请求访问当前这个location时才会被启动执行。如下配置中，“set $file t_a;”构建的脚本引擎只有当客户端请求访问/t日录时才会</span></span><br><span class="line"><span class="comment">被触发，如果当客户端请求访问根目录时则与它毫无关系。</span></span><br><span class="line"><span class="comment">       location / &#123;</span></span><br><span class="line"><span class="comment">root web;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">       location /t &#123;</span></span><br><span class="line"><span class="comment">set $file t_a;</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//ngx_http_rewrite_handler中会移除执行lcf-&gt;codes数组中的各个ngx_http_script_xxx_code_t-&gt;code函数，</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//set $variable value的value参数在这里处理 ,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    从下面可以看出没set一次就会创建一个ngx_http_script_var_code_t和ngx_http_script_xxx_value_code_t但是如果连续多次设置同样的</span></span><br><span class="line"><span class="comment">    变量不同的值，那么就会有多个var_code_t和value_code_t对，实际上在ngx_http_rewrite_handler变量执行的时候，以最后面的为准，例如:</span></span><br><span class="line"><span class="comment">    50：    location / &#123;</span></span><br><span class="line"><span class="comment">    51：        root    web;</span></span><br><span class="line"><span class="comment">    52:         set $file indexl.html;</span></span><br><span class="line"><span class="comment">    53：        index $file;</span></span><br><span class="line"><span class="comment">    54：</span></span><br><span class="line"><span class="comment">    65:         set $file  index2.html;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">    上面的例子追踪访问到的是index2.html</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果set $variable value中的value是普通字符串，则下面的ngx_http_rewrite_value从ngx_http_rewrite_loc_conf_t-&gt;codes数组中获取ngx_http_script_value_code_t空间，紧接着在后面的</span></span><br><span class="line"><span class="comment">ngx_http_script_start_code函数同样从ngx_http_rewrite_loc_conf_t-&gt;codes数组中获取ngx_http_script_var_code_t空间，因此在codes数组中</span></span><br><span class="line"><span class="comment">存放变量值value的ngx_http_script_value_code_t空间与存放var变量名的ngx_http_script_var_code_t在空间上是靠着的，图形化见&lt;深入剖析nginx 图8-4&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     如果set $variable value中的value是变量名，则下面的ngx_http_rewrite_value从ngx_http_rewrite_loc_conf_t-&gt;codes数组中获取ngx_http_script_complex_value_code_t空间，紧接着在后面的</span></span><br><span class="line"><span class="comment"> ngx_http_script_start_code函数同样从ngx_http_rewrite_loc_conf_t-&gt;codes数组中获取ngx_http_script_complex_value_code_t空间，因此在codes数组中</span></span><br><span class="line"><span class="comment"> 存放变量值value的ngx_http_script_value_code_t空间与存放var变量名的ngx_http_script_var_code_t在空间上是靠着的，图形化见&lt;深入剖析nginx 图8-4&gt;</span></span><br><span class="line"><span class="comment">     */</span><span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_rewrite_value(cf, lcf, &amp;value[<span class="number">2</span>]) != NGX_CONF_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v-&gt;set_handler) &#123;</span><br><span class="line">        vhcode = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes,</span><br><span class="line">                                   <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_var_handler_code_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (vhcode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vhcode-&gt;code = ngx_http_script_var_set_handler_code;</span><br><span class="line">        vhcode-&gt;handler = v-&gt;set_handler;</span><br><span class="line">        vhcode-&gt;data = v-&gt;data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vcode = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes,</span><br><span class="line">                                       <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_var_code_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (vcode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vcode-&gt;code = ngx_http_script_set_var_code;</span><br><span class="line">    vcode-&gt;index = (<span class="keyword">uintptr_t</span>) index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关指令&quot;&gt;&lt;a href=&quot;#1-相关指令&quot; class=&quot;headerlink&quot; title=&quot;1.相关指令&quot;&gt;&lt;/a&gt;1.相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的upstream模块</title>
    <link href="https://weeweetan.github.io/2019/07/16/Nginx%E7%9A%84upstream%E6%A8%A1%E5%9D%97/"/>
    <id>https://weeweetan.github.io/2019/07/16/Nginx的upstream模块/</id>
    <published>2019-07-16T14:58:54.000Z</published>
    <updated>2021-03-28T14:35:15.206Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1-相关配置"><a href="#1-相关配置" class="headerlink" title="1.相关配置"></a>1.相关配置</h2><blockquote><p>upstream模块的典型应用是反向代理，这里就以ngx_http_proxy_module模块为例。假定我们有如下这样的实例环境，客户端对服务器80端口的请求都被Nginx Proxy Server转发到另外两个真实的Nginx Web Server实例上进行处理（下图是实验环境，Web Server和Proxy Server都只是Nginx进程，并且运行在同一台服务器）：<br><img src="/images/2019-07-16_nginx_upstream_1.png" alt><br>那么，Nginx Proxy Server的核心配置多半是这样：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">Filename : nginx.conf</span><br><span class="line">…</span><br><span class="line">http &#123;</span><br><span class="line">    …</span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">server localhost:8001;</span><br><span class="line">server localhost:8002;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_buffering off;</span><br><span class="line">proxy_pass http://load_balance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的<em>proxy_buffering off;</em>配置是为了禁用nginx反向代理的缓存功能，保证客户端的每次请求都被转发到后端真实服务器，以便我们每次跟踪分析的nginx执行流程更加简单且完整。而另外两个配置指令upstream和proxy_pass在此处显得更为重要，其中upstream配置指令的回调处理函数为ngx_http_upstream()，该函数除了申请内存、设置初始值等之外，最主要的动作就是切换配置上下文并调用ngx_conf_parse()函数继续进行配置解析：</p></blockquote><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2.源码解析"></a>2.源码解析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_http_upstream.c</span><br><span class="line">    pcf = *cf;</span><br><span class="line">    cf-&gt;ctx = ctx;</span><br><span class="line">    cf-&gt;cmd_type = NGX_HTTP_UPS_CONF;</span><br><span class="line"></span><br><span class="line">    rv = ngx_conf_parse(cf, <span class="literal">NULL</span>);</span><br><span class="line">…</span><br><span class="line">    <span class="keyword">if</span> (uscf-&gt;servers == <span class="literal">NULL</span>) &#123;</span><br></pre></td></tr></table></figure><blockquote><p>进入到upstream配置块内，最主要的配置指令也就是server，其对应的处理函数为ngx_http_upstream_server()，对于每一个后端真实服务器，除了其uri地址外，还有诸如down、weight、max_fails、fail_timeout、backup这样的可选参数，所有这些都需要ngx_http_upstream_server()函数来处理。<br>在ngx_http_upstream.c的第4173行下个断点，我们可以看到这里给出示例的解析结果：<br><img src="/images/2019-07-16_nginx_upstream_2.png" alt></p></blockquote><blockquote><p>另外一个重要配置指令proxy_pass主要出现在location配置上下文中，而其对应的处理函数为ngx_http_proxy_pass()，抹去该函数内的众多细节，我们重点关注两个赋值语句：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_http_proxy_module.c</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_proxy_pass(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">…</span><br><span class="line">    clcf-&gt;handler = ngx_http_proxy_handler;</span><br><span class="line">…</span><br><span class="line">    plcf-&gt;upstream.upstream = ngx_http_upstream_add(cf, &amp;u, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>上面片段代码里的第一个赋值语句给当前location的http处理设置回调函数，而第二个赋值语句则是查找（没有找到则会创建，比如如果配置文件中upstream指令出现在proxy_pass指令的后面）其对应的upstream配置，我们这里就一个名为load_balance的upstream，所以找到的配置就是它了：<br><img src="/images/2019-07-16_nginx_upstream_3.png" alt></p></blockquote><blockquote><p>前面曾提到，Nginx将对客户端的http请求处理分为多个阶段，而其中有个NGX_HTTP_FIND_CONFIG_PHASE阶段主要就是做配置查找处理，如果当前请求location设置了upstream，即回调函数指针clcf-&gt;handler不为空，则表示对该location的请求需要后端真实服务器来处理：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_http_core_module.c</span><br><span class="line"><span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_core_find_config_phase(<span class="keyword">ngx_http_request_t</span> *r,</span><br><span class="line">    <span class="keyword">ngx_http_phase_handler_t</span> *ph)</span><br><span class="line">&#123;</span><br><span class="line">…</span><br><span class="line">    ngx_http_update_location_config(r);</span><br><span class="line">…</span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_http_update_location_config(<span class="keyword">ngx_http_request_t</span> *r)</span><br><span class="line">&#123;</span><br><span class="line">…</span><br><span class="line">    <span class="keyword">if</span> (clcf-&gt;handler) &#123;</span><br><span class="line">        r-&gt;content_handler = clcf-&gt;handler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在其它有location更新的情况下，比如redirect重定向location或named命名location或if条件location等，此时也会调用ngx_http_update_location_config()函数进行location配置更新。我们知道upstream模块的主要功能是产生响应数据，虽然这些响应数据来自后端真实服务器，所以在NGX_HTTP_CONTENT_PHASE 阶段的checker函数ngx_http_core_content_phase()内，我们可以看到在r-&gt;content_handler不为空的情况下会优先对r-&gt;content_handler函数指针进行回调：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_http_core_module.c</span><br><span class="line"><span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_core_content_phase(<span class="keyword">ngx_http_request_t</span> *r,</span><br><span class="line">    <span class="keyword">ngx_http_phase_handler_t</span> *ph)</span><br><span class="line">&#123;</span><br><span class="line">…</span><br><span class="line">    <span class="keyword">if</span> (r-&gt;content_handler) &#123;</span><br><span class="line">        r-&gt;write_event_handler = ngx_http_request_empty_handler;</span><br><span class="line">        ngx_http_finalize_request(r, r-&gt;content_handler(r));</span><br><span class="line">        <span class="keyword">return</span> NGX_OK;</span><br><span class="line">    &#125;</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>如果r-&gt;content_handler不为空，即存在upstream，那么进入处理，注意第1397行直接返回NGX_OK，也即不再调用挂在该阶段的其它模块回调函数，所以说upstream模块的优先级是最高的。根据前面的回调赋值，调用r-&gt;content_handler()指针函数，实质上就是执行函数ngx_http_proxy_handler()，直到这里，我们才真正走进upstream代理模块的处理逻辑里。</p><h2 id="3-回调函数"><a href="#3-回调函数" class="headerlink" title="3.回调函数"></a>3.回调函数</h2><blockquote><p>对于任何一个Upstream模块而言，最核心的实现主要是7个回调函数，upstream代理模块自然也不例外，它实现并注册了这7个回调函数：</p></blockquote><table><thead><tr><th style="text-align:center">回调指针</th><th style="text-align:center">函数功能</th><th style="text-align:center">upstream代理模块</th></tr></thead><tbody><tr><td style="text-align:center">create_request</td><td style="text-align:center">根据nginx与后端服务器通信协议（比如HTTP、Memcache），将客户端的HTTP请求信息转换为对应的发送到后端服务器的真实请求</td><td style="text-align:center">ngx_http_proxy_create_request 由于nginx与后端服务器通信协议也为HTTP，所以直接拷贝客户端的请求头、请求体（如果有）到变量r-&gt;upstream-&gt;request_bufs内。</td></tr><tr><td style="text-align:center">process_header</td><td style="text-align:center">根据nginx与后端服务器通信协议，将后端服务器返回的头部信息转换为对客户端响应的HTTP响应头。</td><td style="text-align:center">ngx_http_proxy_process_status_line 此时后端服务器返回的头部信息已经保存在变量r-&gt;upstream-&gt;buffer内，将这串字符串解析为HTTP响应头存储到变量r-&gt;upstream-&gt;headers_in内。</td></tr><tr><td style="text-align:center">input_filter_init</td><td style="text-align:center">根据前面获得的后端服务器返回的头部信息，为进一步处理后端服务器将返回的响应体做初始准备工作。</td><td style="text-align:center">ngx_http_proxy_input_filter_init 根据已解析的后端服务器返回的头部信息，设置需进一步处理的后端服务器将返回的响应体的长度，该值保存在变量r-&gt;upstream-&gt;length内。</td></tr><tr><td style="text-align:center">input_filter</td><td style="text-align:center">正式处理后端服务器返回的响应体</td><td style="text-align:center">ngx_http_proxy_non_buffered_copy_filter 本次收到的响应体数据长度为bytes，数据长度存储在r-&gt;upstream-&gt;buffer内，把它加入到r-&gt;upstream-&gt;out_bufs响应数据链等待发送给客户端。</td></tr><tr><td style="text-align:center">finalize_request</td><td style="text-align:center">正常结束与后端服务器的交互，比如剩余待取数据长度为0或读到EOF等，之后就会调用该函数。由于nginx会自动完成与后端服务器交互的清理工作，所以该函数一般仅做下日志，标识响应正常结束。</td><td style="text-align:center">ngx_http_proxy_finalize_request 记录一条日志，标识正常结束与后端服务器的交互，然后函数返回。</td></tr><tr><td style="text-align:center">reinit_request</td><td style="text-align:center">对交互重新初始化，比如当nginx发现一台后端服务器出错无法正常完成处理，需要尝试请求另一台后端服务器时就会调用该函数。</td><td style="text-align:center">ngx_http_proxy_reinit_request设置初始值，设置回调指针，处理比较简单。</td></tr><tr><td style="text-align:center">abort_request</td><td style="text-align:center">异常结束与后端服务器的交互后就会调用该函数。大部分情况下，该函数仅做下日志，标识响应异常结束。</td><td style="text-align:center">ngx_http_proxy_abort_request记录一条日志，标识异常结束与后端服务器的交互，然后函数返回。</td></tr></tbody></table><p>上表格中前面5个函数执行的先后次序如下图所示，由于在Client/Proxy/Server之间，一次请求/响应数据可以发送多次（下图中只画出一次就发送完毕的情况），所以下图中对应的函数也可能被执行多次，不过一般情况下，这5个函数执行的先后次序就是这样了。<br><img src="/images/2019-07-16_nginx_upstream_4.png" alt></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><blockquote><p>这些回调函数如何夹杂到nginx中被调用并不需要完全搞清楚，要写一个upstream模块，我们只要实现上面提到的这7个函数即可，当然，可以看到最主要的也就是create_request、process_header和input_filter这三个回调，它们实现从HTTP协议到Nginx与后端服务器之间交互协议的来回转换，使得在用户看来，他访问的就是一台功能完整的Web服务器，而也许事实上，显示在他面前的数据来自Memcache或别的什么服务器。</p></blockquote><p>参考文献：</p><p><a href="http://www.lenky.info/ngx_book" target="_blank" rel="noopener">nginx核心讲解</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关配置&quot;&gt;&lt;a href=&quot;#1-相关配置&quot; class=&quot;headerlink&quot; title=&quot;1.相关配置&quot;&gt;&lt;/a&gt;1.相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx缓存详解</title>
    <link href="https://weeweetan.github.io/2019/06/27/Nginx%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2019/06/27/Nginx缓存详解/</id>
    <published>2019-06-27T12:56:57.000Z</published>
    <updated>2021-06-03T14:50:11.072Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1-相关配置"><a href="#1-相关配置" class="headerlink" title="1. 相关配置"></a>1. 相关配置</h2><h3 id="1-1-配置指令"><a href="#1-1-配置指令" class="headerlink" title="1.1 配置指令"></a>1.1 配置指令</h3><blockquote><p>Nginx缓存由<strong>proxy_cache_path</strong>指令开启</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path D:\output levels=1:2 keys_zone=my_cache:10m max_size=2g inactive=60m use_temp_path=off;</span><br></pre></td></tr></table></figure><blockquote><p>对于每个参数的具体含义可以参考<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path" target="_blank" rel="noopener">nginx官方文档</a>，对于缓存文件名则需要proxy_cache_key指令指定</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache my_cache;</span><br></pre></td></tr></table></figure><blockquote><p>对于该指令的具体用法可以参考<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache" target="_blank" rel="noopener">nginx官方文档</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_valid 200 1h;</span><br></pre></td></tr></table></figure><blockquote><p><strong>需要注意的是，如果没有这条指令，nginx将不会缓存上游的数据</strong>。对于该指令的具体用法可以参考<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_valid" target="_blank" rel="noopener">nginx官方文档</a></p></blockquote><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2. 源码解析"></a>2. 源码解析</h2><blockquote><p>Nginx与文件缓存相关的代码在<strong>src/http/ngx_http_file_cache.c</strong></p></blockquote><h3 id="2-1-关键结构体"><a href="#2-1-关键结构体" class="headerlink" title="2.1 关键结构体"></a>2.1 关键结构体</h3><blockquote><p>与缓存相关的结构体有<em>ngx_path_t</em>、<em>ngx_http_file_cache_sh_t</em>、<em>ngx_http_file_cache_s</em> 、<em>ngx_http_file_cache_node_t</em>、 <em>ngx_http_file_cache_header_t</em>，来看看这几个结构体的定义</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_str_t</span>                  name;</span><br><span class="line">    <span class="keyword">size_t</span>                     len;</span><br><span class="line">    <span class="keyword">size_t</span>                     level[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    ngx_path_manager_pt        manager;  <span class="comment">//决定是否启用cache manager进程 </span></span><br><span class="line">    ngx_path_loader_pt         loader;  <span class="comment">//决定是否启用cache loader进程 </span></span><br><span class="line">    <span class="keyword">void</span>                      *data;</span><br><span class="line"></span><br><span class="line">    u_char                    *conf_file;   <span class="comment">//nginx配置文件路径</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                 line;</span><br><span class="line">&#125; <span class="keyword">ngx_path_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_rbtree_t</span>                     rbtree;  </span><br><span class="line">    <span class="keyword">ngx_rbtree_node_t</span>                sentinel;</span><br><span class="line">    <span class="keyword">ngx_queue_t</span>                      <span class="built_in">queue</span>;</span><br><span class="line">    <span class="keyword">ngx_atomic_t</span>                     cold;</span><br><span class="line">    <span class="keyword">ngx_atomic_t</span>                     loading;</span><br><span class="line">    <span class="keyword">off_t</span>                            size;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       count;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       watermark;</span><br><span class="line">&#125; <span class="keyword">ngx_http_file_cache_sh_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_file_cache_s</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_http_file_cache_sh_t</span>        *sh;</span><br><span class="line">    <span class="keyword">ngx_slab_pool_t</span>                 *shpool;      <span class="comment">/* shpool是用于管理共享内存的 slab allocator ，所有缓存节点占用空间都由它进行分配 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_path_t</span>                      *path;             <span class="comment">/* ngx_http_file_cache_set_slot中创建ngx_path_t空间 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">off_t</span>                            max_size;      <span class="comment">//缓存目录能保存的缓存最大值</span></span><br><span class="line">    <span class="keyword">size_t</span>                           bsize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span>                           inactive;     <span class="comment">/* 触发LRU算法阈值 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span>                           fail_time;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       files;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       loader_files;  <span class="comment">/* 阈值，当load的文件个数大于这个值之后，load进程会短暂的休眠(时间位loader_sleep) */</span></span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       last;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       loader_sleep;  <span class="comment">/* 阈值，执行一次缓存文件加载到共享内存后 , 进程的休眠时间 , 默认200 */</span></span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       loader_threshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       manager_files;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       manager_sleep; <span class="comment">/* 阈值，处理一定数量缓存结点后, 进程的休眠时间 , 默认200 */</span></span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       manager_threshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_shm_zone_t</span>                  *shm_zone;      <span class="comment">/* 共享内存区 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       use_temp_path; <span class="comment">/* 是否使用临时目录 */</span></span><br><span class="line">                                     <span class="comment">/* unsigned use_temp_path:1 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_rbtree_node_t</span>                node;     <span class="comment">/* 缓存查询树的节点 */</span></span><br><span class="line">    <span class="keyword">ngx_queue_t</span>                      <span class="built_in">queue</span>;     <span class="comment">/* LRU页面置换算法 队列中的节点 */</span></span><br><span class="line"></span><br><span class="line">    u_char                           key[NGX_HTTP_CACHE_KEY_LEN</span><br><span class="line">                                         - <span class="keyword">sizeof</span>(<span class="keyword">ngx_rbtree_key_t</span>)];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span>                         count:<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         uses:<span class="number">10</span>;           <span class="comment">//缓存使用次数</span></span><br><span class="line">    <span class="keyword">unsigned</span>                         valid_msec:<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         error:<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         exists:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         updating:<span class="number">1</span>;        <span class="comment">// 缓存分片更新标志位</span></span><br><span class="line">    <span class="keyword">unsigned</span>                         deleting:<span class="number">1</span>;        <span class="comment">// 缓存分片删除标志位</span></span><br><span class="line">    <span class="keyword">unsigned</span>                         purged:<span class="number">1</span>;</span><br><span class="line">                                     <span class="comment">/* 10 unused bits */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_file_uniq_t</span>                  uniq;</span><br><span class="line">    <span class="keyword">time_t</span>                           expire;            <span class="comment">//过期时间</span></span><br><span class="line">    <span class="keyword">time_t</span>                           valid_sec;</span><br><span class="line">    <span class="keyword">size_t</span>                           body_start;</span><br><span class="line">    <span class="keyword">off_t</span>                            fs_size;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       lock_time;</span><br><span class="line">&#125; <span class="keyword">ngx_http_file_cache_node_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在写缓存文件时会将这个结构体写入</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       version;</span><br><span class="line">    <span class="keyword">time_t</span>                           valid_sec;</span><br><span class="line">    <span class="keyword">time_t</span>                           updating_sec;</span><br><span class="line">    <span class="keyword">time_t</span>                           error_sec;</span><br><span class="line">    <span class="keyword">time_t</span>                           last_modified;</span><br><span class="line">    <span class="keyword">time_t</span>                           date;</span><br><span class="line">    <span class="keyword">uint32_t</span>                         crc32;</span><br><span class="line">    u_short                          valid_msec;</span><br><span class="line">    u_short                          header_start;         <span class="comment">/* 缓存文件中http头开始的偏移 */</span></span><br><span class="line">    u_short                          body_start;</span><br><span class="line">    u_char                           etag_len;</span><br><span class="line">    u_char                           etag[NGX_HTTP_CACHE_ETAG_LEN];</span><br><span class="line">    u_char                           vary_len;</span><br><span class="line">    u_char                           vary[NGX_HTTP_CACHE_VARY_LEN];</span><br><span class="line">    u_char                           variant[NGX_HTTP_CACHE_KEY_LEN];</span><br><span class="line">&#125; <span class="keyword">ngx_http_file_cache_header_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_cache_s</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_file_t</span>                       file;    <span class="comment">/* 缓存文件描述结构体 */</span></span><br><span class="line">    <span class="keyword">ngx_array_t</span>                      keys;    <span class="comment">/* 存放proxy_cache_key指令的值 */</span></span><br><span class="line">    <span class="keyword">uint32_t</span>                         crc32;</span><br><span class="line">    u_char                           key[NGX_HTTP_CACHE_KEY_LEN];     <span class="comment">/* 存放计算md5后的值 */</span></span><br><span class="line">    u_char                           main[NGX_HTTP_CACHE_KEY_LEN];    <span class="comment">/* 跟key相同 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_file_uniq_t</span>                  uniq;</span><br><span class="line">    <span class="keyword">time_t</span>                           valid_sec;</span><br><span class="line">    <span class="keyword">time_t</span>                           updating_sec;</span><br><span class="line">    <span class="keyword">time_t</span>                           error_sec;</span><br><span class="line">    <span class="keyword">time_t</span>                           last_modified;</span><br><span class="line">    <span class="keyword">time_t</span>                           date;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_str_t</span>                        etag;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                        vary;</span><br><span class="line">    u_char                           variant[NGX_HTTP_CACHE_KEY_LEN];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span>                           header_start;     <span class="comment">/* http头在缓存中的偏移位置 */</span></span><br><span class="line">    <span class="keyword">size_t</span>                           body_start;       <span class="comment">/* http响应体在缓存中的偏移位置 */</span></span><br><span class="line">    <span class="keyword">off_t</span>                            length;           <span class="comment">/* 缓存文件的大小，见ngx_http_file_cache_open */</span></span><br><span class="line">    <span class="keyword">off_t</span>                            fs_size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       min_uses;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       error;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       valid_msec;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       vary_tag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_buf_t</span>                       *buf;      <span class="comment">/* 存储缓存文件头 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_http_file_cache_t</span>           *file_cache;</span><br><span class="line">    <span class="keyword">ngx_http_file_cache_node_t</span>      *node;      <span class="comment">//ngx_http_file_cache_exists中创建空间和赋值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_THREADS || NGX_COMPAT)</span></span><br><span class="line">    <span class="keyword">ngx_thread_task_t</span>               *thread_task;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       lock_timeout;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       lock_age;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       lock_time;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       wait_time;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_event_t</span>                      wait_event;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span>                         lock:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         waiting:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span>                         updated:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         updating:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         exists:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         temp_file:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         purged:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         reading:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         secondary:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         background:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span>                         stale_updating:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         stale_error:<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>部分字段含义见注释</p></blockquote><h2 id="2-2-生成标记缓存文件的key"><a href="#2-2-生成标记缓存文件的key" class="headerlink" title="2.2 生成标记缓存文件的key"></a>2.2 生成标记缓存文件的key</h2><blockquote><p>生成标记缓存文件的key由<em>ngx_http_file_cache_create_key</em>函数实现，我们来看看具体实现</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_http_file_cache_create_key(<span class="keyword">ngx_http_request_t</span> *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">size_t</span>             len;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>         *key;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>         i;</span><br><span class="line">    <span class="keyword">ngx_md5_t</span>          md5;</span><br><span class="line">    <span class="keyword">ngx_http_cache_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    c = r-&gt;cache;</span><br><span class="line"></span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ngx_crc32_init(c-&gt;crc32);</span><br><span class="line">    ngx_md5_init(&amp;md5);</span><br><span class="line"></span><br><span class="line">    key = c-&gt;keys.elts;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; c-&gt;keys.nelts; i++) &#123;</span><br><span class="line">        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                       <span class="string">"http cache key: \"%V\""</span>, &amp;key[i]);</span><br><span class="line"></span><br><span class="line">        len += key[i].len;</span><br><span class="line"></span><br><span class="line">        ngx_crc32_update(&amp;c-&gt;crc32, key[i].data, key[i].len);</span><br><span class="line">        ngx_md5_update(&amp;md5, key[i].data, key[i].len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;header_start = <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_file_cache_header_t</span>)</span><br><span class="line">                      + <span class="keyword">sizeof</span>(ngx_http_file_cache_key) + len + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ngx_crc32_final(c-&gt;crc32);</span><br><span class="line">    ngx_md5_final(c-&gt;key, &amp;md5);</span><br><span class="line"></span><br><span class="line">    ngx_memcpy(c-&gt;main, c-&gt;key, NGX_HTTP_CACHE_KEY_LEN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>该函数实现较简单，主要是计算proxy_cache_key指令值的md5值，并保存，然后初始化header_start成员的值，这个地方需要注意一下缓存文件头部信息<br>[ngx_http_file_cache_header_t][“\nKEY: “][orig_key][“\n”][header][body]</p></blockquote><h3 id="2-3-缓存文件名生成"><a href="#2-3-缓存文件名生成" class="headerlink" title="2.3 缓存文件名生成"></a>2.3 缓存文件名生成</h3><blockquote><p>生成缓存文件名主要由<em>ngx_http_file_cache_name</em>实现，现在来看看源码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_file_cache_name(<span class="keyword">ngx_http_request_t</span> *r, <span class="keyword">ngx_path_t</span> *path)</span><br><span class="line">&#123;</span><br><span class="line">    u_char            *p;</span><br><span class="line">    <span class="keyword">ngx_http_cache_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    c = r-&gt;cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;file.name.len) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;file.name.len = path-&gt;name.len + <span class="number">1</span> + path-&gt;len</span><br><span class="line">                       + <span class="number">2</span> * NGX_HTTP_CACHE_KEY_LEN;</span><br><span class="line"></span><br><span class="line">    c-&gt;file.name.data = ngx_pnalloc(r-&gt;pool, c-&gt;file.name.len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;file.name.data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memcpy(c-&gt;file.name.data, path-&gt;name.data, path-&gt;name.len);</span><br><span class="line"></span><br><span class="line">    p = c-&gt;file.name.data + path-&gt;name.len + <span class="number">1</span> + path-&gt;len;</span><br><span class="line">    p = ngx_hex_dump(p, c-&gt;key, NGX_HTTP_CACHE_KEY_LEN);</span><br><span class="line">    *p = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    ngx_create_hashed_filename(path, c-&gt;file.name.data, c-&gt;file.name.len);</span><br><span class="line"></span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"cache file: \"%s\""</span>, c-&gt;file.name.data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol><li>该函数首先判断当前缓存文件名是否已经生成成功，若已生成，则直接返回，代码如下：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (c-&gt;file.name.len) &#123;</span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>接下来计算缓存文件名长度，其中<em>path-&gt;name.len</em>为<em>proxy_cache_path</em>指令第一个参数，path-&gt;len为levels长度，比如level=1:2则path-&gt;len为5，包含两个/，代码如下：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c-&gt;file.name.len = path-&gt;name.len + <span class="number">1</span> + path-&gt;len</span><br><span class="line">                   + <span class="number">2</span> * NGX_HTTP_CACHE_KEY_LEN;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>接着为缓存文件名申请内存，代码如下：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-&gt;file.name.data = ngx_pnalloc(r-&gt;pool, c-&gt;file.name.len + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>接着将<em>proxy_cache_path</em>指令设置的路径复制到<em>c-&gt;file.name.data</em>最前端，完成后<em>c-&gt;file.name.data</em>的值为:D:\output,代码如下：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx_memcpy(c-&gt;file.name.data, path-&gt;name.data, path-&gt;name.len);</span><br></pre></td></tr></table></figure><blockquote><ol start="5"><li>接着将p指向<em>c-&gt;file.name.data</em>偏移 <em>path-&gt;name.len + 1 + path-&gt;len</em>的位置处，这样做的目的是准备生成32位长的md5文件名，并预留level设置的目录</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = c-&gt;file.name.data + path-&gt;name.len + <span class="number">1</span> + path-&gt;len;</span><br><span class="line">p = ngx_hex_dump(p, c-&gt;key, NGX_HTTP_CACHE_KEY_LEN);</span><br><span class="line">*p = <span class="string">'\0'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>这一步完成之后<em>c-&gt;file.name.data</em>的值为D:\output屯屯屯md5(proxy_cache_key)</p></blockquote><blockquote><ol start="6"><li>调用<em>ngx_create_hashed_filename</em>函数补全第5步预留的level目录</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx_create_hashed_filename(path, c-&gt;file.name.data, c-&gt;file.name.len);</span><br></pre></td></tr></table></figure><h3 id="2-4-生成由levels参数指定的目录层级"><a href="#2-4-生成由levels参数指定的目录层级" class="headerlink" title="2.4 生成由levels参数指定的目录层级"></a>2.4 生成由levels参数指定的目录层级</h3><blockquote><p>生成由levels参数指定的目录层级由<em>ngx_create_hashed_filename</em>实现，现在来看看源码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_create_hashed_filename(<span class="keyword">ngx_path_t</span> *path, u_char *file, <span class="keyword">size_t</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">size_t</span>      i, level;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>  n;</span><br><span class="line"></span><br><span class="line">    i = path-&gt;name.len + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    file[path-&gt;name.len + path-&gt;len]  = <span class="string">'/'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; NGX_MAX_PATH_LEVEL; n++) &#123;</span><br><span class="line">        level = path-&gt;level[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (level == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        len -= level;</span><br><span class="line">        file[i - <span class="number">1</span>] = <span class="string">'/'</span>;</span><br><span class="line">        ngx_memcpy(&amp;file[i], &amp;file[len], level);</span><br><span class="line">        i += level + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>从上一节中我们知道参数file的值为D:\output屯屯屯md5(proxy_cache_key)，该函数首先用一个变量i保存path长度加1，这个设计非常巧妙，在后续中会使用到，代码如下：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = path-&gt;name.len + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>接着修改file的值，在层级目录后添加一个反斜杠，修改后为D:\output屯屯屯/md5(proxy_cache_key)</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file[path-&gt;name.len + path-&gt;len]  = <span class="string">'/'</span>;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>接下来进入一个for循环，填充file中的屯屯屯，在第一次循环中首先获取levels=1：2中的1，接着用变量len减去变量level，接着在output后添加一个’/‘，然后将file中从len位置复制1个字符到<em>output/</em>后，修改i的值；第二次循环，首先获取levels=1：2中的2，接着用len减去2，接着在第一次缓存复制的字符后添加一个’/‘，然后把file从len处复制2个字符到上一步的’/‘后，修改i的值；第三次跳出循环，至此填充完成，代码如下：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; NGX_MAX_PATH_LEVEL; n++) &#123;</span><br><span class="line">    level = path-&gt;level[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (level == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    len -= level;</span><br><span class="line">    file[i - <span class="number">1</span>] = <span class="string">'/'</span>;</span><br><span class="line">    ngx_memcpy(&amp;file[i], &amp;file[len], level);</span><br><span class="line">    i += level + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-从红黑树中查找缓存节点"><a href="#2-5-从红黑树中查找缓存节点" class="headerlink" title="2.5 从红黑树中查找缓存节点"></a>2.5 从红黑树中查找缓存节点</h3><blockquote><p>缓存key跟缓存文件名生成好之后，紧接着根据生成好的key从红黑树中查找，若不存在则插入，找到则返回对应的缓存节点，这个功能由<em>ngx_http_file_cache_exists</em>函数实现，我们看看具体实现。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static ngx_int_t</span><br><span class="line">ngx_http_file_cache_exists(ngx_http_file_cache_t *cache, ngx_http_cache_t *c)</span><br><span class="line">&#123;</span><br><span class="line">    ngx_int_t                    rc;</span><br><span class="line">    ngx_http_file_cache_node_t  *fcn;</span><br><span class="line"></span><br><span class="line">    ngx_shmtx_lock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">    fcn = c-&gt;node;//后面没找到则会创建node节点</span><br><span class="line">   </span><br><span class="line">    if (fcn == NULL) &#123;</span><br><span class="line">        fcn = ngx_http_file_cache_lookup(cache, c-&gt;key); //以 c-&gt;key 为查找条件从缓存中查找缓存节点： </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (fcn) &#123; //cache中存在该key</span><br><span class="line">        ngx_queue_remove(&amp;fcn-&gt;queue);</span><br><span class="line"></span><br><span class="line">        //该客户端在新建连接后，如果之前有缓存该文件，则c-&gt;node为NULL，表示这个连接请求第一次走到这里，有一个客户端在获取数据，如果在</span><br><span class="line">        //连接范围内(还没有断开连接)多次获取该缓存文件，则也只会加1，表示当前有多少个客户端连接在获取该缓存</span><br><span class="line">        if (c-&gt;node == NULL) &#123; //如果该请求第一次使用此缓存节点，则增加相关引用和使用次数</span><br><span class="line">            fcn-&gt;uses++;</span><br><span class="line">            fcn-&gt;count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (fcn-&gt;error) &#123;</span><br><span class="line"></span><br><span class="line">            if (fcn-&gt;valid_sec &lt; ngx_time()) &#123;</span><br><span class="line">                goto renew; //缓存已过期</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rc = NGX_OK;</span><br><span class="line"></span><br><span class="line">            goto done;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (fcn-&gt;exists || fcn-&gt;uses &gt;= c-&gt;min_uses) &#123; //该请求的缓存已经存在，并且对该缓存的请求次数达到了最低要求次数min_uses</span><br><span class="line">            //表示该缓存文件是否存在，Proxy_cache_min_uses 3，则第3次后开始获取后端数据，获取完毕后在ngx_http_file_cache_update中置1，但是只有在地4次请求的时候才会在ngx_http_file_cache_exists赋值为1</span><br><span class="line">            c-&gt;exists = fcn-&gt;exists;</span><br><span class="line">            if (fcn-&gt;body_start) &#123;</span><br><span class="line">                c-&gt;body_start = fcn-&gt;body_start;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rc = NGX_OK;</span><br><span class="line"></span><br><span class="line">            goto done;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //例如配置Proxy_cache_min_uses 5，则需要客户端请求5才才能从缓存中取，如果现在只有4次，则都需要从后端获取数据</span><br><span class="line">        rc = NGX_AGAIN;</span><br><span class="line"></span><br><span class="line">        goto done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //没找到，则在下面创建node节点，添加到ngx_http_file_cache_t-&gt;sh-&gt;rbtree红黑树中</span><br><span class="line">    fcn = ngx_slab_calloc_locked(cache-&gt;shpool,</span><br><span class="line">                                 sizeof(ngx_http_file_cache_node_t));</span><br><span class="line">    if (fcn == NULL) &#123;</span><br><span class="line">        ngx_shmtx_unlock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        (void) ngx_http_file_cache_forced_expire(cache);</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_lock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        fcn = ngx_slab_calloc_locked(cache-&gt;shpool,</span><br><span class="line">                                     sizeof(ngx_http_file_cache_node_t));</span><br><span class="line">        if (fcn == NULL) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_ALERT, ngx_cycle-&gt;log, 0,</span><br><span class="line">                          &quot;could not allocate node%s&quot;, cache-&gt;shpool-&gt;log_ctx);</span><br><span class="line">            rc = NGX_ERROR;</span><br><span class="line">            goto failed;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memcpy((u_char *) &amp;fcn-&gt;node.key, c-&gt;key, sizeof(ngx_rbtree_key_t));</span><br><span class="line"></span><br><span class="line">    ngx_memcpy(fcn-&gt;key, &amp;c-&gt;key[sizeof(ngx_rbtree_key_t)],</span><br><span class="line">               NGX_HTTP_CACHE_KEY_LEN - sizeof(ngx_rbtree_key_t));</span><br><span class="line"></span><br><span class="line">    ngx_rbtree_insert(&amp;cache-&gt;sh-&gt;rbtree, &amp;fcn-&gt;node); //把该节点添加到红黑树中</span><br><span class="line"></span><br><span class="line">    fcn-&gt;uses = 1;</span><br><span class="line">    fcn-&gt;count = 1;</span><br><span class="line"></span><br><span class="line">renew:</span><br><span class="line"></span><br><span class="line">    rc = NGX_DECLINED; //uri第一次请求的时候创建node节点，同时返回NGX_DECLINED。或者缓存过期需要把该节点相关信息恢复为默认值</span><br><span class="line"></span><br><span class="line">    fcn-&gt;valid_msec = 0;</span><br><span class="line">    fcn-&gt;error = 0;</span><br><span class="line">    fcn-&gt;exists = 0;</span><br><span class="line">    fcn-&gt;valid_sec = 0;</span><br><span class="line">    fcn-&gt;uniq = 0;</span><br><span class="line">    fcn-&gt;body_start = 0;</span><br><span class="line">    fcn-&gt;fs_size = 0;</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line"></span><br><span class="line">    fcn-&gt;expire = ngx_time() + cache-&gt;inactive;</span><br><span class="line"></span><br><span class="line">    ngx_queue_insert_head(&amp;cache-&gt;sh-&gt;queue, &amp;fcn-&gt;queue); //新创建的node节点添加到cache-&gt;sh-&gt;queue头部</span><br><span class="line"></span><br><span class="line">    c-&gt;uniq = fcn-&gt;uniq;//文件的uniq  赋值见ngx_http_file_cache_update</span><br><span class="line">    c-&gt;error = fcn-&gt;error;</span><br><span class="line">    c-&gt;node = fcn; //把新创建的fcn赋值给c-&gt;node</span><br><span class="line"></span><br><span class="line">failed:</span><br><span class="line"></span><br><span class="line">    ngx_shmtx_unlock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">    return rc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-6-打开缓存文件"><a href="#2-6-打开缓存文件" class="headerlink" title="2.6 打开缓存文件"></a>2.6 打开缓存文件</h3><blockquote><p>上一节中介绍了如何从红黑树中查找缓存节点，找到缓存节点之后，就要需要根据缓存节点中的缓存文件路径去打开缓存文件了，Nginx使用<em>ngx_http_file_cache_open</em>函数实现，接下来我们来看看实现：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_file_cache_open(<span class="keyword">ngx_http_request_t</span> *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                  rc, rv;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                 test;</span><br><span class="line">    <span class="keyword">ngx_http_cache_t</span>          *c;</span><br><span class="line">    <span class="keyword">ngx_pool_cleanup_t</span>        *cln;</span><br><span class="line">    <span class="keyword">ngx_open_file_info_t</span>       of;</span><br><span class="line">    <span class="keyword">ngx_http_file_cache_t</span>     *cache;</span><br><span class="line">    <span class="keyword">ngx_http_core_loc_conf_t</span>  *clcf;</span><br><span class="line"></span><br><span class="line">    c = r-&gt;cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;waiting) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_AGAIN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;reading) &#123;</span><br><span class="line">        <span class="keyword">return</span> ngx_http_file_cache_read(r, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cache = c-&gt;file_cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cln = ngx_pool_cleanup_add(r-&gt;pool, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (cln == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cln-&gt;handler = ngx_http_file_cache_cleanup;</span><br><span class="line">        cln-&gt;data = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rc = ngx_http_file_cache_exists(cache, c);</span><br><span class="line"></span><br><span class="line">    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"http file cache exists: %i e:%d"</span>, rc, c-&gt;exists);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_AGAIN) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_CACHE_SCARCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_OK) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c-&gt;error) &#123;</span><br><span class="line">            <span class="keyword">return</span> c-&gt;error;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c-&gt;temp_file = <span class="number">1</span>;</span><br><span class="line">        test = c-&gt;exists ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        rv = NGX_DECLINED;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">/* rc == NGX_DECLINED */</span></span><br><span class="line"></span><br><span class="line">        test = cache-&gt;sh-&gt;cold ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c-&gt;min_uses &gt; <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!test) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_HTTP_CACHE_SCARCE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rv = NGX_HTTP_CACHE_SCARCE;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c-&gt;temp_file = <span class="number">1</span>;</span><br><span class="line">            rv = NGX_DECLINED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_file_cache_name(r, cache-&gt;path) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!test) &#123;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;of, <span class="keyword">sizeof</span>(<span class="keyword">ngx_open_file_info_t</span>));</span><br><span class="line"></span><br><span class="line">    of.uniq = c-&gt;uniq;</span><br><span class="line">    of.valid = clcf-&gt;open_file_cache_valid;</span><br><span class="line">    of.min_uses = clcf-&gt;open_file_cache_min_uses;</span><br><span class="line">    of.events = clcf-&gt;open_file_cache_events;</span><br><span class="line">    of.directio = NGX_OPEN_FILE_DIRECTIO_OFF;</span><br><span class="line">    of.read_ahead = clcf-&gt;read_ahead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_open_cached_file(clcf-&gt;open_file_cache, &amp;c-&gt;file.name, &amp;of, r-&gt;pool)</span><br><span class="line">        != NGX_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (of.err) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> NGX_ENOENT:</span><br><span class="line">        <span class="keyword">case</span> NGX_ENOTDIR:</span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, of.err,</span><br><span class="line">                          ngx_open_file_n <span class="string">" \"%s\" failed"</span>, c-&gt;file.name.data);</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"http file cache fd: %d"</span>, of.fd);</span><br><span class="line"></span><br><span class="line">    c-&gt;file.fd = of.fd;</span><br><span class="line">    c-&gt;file.<span class="built_in">log</span> = r-&gt;connection-&gt;<span class="built_in">log</span>;</span><br><span class="line">    c-&gt;uniq = of.uniq;</span><br><span class="line">    c-&gt;length = of.size;</span><br><span class="line">    c-&gt;fs_size = (of.fs_size + cache-&gt;bsize - <span class="number">1</span>) / cache-&gt;bsize;</span><br><span class="line"></span><br><span class="line">    c-&gt;buf = ngx_create_temp_buf(r-&gt;pool, c-&gt;body_start);</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;buf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ngx_http_file_cache_read(r, c);</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rv == NGX_DECLINED) &#123;</span><br><span class="line">        <span class="keyword">return</span> ngx_http_file_cache_lock(r, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rv;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-读缓存文件"><a href="#2-7-读缓存文件" class="headerlink" title="2.7 读缓存文件"></a>2.7 读缓存文件</h3><blockquote><p>若缓存文件存在，则会读取缓存文件头部，并根据读取出的头部信息进行下一步操作，nginx使用<em>ngx_http_file_cache_read</em>函数实现这个功能，我们来看一下具体实现</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_file_cache_read(<span class="keyword">ngx_http_request_t</span> *r, <span class="keyword">ngx_http_cache_t</span> *c)</span><br><span class="line">&#123;</span><br><span class="line">    u_char                        *p;</span><br><span class="line">    <span class="keyword">time_t</span>                         now;</span><br><span class="line">    <span class="keyword">ssize_t</span>                        n;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                     *key;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                      rc;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                     i;</span><br><span class="line">    <span class="keyword">ngx_http_file_cache_t</span>         *cache;</span><br><span class="line">    <span class="keyword">ngx_http_file_cache_header_t</span>  *h;</span><br><span class="line"></span><br><span class="line">    n = ngx_http_file_cache_aio_read(r, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//写缓冲区封装过程参考:ngx_http_upstream_process_header</span></span><br><span class="line">     <span class="comment">//缓存文件中前面部分格式:[ngx_http_file_cache_header_t]["\nKEY: "][orig_key]["\n"][header]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">size_t</span>) n &lt; c-&gt;header_start) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"cache file \"%s\" is too small"</span>, c-&gt;file.name.data);</span><br><span class="line">        <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h = (<span class="keyword">ngx_http_file_cache_header_t</span> *) c-&gt;buf-&gt;pos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h-&gt;version != NGX_HTTP_CACHE_VERSION) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_INFO, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"cache file \"%s\" version mismatch"</span>, c-&gt;file.name.data);</span><br><span class="line">        <span class="keyword">return</span> NGX_DECLINED;   <span class="comment">//如果返回这个NGX_DECLINED，会把cached置0，返回出去后只有从后端从新获取数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h-&gt;crc32 != c-&gt;crc32 || (<span class="keyword">size_t</span>) h-&gt;header_start != c-&gt;header_start) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"cache file \"%s\" has md5 collision"</span>, c-&gt;file.name.data);</span><br><span class="line">        <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p = c-&gt;buf-&gt;pos + <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_file_cache_header_t</span>)</span><br><span class="line">        + <span class="keyword">sizeof</span>(ngx_http_file_cache_key);</span><br><span class="line"></span><br><span class="line">    key = c-&gt;keys.elts;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; c-&gt;keys.nelts; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ngx_memcmp(p, key[i].data, key[i].len) != <span class="number">0</span>) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                          <span class="string">"cache file \"%s\" has md5 collision"</span>,</span><br><span class="line">                          c-&gt;file.name.data);</span><br><span class="line">            <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p += key[i].len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">size_t</span>) h-&gt;body_start &gt; c-&gt;body_start) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"cache file \"%s\" has too long header"</span>,</span><br><span class="line">                      c-&gt;file.name.data);</span><br><span class="line">        <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h-&gt;vary_len &gt; NGX_HTTP_CACHE_VARY_LEN) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"cache file \"%s\" has incorrect vary length"</span>,</span><br><span class="line">                      c-&gt;file.name.data);</span><br><span class="line">        <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h-&gt;vary_len) &#123;</span><br><span class="line">        ngx_http_file_cache_vary(r, h-&gt;vary, h-&gt;vary_len, c-&gt;variant);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_memcmp(c-&gt;variant, h-&gt;variant, NGX_HTTP_CACHE_KEY_LEN) != <span class="number">0</span>) &#123;</span><br><span class="line">            ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"http file cache vary mismatch"</span>);</span><br><span class="line">            <span class="keyword">return</span> ngx_http_file_cache_reopen(r, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;buf-&gt;last += n;</span><br><span class="line"></span><br><span class="line">    c-&gt;valid_sec = h-&gt;valid_sec;</span><br><span class="line">    c-&gt;updating_sec = h-&gt;updating_sec;</span><br><span class="line">    c-&gt;error_sec = h-&gt;error_sec;</span><br><span class="line">    c-&gt;last_modified = h-&gt;last_modified;</span><br><span class="line">    c-&gt;date = h-&gt;date;</span><br><span class="line">    c-&gt;valid_msec = h-&gt;valid_msec;</span><br><span class="line">    c-&gt;body_start = h-&gt;body_start;</span><br><span class="line">    c-&gt;etag.len = h-&gt;etag_len;</span><br><span class="line">    c-&gt;etag.data = h-&gt;etag;</span><br><span class="line"></span><br><span class="line">    r-&gt;cached = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    cache = c-&gt;file_cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cache-&gt;sh-&gt;cold) &#123;</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_lock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!c-&gt;node-&gt;exists) &#123;</span><br><span class="line">            c-&gt;node-&gt;uses = <span class="number">1</span>;</span><br><span class="line">            c-&gt;node-&gt;body_start = c-&gt;body_start;</span><br><span class="line">            c-&gt;node-&gt;exists = <span class="number">1</span>;</span><br><span class="line">            c-&gt;node-&gt;uniq = c-&gt;uniq;</span><br><span class="line">            c-&gt;node-&gt;fs_size = c-&gt;fs_size;</span><br><span class="line"></span><br><span class="line">            cache-&gt;sh-&gt;size += c-&gt;fs_size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_unlock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    now = ngx_time();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;valid_sec &lt; now) &#123;</span><br><span class="line">        c-&gt;stale_updating = c-&gt;valid_sec + c-&gt;updating_sec &gt;= now;</span><br><span class="line">        c-&gt;stale_error = c-&gt;valid_sec + c-&gt;error_sec &gt;= now;</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_lock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c-&gt;node-&gt;updating) &#123;</span><br><span class="line">            rc = NGX_HTTP_CACHE_UPDATING;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c-&gt;node-&gt;updating = <span class="number">1</span>;</span><br><span class="line">            c-&gt;updating = <span class="number">1</span>;</span><br><span class="line">            c-&gt;lock_time = c-&gt;node-&gt;lock_time;</span><br><span class="line">            rc = NGX_HTTP_CACHE_STALE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_unlock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                       <span class="string">"http file cache expired: %i %T %T"</span>,</span><br><span class="line">                       rc, c-&gt;valid_sec, now);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol><li>调用ngx_http_file_cache_aio_read函数读取缓存文件，读取大小为c-&gt;header_start，读取完成后，对返回值进行校验，确定是否读取成功，代码如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">n = ngx_http_file_cache_aio_read(r, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">size_t</span>) n &lt; c-&gt;header_start) &#123;</span><br><span class="line">    ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                  <span class="string">"cache file \"%s\" is too small"</span>, c-&gt;file.name.data);</span><br><span class="line">    <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="2"><li>取出缓存文件头部，并对其字段进行校验，封包过程参考ngx_http_file_cache_set_header函数<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">h = (<span class="keyword">ngx_http_file_cache_header_t</span> *) c-&gt;buf-&gt;pos;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>使用读出的缓存文件头部，更新内存中缓存节点信息</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">c-&gt;buf-&gt;last += n;    <span class="comment">//buf后续会被用来存放http头，所以这个地方移动last指针</span></span><br><span class="line"></span><br><span class="line">c-&gt;valid_sec = h-&gt;valid_sec;</span><br><span class="line">c-&gt;updating_sec = h-&gt;updating_sec;</span><br><span class="line">c-&gt;error_sec = h-&gt;error_sec;</span><br><span class="line">c-&gt;last_modified = h-&gt;last_modified;</span><br><span class="line">c-&gt;date = h-&gt;date;</span><br><span class="line">c-&gt;valid_msec = h-&gt;valid_msec;</span><br><span class="line">c-&gt;body_start = h-&gt;body_start;</span><br><span class="line">c-&gt;etag.len = h-&gt;etag_len;</span><br><span class="line">c-&gt;etag.data = h-&gt;etag;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-8-发送缓存"><a href="#2-8-发送缓存" class="headerlink" title="2.8 发送缓存"></a>2.8 发送缓存</h3><blockquote><p>若2.7节读取缓存文件成功，而且缓存校验也成功，则开始发送缓存内容，该功能由<em>ngx_http_upstream_cache_send</em>函数实现，接下来我们看看源码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_upstream_cache_send(<span class="keyword">ngx_http_request_t</span> *r, <span class="keyword">ngx_http_upstream_t</span> *u)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>          rc;</span><br><span class="line">    <span class="keyword">ngx_http_cache_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    r-&gt;cached = <span class="number">1</span>;</span><br><span class="line">    c = r-&gt;cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;header_start == c-&gt;body_start) &#123;</span><br><span class="line">        r-&gt;http_version = NGX_HTTP_VERSION_9;</span><br><span class="line">        <span class="keyword">return</span> ngx_http_cache_send(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> cache stack */</span></span><br><span class="line"></span><br><span class="line">    u-&gt;buffer = *c-&gt;buf;</span><br><span class="line">    u-&gt;buffer.pos += c-&gt;header_start;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;u-&gt;headers_in, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_upstream_headers_in_t</span>));</span><br><span class="line">    u-&gt;headers_in.content_length_n = <span class="number">-1</span>;</span><br><span class="line">    u-&gt;headers_in.last_modified_time = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_list_init(&amp;u-&gt;headers_in.headers, r-&gt;pool, <span class="number">8</span>,</span><br><span class="line">                      <span class="keyword">sizeof</span>(<span class="keyword">ngx_table_elt_t</span>))</span><br><span class="line">        != NGX_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_list_init(&amp;u-&gt;headers_in.trailers, r-&gt;pool, <span class="number">2</span>,</span><br><span class="line">                      <span class="keyword">sizeof</span>(<span class="keyword">ngx_table_elt_t</span>))</span><br><span class="line">        != NGX_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rc = u-&gt;process_header(r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_OK) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_http_upstream_process_headers(r, u) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_DONE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ngx_http_cache_send(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_AGAIN) &#123;</span><br><span class="line">        rc = NGX_HTTP_UPSTREAM_INVALID_HEADER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* rc == NGX_HTTP_UPSTREAM_INVALID_HEADER */</span></span><br><span class="line"></span><br><span class="line">    ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                  <span class="string">"cache file \"%s\" contains invalid header"</span>,</span><br><span class="line">                  c-&gt;file.name.data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> delete file */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-9-向上游回源"><a href="#2-9-向上游回源" class="headerlink" title="2.9 向上游回源"></a>2.9 向上游回源</h3><blockquote><p>若缓存不存在，nginx则向上游回源，那么整个流程就走到<em>ngx_http_upstream_init_request</em>函数的#if (NGX_HTTP_CACHE)块后，我们来看看其源码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">ngx_http_upstream_init_request(<span class="keyword">ngx_http_request_t</span> *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                      *host;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                      i;</span><br><span class="line">    <span class="keyword">ngx_resolver_ctx_t</span>             *ctx, temp;</span><br><span class="line">    <span class="keyword">ngx_http_cleanup_t</span>             *cln;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_t</span>            *u;</span><br><span class="line">    <span class="keyword">ngx_http_core_loc_conf_t</span>       *clcf;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_srv_conf_t</span>   *uscf, **uscfp;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_main_conf_t</span>  *umcf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;aio) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u = r-&gt;upstream;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;conf-&gt;cache) &#123;</span><br><span class="line">        <span class="keyword">ngx_int_t</span>  rc;</span><br><span class="line"></span><br><span class="line">        rc = ngx_http_upstream_cache(r, u);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc == NGX_BUSY) &#123;</span><br><span class="line">            r-&gt;write_event_handler = ngx_http_upstream_init_request;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r-&gt;write_event_handler = ngx_http_request_empty_handler;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc == NGX_ERROR) &#123;</span><br><span class="line">            ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc == NGX_OK) &#123;</span><br><span class="line">            rc = ngx_http_upstream_cache_send(r, u);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rc == NGX_DONE) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rc == NGX_HTTP_UPSTREAM_INVALID_HEADER) &#123;</span><br><span class="line">                rc = NGX_DECLINED;</span><br><span class="line">                r-&gt;cached = <span class="number">0</span>;</span><br><span class="line">                u-&gt;buffer.start = <span class="literal">NULL</span>;</span><br><span class="line">                u-&gt;cache_status = NGX_HTTP_CACHE_MISS;</span><br><span class="line">                u-&gt;request_sent = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_http_upstream_cache_background_update(r, u) != NGX_OK) &#123;</span><br><span class="line">                rc = NGX_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc != NGX_DECLINED) &#123;</span><br><span class="line">            ngx_http_finalize_request(r, rc);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    u-&gt;store = u-&gt;conf-&gt;store;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *设置Nginx与下游客户端之间TCP连接的检查方法</span></span><br><span class="line"><span class="comment">    *实际上，这两个方法都会通过ngx_http_upstream_check_broken_connection方法检查Nginx与下游的连接是否正常，如果出现错误，就会立即终止连接。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!u-&gt;store &amp;&amp; !r-&gt;post_action &amp;&amp; !u-&gt;conf-&gt;ignore_client_abort) &#123;</span><br><span class="line">        <span class="comment">//注意这时候的r还是客户端的连接，与上游服务器的连接r还没有建立</span></span><br><span class="line">        r-&gt;read_event_handler = ngx_http_upstream_rd_check_broken_connection;</span><br><span class="line">        r-&gt;write_event_handler = ngx_http_upstream_wr_check_broken_connection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有接收到客户端包体，则把包体结构赋值给u-&gt;request_bufs，在后面的if (u-&gt;create_request(r) != NGX_OK) &#123;会用到</span></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;request_body) &#123;</span><br><span class="line">        u-&gt;request_bufs = r-&gt;request_body-&gt;bufs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;create_request(r) != NGX_OK) &#123; <span class="comment">//ngx_http_proxy_create_request</span></span><br><span class="line">        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_upstream_set_local(r, u, u-&gt;conf-&gt;local) != NGX_OK) &#123;</span><br><span class="line">        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;conf-&gt;socket_keepalive) &#123;</span><br><span class="line">        u-&gt;peer.so_keepalive = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);</span><br><span class="line">    <span class="comment">/* 初始化ngx_http_upstream_t结构中成员output向下游发送响应的方式 */</span></span><br><span class="line">    u-&gt;output.alignment = clcf-&gt;directio_alignment;</span><br><span class="line">    u-&gt;output.pool = r-&gt;pool;</span><br><span class="line">    u-&gt;output.bufs.num = <span class="number">1</span>;</span><br><span class="line">    u-&gt;output.bufs.size = clcf-&gt;client_body_buffer_size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;output.output_filter == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        u-&gt;output.output_filter = ngx_chain_writer;</span><br><span class="line">        u-&gt;output.filter_ctx = &amp;u-&gt;writer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;writer.pool = r-&gt;pool;</span><br><span class="line">    <span class="comment">/* 添加用于表示上游响应的状态，例如：错误编码、包体长度等 */</span></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;upstream_states == <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        r-&gt;upstream_states = ngx_array_create(r-&gt;pool, <span class="number">1</span>,</span><br><span class="line">                                            <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_upstream_state_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (r-&gt;upstream_states == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        u-&gt;state = ngx_array_push(r-&gt;upstream_states);</span><br><span class="line">        <span class="keyword">if</span> (u-&gt;state == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_memzero(u-&gt;state, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_upstream_state_t</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cln = ngx_http_cleanup_add(r, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (cln == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cln-&gt;handler = ngx_http_upstream_cleanup; <span class="comment">//当请求结束时，一定会调用ngx_http_upstream_cleanup方法</span></span><br><span class="line">    cln-&gt;data = r;</span><br><span class="line">    u-&gt;cleanup = &amp;cln-&gt;handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;resolved == <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        uscf = u-&gt;conf-&gt;upstream;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> (NGX_HTTP_SSL)</span><br><span class="line">        u-&gt;ssl_name = u-&gt;resolved-&gt;host;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        host = &amp;u-&gt;resolved-&gt;host;</span><br><span class="line"></span><br><span class="line">        umcf = ngx_http_get_module_main_conf(r, ngx_http_upstream_module);</span><br><span class="line"></span><br><span class="line">        uscfp = umcf-&gt;upstreams.elts;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; umcf-&gt;upstreams.nelts; i++) &#123;</span><br><span class="line"></span><br><span class="line">            uscf = uscfp[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (uscf-&gt;host.len == host-&gt;len</span><br><span class="line">                &amp;&amp; ((uscf-&gt;port == <span class="number">0</span> &amp;&amp; u-&gt;resolved-&gt;no_port)</span><br><span class="line">                     || uscf-&gt;port == u-&gt;resolved-&gt;port)</span><br><span class="line">                &amp;&amp; ngx_strncasecmp(uscf-&gt;host.data, host-&gt;data, host-&gt;len) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">goto</span> found;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u-&gt;resolved-&gt;sockaddr) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (u-&gt;resolved-&gt;port == <span class="number">0</span></span><br><span class="line">                &amp;&amp; u-&gt;resolved-&gt;sockaddr-&gt;sa_family != AF_UNIX)</span><br><span class="line">            &#123;</span><br><span class="line">                ngx_log_error(NGX_LOG_ERR, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                              <span class="string">"no port in upstream \"%V\""</span>, host);</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_http_upstream_create_round_robin_peer(r, u-&gt;resolved)</span><br><span class="line">                != NGX_OK)</span><br><span class="line">            &#123;</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ngx_http_upstream_connect(r, u);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u-&gt;resolved-&gt;port == <span class="number">0</span>) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_ERR, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                          <span class="string">"no port in upstream \"%V\""</span>, host);</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        temp.name = *host;</span><br><span class="line">        <span class="comment">// 初始化域名解析器</span></span><br><span class="line">        ctx = ngx_resolve_start(clcf-&gt;resolver, &amp;temp);</span><br><span class="line">        <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ctx == NGX_NO_RESOLVER) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_ERR, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                          <span class="string">"no resolver defined to resolve %V"</span>, host);</span><br><span class="line"></span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, NGX_HTTP_BAD_GATEWAY);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx-&gt;name = *host;</span><br><span class="line">        ctx-&gt;handler = ngx_http_upstream_resolve_handler; <span class="comment">//设置域名解析完成后的回调函数。</span></span><br><span class="line">        ctx-&gt;data = r;</span><br><span class="line">        ctx-&gt;timeout = clcf-&gt;resolver_timeout;</span><br><span class="line"></span><br><span class="line">        u-&gt;resolved-&gt;ctx = ctx;</span><br><span class="line">        <span class="comment">//开始域名解析，没有完成也会返回的。</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_resolve_name(ctx) != NGX_OK) &#123;</span><br><span class="line">            u-&gt;resolved-&gt;ctx = <span class="literal">NULL</span>;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// 域名还没有解析完成，则直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">found:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uscf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_ALERT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"no upstream configuration"</span>);</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                           NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;upstream = uscf;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_SSL)</span></span><br><span class="line">    u-&gt;ssl_name = uscf-&gt;host;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uscf-&gt;peer.init(r, uscf) != NGX_OK) &#123;</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                           NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;peer.start_time = ngx_current_msec;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;conf-&gt;next_upstream_tries</span><br><span class="line">        &amp;&amp; u-&gt;peer.tries &gt; u-&gt;conf-&gt;next_upstream_tries)</span><br><span class="line">    &#123;</span><br><span class="line">        u-&gt;peer.tries = u-&gt;conf-&gt;next_upstream_tries;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_http_upstream_connect(r, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-10-接受上游返回的数据"><a href="#2-10-接受上游返回的数据" class="headerlink" title="2.10 接受上游返回的数据"></a>2.10 接受上游返回的数据</h3><blockquote><p>该功能由<em>ngx_http_upstream_send_response</em>函数实现，我们来看看源码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">ngx_http_upstream_send_response(<span class="keyword">ngx_http_request_t</span> *r, <span class="keyword">ngx_http_upstream_t</span> *u)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ssize_t</span>                    n;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                  rc;</span><br><span class="line">    <span class="keyword">ngx_event_pipe_t</span>          *p;</span><br><span class="line">    <span class="keyword">ngx_connection_t</span>          *c;</span><br><span class="line">    <span class="keyword">ngx_http_core_loc_conf_t</span>  *clcf;</span><br><span class="line"></span><br><span class="line">    rc = ngx_http_send_header(r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_ERROR || rc &gt; NGX_OK || r-&gt;post_action) &#123;</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u, rc);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;header_sent = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;upgrade) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r-&gt;cache) &#123;</span><br><span class="line">            ngx_http_file_cache_free(r-&gt;cache, u-&gt;pipe-&gt;temp_file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        ngx_http_upstream_upgrade(r, u);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c = r-&gt;connection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;header_only) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!u-&gt;buffering) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, rc);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!u-&gt;cacheable &amp;&amp; !u-&gt;store) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, rc);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        u-&gt;pipe-&gt;downstream_error = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;request_body &amp;&amp; r-&gt;request_body-&gt;temp_file</span><br><span class="line">        &amp;&amp; r == r-&gt;main &amp;&amp; !r-&gt;preserve_body</span><br><span class="line">        &amp;&amp; !u-&gt;conf-&gt;preserve_output)</span><br><span class="line">    &#123;</span><br><span class="line">        ngx_pool_run_cleanup_file(r-&gt;pool, r-&gt;request_body-&gt;temp_file-&gt;file.fd);</span><br><span class="line">        r-&gt;request_body-&gt;temp_file-&gt;file.fd = NGX_INVALID_FILE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!u-&gt;buffering) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r-&gt;cache) &#123;</span><br><span class="line">            ngx_http_file_cache_free(r-&gt;cache, u-&gt;pipe-&gt;temp_file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u-&gt;input_filter == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            u-&gt;input_filter_init = ngx_http_upstream_non_buffered_filter_init;</span><br><span class="line">            u-&gt;input_filter = ngx_http_upstream_non_buffered_filter;</span><br><span class="line">            u-&gt;input_filter_ctx = r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        u-&gt;read_event_handler = ngx_http_upstream_process_non_buffered_upstream;</span><br><span class="line">        r-&gt;write_event_handler =</span><br><span class="line">                             ngx_http_upstream_process_non_buffered_downstream;</span><br><span class="line"></span><br><span class="line">        r-&gt;limit_rate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u-&gt;input_filter_init(u-&gt;input_filter_ctx) == NGX_ERROR) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clcf-&gt;tcp_nodelay &amp;&amp; ngx_tcp_nodelay(c) != NGX_OK) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n = u-&gt;buffer.last - u-&gt;buffer.pos;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n) &#123;</span><br><span class="line">            u-&gt;buffer.last = u-&gt;buffer.pos;</span><br><span class="line"></span><br><span class="line">            u-&gt;state-&gt;response_length += n;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (u-&gt;input_filter(u-&gt;input_filter_ctx, n) == NGX_ERROR) &#123;</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ngx_http_upstream_process_non_buffered_downstream(r);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            u-&gt;buffer.pos = u-&gt;buffer.start;</span><br><span class="line">            u-&gt;buffer.last = u-&gt;buffer.start;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_http_send_special(r, NGX_HTTP_FLUSH) == NGX_ERROR) &#123;</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (u-&gt;peer.connection-&gt;read-&gt;ready || u-&gt;length == <span class="number">0</span>) &#123;</span><br><span class="line">                ngx_http_upstream_process_non_buffered_upstream(r, u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> preallocate event_pipe bufs, look "Content-Length" */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;cache &amp;&amp; r-&gt;cache-&gt;file.fd != NGX_INVALID_FILE) &#123;</span><br><span class="line">        ngx_pool_run_cleanup_file(r-&gt;pool, r-&gt;cache-&gt;file.fd);</span><br><span class="line">        r-&gt;cache-&gt;file.fd = NGX_INVALID_FILE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (ngx_http_test_predicates(r, u-&gt;conf-&gt;no_cache)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> NGX_ERROR:</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> NGX_DECLINED:</span><br><span class="line">        u-&gt;cacheable = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">/* NGX_OK */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u-&gt;cache_status == NGX_HTTP_CACHE_BYPASS) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* create cache if previously bypassed */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_http_file_cache_create(r) != NGX_OK) &#123;</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;cacheable) &#123;</span><br><span class="line">        <span class="keyword">time_t</span>  now, valid;</span><br><span class="line"></span><br><span class="line">        now = ngx_time();</span><br><span class="line"></span><br><span class="line">        valid = r-&gt;cache-&gt;valid_sec;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valid == <span class="number">0</span>) &#123;</span><br><span class="line">            valid = ngx_http_file_cache_valid(u-&gt;conf-&gt;cache_valid,</span><br><span class="line">                                              u-&gt;headers_in.status_n);</span><br><span class="line">            <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                r-&gt;cache-&gt;valid_sec = now + valid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有配置proxy_cache_valid，valid的值为0</span></span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            r-&gt;cache-&gt;date = now;</span><br><span class="line">            r-&gt;cache-&gt;body_start = (u_short) (u-&gt;buffer.pos - u-&gt;buffer.start);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (u-&gt;headers_in.status_n == NGX_HTTP_OK</span><br><span class="line">                || u-&gt;headers_in.status_n == NGX_HTTP_PARTIAL_CONTENT)</span><br><span class="line">            &#123;</span><br><span class="line">                r-&gt;cache-&gt;last_modified = u-&gt;headers_in.last_modified_time;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (u-&gt;headers_in.etag) &#123;</span><br><span class="line">                    r-&gt;cache-&gt;etag = u-&gt;headers_in.etag-&gt;value;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ngx_str_null(&amp;r-&gt;cache-&gt;etag);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r-&gt;cache-&gt;last_modified = <span class="number">-1</span>;</span><br><span class="line">                ngx_str_null(&amp;r-&gt;cache-&gt;etag);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_http_file_cache_set_header(r, u-&gt;buffer.start) != NGX_OK) &#123;</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            u-&gt;cacheable = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"http cacheable: %d"</span>, u-&gt;cacheable);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;cacheable == <span class="number">0</span> &amp;&amp; r-&gt;cache) &#123;</span><br><span class="line">        ngx_http_file_cache_free(r-&gt;cache, u-&gt;pipe-&gt;temp_file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;header_only &amp;&amp; !u-&gt;cacheable &amp;&amp; !u-&gt;store) &#123;</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    p = u-&gt;pipe;</span><br><span class="line"></span><br><span class="line">    p-&gt;output_filter = ngx_http_upstream_output_filter;</span><br><span class="line">    p-&gt;output_ctx = r;</span><br><span class="line">    p-&gt;tag = u-&gt;output.tag;</span><br><span class="line">    p-&gt;bufs = u-&gt;conf-&gt;bufs;</span><br><span class="line">    p-&gt;busy_size = u-&gt;conf-&gt;busy_buffers_size;</span><br><span class="line">    p-&gt;upstream = u-&gt;peer.connection;</span><br><span class="line">    p-&gt;downstream = c;</span><br><span class="line">    p-&gt;pool = r-&gt;pool;</span><br><span class="line">    p-&gt;<span class="built_in">log</span> = c-&gt;<span class="built_in">log</span>;</span><br><span class="line">    p-&gt;limit_rate = u-&gt;conf-&gt;limit_rate;</span><br><span class="line">    p-&gt;start_sec = ngx_time();</span><br><span class="line"></span><br><span class="line">    p-&gt;cacheable = u-&gt;cacheable || u-&gt;store;</span><br><span class="line"></span><br><span class="line">    p-&gt;temp_file = ngx_pcalloc(r-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_temp_file_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;temp_file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;temp_file-&gt;file.fd = NGX_INVALID_FILE;</span><br><span class="line">    p-&gt;temp_file-&gt;file.<span class="built_in">log</span> = c-&gt;<span class="built_in">log</span>;</span><br><span class="line">    p-&gt;temp_file-&gt;path = u-&gt;conf-&gt;temp_path; <span class="comment">//u-&gt;conf-&gt;temp_path的值在ngx_http_proxy_handler函数中赋值，赋值流程为ngx_http_proxy_merge_loc_conf-&gt;ngx_conf_merge_path_value</span></span><br><span class="line">    p-&gt;temp_file-&gt;pool = r-&gt;pool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;cacheable) &#123;</span><br><span class="line">        p-&gt;temp_file-&gt;persistent = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line">        <span class="keyword">if</span> (r-&gt;cache &amp;&amp; !r-&gt;cache-&gt;file_cache-&gt;use_temp_path) &#123;</span><br><span class="line">            p-&gt;temp_file-&gt;path = r-&gt;cache-&gt;file_cache-&gt;path;</span><br><span class="line">            p-&gt;temp_file-&gt;file.name = r-&gt;cache-&gt;file.name;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p-&gt;temp_file-&gt;log_level = NGX_LOG_WARN;</span><br><span class="line">        p-&gt;temp_file-&gt;warn = <span class="string">"an upstream response is buffered "</span></span><br><span class="line">                             <span class="string">"to a temporary file"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;max_temp_file_size = u-&gt;conf-&gt;max_temp_file_size;</span><br><span class="line">    p-&gt;temp_file_write_size = u-&gt;conf-&gt;temp_file_write_size;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_THREADS)</span></span><br><span class="line">    <span class="keyword">if</span> (clcf-&gt;aio == NGX_HTTP_AIO_THREADS &amp;&amp; clcf-&gt;aio_write) &#123;</span><br><span class="line">        p-&gt;thread_handler = ngx_http_upstream_thread_handler;</span><br><span class="line">        p-&gt;thread_ctx = r;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    p-&gt;preread_bufs = ngx_alloc_chain_link(r-&gt;pool);</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;preread_bufs == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;preread_bufs-&gt;buf = &amp;u-&gt;buffer;</span><br><span class="line">    p-&gt;preread_bufs-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    u-&gt;buffer.recycled = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    p-&gt;preread_size = u-&gt;buffer.last - u-&gt;buffer.pos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;cacheable) &#123;</span><br><span class="line"></span><br><span class="line">        p-&gt;buf_to_file = ngx_calloc_buf(r-&gt;pool);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;buf_to_file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p-&gt;buf_to_file-&gt;start = u-&gt;buffer.start;</span><br><span class="line">        p-&gt;buf_to_file-&gt;pos = u-&gt;buffer.start;</span><br><span class="line">        p-&gt;buf_to_file-&gt;last = u-&gt;buffer.pos;</span><br><span class="line">        p-&gt;buf_to_file-&gt;temporary = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_event_flags &amp; NGX_USE_IOCP_EVENT) &#123;</span><br><span class="line">        <span class="comment">/* the posted aio operation may corrupt a shadow buffer */</span></span><br><span class="line">        p-&gt;single_buf = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> p-&gt;free_bufs = 0 if use ngx_create_chain_of_bufs() */</span></span><br><span class="line">    p-&gt;free_bufs = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * event_pipe would do u-&gt;buffer.last += p-&gt;preread_size</span></span><br><span class="line"><span class="comment">     * as though these bytes were read</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    u-&gt;buffer.last = u-&gt;buffer.pos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;conf-&gt;cyclic_temp_file) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * we need to disable the use of sendfile() if we use cyclic temp file</span></span><br><span class="line"><span class="comment">         * because the writing a new data may interfere with sendfile()</span></span><br><span class="line"><span class="comment">         * that uses the same kernel file pages (at least on FreeBSD)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        p-&gt;cyclic_temp_file = <span class="number">1</span>;</span><br><span class="line">        c-&gt;sendfile = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p-&gt;cyclic_temp_file = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;read_timeout = u-&gt;conf-&gt;read_timeout;</span><br><span class="line">    p-&gt;send_timeout = clcf-&gt;send_timeout;</span><br><span class="line">    p-&gt;send_lowat = clcf-&gt;send_lowat;</span><br><span class="line"></span><br><span class="line">    p-&gt;length = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;input_filter_init</span><br><span class="line">        &amp;&amp; u-&gt;input_filter_init(p-&gt;input_ctx) != NGX_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;read_event_handler = ngx_http_upstream_process_upstream;</span><br><span class="line">    r-&gt;write_event_handler = ngx_http_upstream_process_downstream;</span><br><span class="line"></span><br><span class="line">    ngx_http_upstream_process_upstream(r, u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>读取数据的具体操作在<em>ngx_http_upstream_process_upstream</em>函数中实现</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">ngx_http_upstream_process_upstream(<span class="keyword">ngx_http_request_t</span> *r,</span><br><span class="line">    <span class="keyword">ngx_http_upstream_t</span> *u)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_event_t</span>       *rev;</span><br><span class="line">    <span class="keyword">ngx_event_pipe_t</span>  *p;</span><br><span class="line">    <span class="keyword">ngx_connection_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    c = u-&gt;peer.connection;</span><br><span class="line">    p = u-&gt;pipe;</span><br><span class="line">    rev = c-&gt;read;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"http upstream process upstream"</span>);</span><br><span class="line"></span><br><span class="line">    c-&gt;<span class="built_in">log</span>-&gt;action = <span class="string">"reading upstream"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rev-&gt;timedout) &#123;</span><br><span class="line"></span><br><span class="line">        p-&gt;upstream_error = <span class="number">1</span>;</span><br><span class="line">        ngx_connection_error(c, NGX_ETIMEDOUT, <span class="string">"upstream timed out"</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">//请求没有超时，那么对后端，处理一下读事件。ngx_event_pipe开始处理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rev-&gt;delayed) &#123;</span><br><span class="line"></span><br><span class="line">            ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"http upstream delayed"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_handle_read_event(rev, <span class="number">0</span>) != NGX_OK) &#123;</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_event_pipe(p, <span class="number">0</span>) == NGX_ABORT) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注意走到这里的时候，后端发送的头部行信息已经在前面的ngx_http_upstream_send_response-&gt;ngx_http_send_header已经把头部行部分发送给客户端了</span></span><br><span class="line">    <span class="comment">//该函数处理的只是后端放回过来的网页包体部分</span></span><br><span class="line">    ngx_http_upstream_process_request(r, u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接下来分析一下<em>ngx_event_pipe</em>这个函数，在有buffering的时候，使用event_pipe进行数据的转发，调用ngx_event_pipe_write_to_downstream函数读取数据，或者发送数据给客户端。<br>ngx_event_pipe将upstream响应发送回客户端。do_write代表是否要往客户端发送，写数据。如果设置了，那么会先发给客户端，再读upstream数据，当然，如果读取了数据，也会调用这里的。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_event_pipe(<span class="keyword">ngx_event_pipe_t</span> *p, <span class="keyword">ngx_int_t</span> do_write)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>     rc;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>    flags;</span><br><span class="line">    <span class="keyword">ngx_event_t</span>  *rev, *wev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( ;; ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (do_write) &#123;</span><br><span class="line">            p-&gt;<span class="built_in">log</span>-&gt;action = <span class="string">"sending to client"</span>;</span><br><span class="line"></span><br><span class="line">            rc = ngx_event_pipe_write_to_downstream(p);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rc == NGX_ABORT) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_ABORT;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rc == NGX_BUSY) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_OK;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p-&gt;read = <span class="number">0</span>;</span><br><span class="line">        p-&gt;upstream_blocked = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        p-&gt;<span class="built_in">log</span>-&gt;action = <span class="string">"reading upstream"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_event_pipe_read_upstream(p) == NGX_ABORT) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ABORT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!p-&gt;read &amp;&amp; !p-&gt;upstream_blocked) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        do_write = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;upstream-&gt;fd != (<span class="keyword">ngx_socket_t</span>) <span class="number">-1</span>) &#123;</span><br><span class="line">        rev = p-&gt;upstream-&gt;read;</span><br><span class="line"></span><br><span class="line">        flags = (rev-&gt;eof || rev-&gt;error) ? NGX_CLOSE_EVENT : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_handle_read_event(rev, flags) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ABORT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!rev-&gt;delayed) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rev-&gt;active &amp;&amp; !rev-&gt;ready) &#123;</span><br><span class="line">                ngx_add_timer(rev, p-&gt;read_timeout);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rev-&gt;timer_set) &#123;</span><br><span class="line">                ngx_del_timer(rev);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;downstream-&gt;fd != (<span class="keyword">ngx_socket_t</span>) <span class="number">-1</span></span><br><span class="line">        &amp;&amp; p-&gt;downstream-&gt;data == p-&gt;output_ctx)</span><br><span class="line">    &#123;</span><br><span class="line">        wev = p-&gt;downstream-&gt;write;</span><br><span class="line">        <span class="keyword">if</span> (ngx_handle_write_event(wev, p-&gt;send_lowat) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ABORT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!wev-&gt;delayed) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wev-&gt;active &amp;&amp; !wev-&gt;ready) &#123;</span><br><span class="line">                ngx_add_timer(wev, p-&gt;send_timeout);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wev-&gt;timer_set) &#123;</span><br><span class="line">                ngx_del_timer(wev);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个函数中最重要的就是ngx_event_pipe_write_to_downstream跟ngx_event_pipe_read_upstream，这两个函数将处理来自上游的数据以及将数据转发到客户端。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关配置&quot;&gt;&lt;a href=&quot;#1-相关配置&quot; class=&quot;headerlink&quot; title=&quot;1. 相关配置&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx反向代理详解</title>
    <link href="https://weeweetan.github.io/2019/06/17/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2019/06/17/Nginx反向代理详解/</id>
    <published>2019-06-17T12:59:19.000Z</published>
    <updated>2021-05-18T13:56:28.100Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1-相关配置"><a href="#1-相关配置" class="headerlink" title="1. 相关配置"></a>1. 相关配置</h2><blockquote><p>Nginx实现反向代理功能主要由proxy_pass、upstream指令实现，配置指令如下：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    upstream proxy &#123;</span><br><span class="line">        server 127.0.0.1:8080</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://proxy</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>具体配置可以参考<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="noopener">ngx_http_proxy_module</a></p></blockquote><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2. 源码解析"></a>2. 源码解析</h2><blockquote><p>Nginx实现反向代理功能的源码在src/http/modules/ngx_http_proxy_module.c，因为反向代理模块是一种upstream模块，所以还有一些基础代码在src/http/ngx_http_upstream.c中</p></blockquote><h3 id="2-1-入口函数"><a href="#2-1-入口函数" class="headerlink" title="2.1 入口函数"></a>2.1 入口函数</h3><blockquote><p>反向代理模块的入口函数是<strong>ngx_http_proxy_handler</strong>，我们看一下源码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_proxy_handler(<span class="keyword">ngx_http_request_t</span> *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                    rc;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_t</span>         *u;</span><br><span class="line">    <span class="keyword">ngx_http_proxy_ctx_t</span>        *ctx;</span><br><span class="line">    <span class="keyword">ngx_http_proxy_loc_conf_t</span>   *plcf;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line">    <span class="keyword">ngx_http_proxy_main_conf_t</span>  *pmcf;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_upstream_create(r) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx = ngx_pcalloc(r-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_proxy_ctx_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_http_set_ctx(r, ctx, ngx_http_proxy_module);</span><br><span class="line"></span><br><span class="line">    plcf = ngx_http_get_module_loc_conf(r, ngx_http_proxy_module);</span><br><span class="line"></span><br><span class="line">    u = r-&gt;upstream;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (plcf-&gt;proxy_lengths == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ctx-&gt;vars = plcf-&gt;vars;</span><br><span class="line">        u-&gt;schema = plcf-&gt;vars.schema;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_SSL)</span></span><br><span class="line">        u-&gt;ssl = (plcf-&gt;upstream.ssl != <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ngx_http_proxy_eval(r, ctx, plcf) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;output.tag = (<span class="keyword">ngx_buf_tag_t</span>) &amp;ngx_http_proxy_module;</span><br><span class="line"></span><br><span class="line">    u-&gt;conf = &amp;plcf-&gt;upstream;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line">    pmcf = ngx_http_get_module_main_conf(r, ngx_http_proxy_module);</span><br><span class="line"></span><br><span class="line">    u-&gt;caches = &amp;pmcf-&gt;caches;</span><br><span class="line">    u-&gt;create_key = ngx_http_proxy_create_key;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    u-&gt;create_request = ngx_http_proxy_create_request;</span><br><span class="line">    u-&gt;reinit_request = ngx_http_proxy_reinit_request;</span><br><span class="line">    u-&gt;process_header = ngx_http_proxy_process_status_line;</span><br><span class="line">    u-&gt;abort_request = ngx_http_proxy_abort_request;</span><br><span class="line">    u-&gt;finalize_request = ngx_http_proxy_finalize_request;</span><br><span class="line">    r-&gt;state = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (plcf-&gt;redirects) &#123;</span><br><span class="line">        u-&gt;rewrite_redirect = ngx_http_proxy_rewrite_redirect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (plcf-&gt;cookie_domains || plcf-&gt;cookie_paths) &#123;</span><br><span class="line">        u-&gt;rewrite_cookie = ngx_http_proxy_rewrite_cookie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;buffering = plcf-&gt;upstream.buffering;</span><br><span class="line"></span><br><span class="line">    u-&gt;pipe = ngx_pcalloc(r-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_event_pipe_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (u-&gt;pipe == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;pipe-&gt;input_filter = ngx_http_proxy_copy_filter;</span><br><span class="line">    u-&gt;pipe-&gt;input_ctx = r;</span><br><span class="line"></span><br><span class="line">    u-&gt;input_filter_init = ngx_http_proxy_input_filter_init;</span><br><span class="line">    u-&gt;input_filter = ngx_http_proxy_non_buffered_copy_filter;</span><br><span class="line">    u-&gt;input_filter_ctx = r;</span><br><span class="line"></span><br><span class="line">    u-&gt;accel = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!plcf-&gt;upstream.request_buffering</span><br><span class="line">        &amp;&amp; plcf-&gt;body_values == <span class="literal">NULL</span> &amp;&amp; plcf-&gt;upstream.pass_request_body</span><br><span class="line">        &amp;&amp; (!r-&gt;headers_in.chunked</span><br><span class="line">            || plcf-&gt;http_version == NGX_HTTP_VERSION_11))</span><br><span class="line">    &#123;</span><br><span class="line">        r-&gt;request_body_no_buffering = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rc = ngx_http_read_client_request_body(r, ngx_http_upstream_init);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc &gt;= NGX_HTTP_SPECIAL_RESPONSE) &#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_DONE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>该函数首先调用<em>ngx_http_upstream_create</em>函数从内存池中创建<em>ngx_http_upstream_s</em>结构体；</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ngx_http_upstream_create(r) != NGX_OK) &#123;</span><br><span class="line">    <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>接下来初始化<em>ngx_http_upstream_s</em>各成员，应当注意<em>ngx_http_upstream_s</em>结构体的几个回调函数，这个是实现反向代理的重要功能</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">u-&gt;create_request = ngx_http_proxy_create_request;</span><br><span class="line">u-&gt;reinit_request = ngx_http_proxy_reinit_request;</span><br><span class="line">u-&gt;process_header = ngx_http_proxy_process_status_line;</span><br><span class="line">u-&gt;abort_request = ngx_http_proxy_abort_request;</span><br><span class="line">u-&gt;finalize_request = ngx_http_proxy_finalize_request;</span><br><span class="line">r-&gt;state = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (plcf-&gt;redirects) &#123;</span><br><span class="line">    u-&gt;rewrite_redirect = ngx_http_proxy_rewrite_redirect;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (plcf-&gt;cookie_domains || plcf-&gt;cookie_paths) &#123;</span><br><span class="line">    u-&gt;rewrite_cookie = ngx_http_proxy_rewrite_cookie;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">u-&gt;buffering = plcf-&gt;upstream.buffering;</span><br><span class="line">    </span><br><span class="line">u-&gt;pipe = ngx_pcalloc(r-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_event_pipe_t</span>));</span><br><span class="line"><span class="keyword">if</span> (u-&gt;pipe == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">u-&gt;pipe-&gt;input_filter = ngx_http_proxy_copy_filter;</span><br><span class="line">u-&gt;pipe-&gt;input_ctx = r;</span><br><span class="line">    </span><br><span class="line">u-&gt;input_filter_init = ngx_http_proxy_input_filter_init;</span><br><span class="line">u-&gt;input_filter = ngx_http_proxy_non_buffered_copy_filter;</span><br><span class="line">u-&gt;input_filter_ctx = r;</span><br><span class="line">    </span><br><span class="line">u-&gt;accel = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="2-2-绑定入口函数"><a href="#2-2-绑定入口函数" class="headerlink" title="2.2 绑定入口函数"></a>2.2 绑定入口函数</h3><blockquote><ol><li>nginx在解析配置文件时，遇到proxy_pass指令时将上述的入口函数绑定到content阶段的handler上，解析proxy_pass执行后的参数，确定上游服务器，那么当请求到达时，进入到入口函数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">static char *</span><br><span class="line">ngx_http_proxy_pass(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)</span><br><span class="line">&#123;</span><br><span class="line">    ngx_http_proxy_loc_conf_t *plcf = conf;</span><br><span class="line"></span><br><span class="line">    size_t                      add;</span><br><span class="line">    u_short                     port;</span><br><span class="line">    ngx_str_t                  *value, *url;</span><br><span class="line">    ngx_url_t                   u;</span><br><span class="line">    ngx_uint_t                  n;</span><br><span class="line">    ngx_http_core_loc_conf_t   *clcf;</span><br><span class="line">    ngx_http_script_compile_t   sc;</span><br><span class="line"></span><br><span class="line">    if (plcf-&gt;upstream.upstream || plcf-&gt;proxy_lengths) &#123;</span><br><span class="line">        return &quot;is duplicate&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);</span><br><span class="line"></span><br><span class="line">    clcf-&gt;handler = ngx_http_proxy_handler;</span><br><span class="line"></span><br><span class="line">    if (clcf-&gt;name.len &amp;&amp; clcf-&gt;name.data[clcf-&gt;name.len - 1] == &apos;/&apos;) &#123;</span><br><span class="line">        clcf-&gt;auto_redirect = 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    url = &amp;value[1];</span><br><span class="line"></span><br><span class="line">    // 计算变量数</span><br><span class="line">    n = ngx_http_script_variables_count(url);</span><br><span class="line"></span><br><span class="line">    if (n) &#123;</span><br><span class="line"></span><br><span class="line">        ngx_memzero(&amp;sc, sizeof(ngx_http_script_compile_t));</span><br><span class="line"></span><br><span class="line">        sc.cf = cf;</span><br><span class="line">        sc.source = url;</span><br><span class="line">        sc.lengths = &amp;plcf-&gt;proxy_lengths;</span><br><span class="line">        sc.values = &amp;plcf-&gt;proxy_values;</span><br><span class="line">        sc.variables = n;</span><br><span class="line">        sc.complete_lengths = 1;</span><br><span class="line">        sc.complete_values = 1;</span><br><span class="line"></span><br><span class="line">        if (ngx_http_script_compile(&amp;sc) != NGX_OK) &#123;</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#if (NGX_HTTP_SSL)</span><br><span class="line">        plcf-&gt;ssl = 1;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">        return NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ngx_strncasecmp(url-&gt;data, (u_char *) &quot;http://&quot;, 7) == 0) &#123;</span><br><span class="line">        add = 7;</span><br><span class="line">        port = 80;</span><br><span class="line"></span><br><span class="line">    &#125; else if (ngx_strncasecmp(url-&gt;data, (u_char *) &quot;https://&quot;, 8) == 0) &#123;</span><br><span class="line"></span><br><span class="line">#if (NGX_HTTP_SSL)</span><br><span class="line">        plcf-&gt;ssl = 1;</span><br><span class="line"></span><br><span class="line">        add = 8;</span><br><span class="line">        port = 443;</span><br><span class="line">#else</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;https protocol requires SSL support&quot;);</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, &quot;invalid URL prefix&quot;);</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;u, sizeof(ngx_url_t));</span><br><span class="line"></span><br><span class="line">    u.url.len = url-&gt;len - add;</span><br><span class="line">    u.url.data = url-&gt;data + add;</span><br><span class="line">    u.default_port = port;</span><br><span class="line">    u.uri_part = 1;</span><br><span class="line">    u.no_resolve = 1;</span><br><span class="line"></span><br><span class="line">    // 根据proxy_pass指令后面的值，查找upstream块</span><br><span class="line">    plcf-&gt;upstream.upstream = ngx_http_upstream_add(cf, &amp;u, 0);</span><br><span class="line">    if (plcf-&gt;upstream.upstream == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    plcf-&gt;vars.schema.len = add;</span><br><span class="line">    plcf-&gt;vars.schema.data = url-&gt;data;</span><br><span class="line">    plcf-&gt;vars.key_start = plcf-&gt;vars.schema;</span><br><span class="line"></span><br><span class="line">    ngx_http_proxy_set_vars(&amp;u, &amp;plcf-&gt;vars);</span><br><span class="line"></span><br><span class="line">    plcf-&gt;location = clcf-&gt;name;</span><br><span class="line"></span><br><span class="line">    if (clcf-&gt;named</span><br><span class="line">#if (NGX_PCRE)</span><br><span class="line">        || clcf-&gt;regex</span><br><span class="line">#endif</span><br><span class="line">        || clcf-&gt;noname)</span><br><span class="line">    &#123;</span><br><span class="line">        if (plcf-&gt;vars.uri.len) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                               &quot;\&quot;proxy_pass\&quot; cannot have URI part in &quot;</span><br><span class="line">                               &quot;location given by regular expression, &quot;</span><br><span class="line">                               &quot;or inside named location, &quot;</span><br><span class="line">                               &quot;or inside \&quot;if\&quot; statement, &quot;</span><br><span class="line">                               &quot;or inside \&quot;limit_except\&quot; block&quot;);</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        plcf-&gt;location.len = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    plcf-&gt;url = *url;</span><br><span class="line"></span><br><span class="line">    return NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote></blockquote><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h2><blockquote><ol><li>对session的处理，nginx默认使用轮询，若某个IP的请求被代理到A上，这个IP的下一个请求可能会被代理到B上，这样就会有问题，可考虑使用ip hash</li></ol></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关配置&quot;&gt;&lt;a href=&quot;#1-相关配置&quot; class=&quot;headerlink&quot; title=&quot;1. 相关配置&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx日志详解</title>
    <link href="https://weeweetan.github.io/2019/06/15/Nginx%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2019/06/15/Nginx日志详解/</id>
    <published>2019-06-15T12:59:00.000Z</published>
    <updated>2019-08-07T03:10:04.761Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1-相关配置"><a href="#1-相关配置" class="headerlink" title="1. 相关配置"></a>1. 相关配置</h2><blockquote><p>Nginx日志系统由两条指令开启error_log、access_log</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">error_log  logs/error.log debug;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>具体配置可以参考<a href="http://nginx.org/en/docs/ngx_core_module.html#error_log" target="_blank" rel="noopener">error_log</a>跟<a href="http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log" target="_blank" rel="noopener">access_log</a></p></blockquote><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2. 源码解析"></a>2. 源码解析</h2><blockquote><p>首先来看一下关于日志的几个宏定义</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">filename:<span class="built_in">log</span>.h</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_C99_VARIADIC_MACROS)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NGX_HAVE_VARIADIC_MACROS  1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_log_error(level, log, ...)                                        \</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">log</span>)-&gt;log_level &gt;= level) ngx_log_error_core(level, <span class="built_in">log</span>, __VA_ARGS__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ngx_log_error_core</span><span class="params">(<span class="keyword">ngx_uint_t</span> level, <span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_log_debug(level, log, ...)                                        \</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">log</span>)-&gt;log_level &amp; level)                                             \</span><br><span class="line">        ngx_log_error_core(NGX_LOG_DEBUG, <span class="built_in">log</span>, __VA_ARGS__)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> (NGX_HAVE_GCC_VARIADIC_MACROS)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NGX_HAVE_VARIADIC_MACROS  1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_log_error(level, log, args...)                                    \</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">log</span>)-&gt;log_level &gt;= level) ngx_log_error_core(level, <span class="built_in">log</span>, args)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ngx_log_error_core</span><span class="params">(<span class="keyword">ngx_uint_t</span> level, <span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_log_debug(level, log, args...)                                    \</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">log</span>)-&gt;log_level &amp; level)                                             \</span><br><span class="line">        ngx_log_error_core(NGX_LOG_DEBUG, <span class="built_in">log</span>, args)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* no variadic macros */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NGX_HAVE_VARIADIC_MACROS  0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> ngx_cdecl <span class="title">ngx_log_error</span><span class="params">(<span class="keyword">ngx_uint_t</span> level, <span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ngx_log_error_core</span><span class="params">(<span class="keyword">ngx_uint_t</span> level, <span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list args)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> ngx_cdecl <span class="title">ngx_log_debug_core</span><span class="params">(<span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* variadic macros */</span></span></span><br></pre></td></tr></table></figure><blockquote><p>从上面的定义可以看出，实现日志功能的核心在于<em>ngx_log_error_core</em>函数，接下来我们就来看看这个函数的实现</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_VARIADIC_MACROS)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_log_error_core(<span class="keyword">ngx_uint_t</span> level, <span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_log_error_core(<span class="keyword">ngx_uint_t</span> level, <span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list args)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_VARIADIC_MACROS)</span></span><br><span class="line">    va_list      args;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    u_char      *p, *last, *msg;</span><br><span class="line">    <span class="keyword">ssize_t</span>      n;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>   wrote_stderr, debug_connection;</span><br><span class="line">    u_char       errstr[NGX_MAX_ERROR_STR];</span><br><span class="line"></span><br><span class="line">    last = errstr + NGX_MAX_ERROR_STR;</span><br><span class="line"></span><br><span class="line">    p = ngx_cpymem(errstr, ngx_cached_err_log_time.data,</span><br><span class="line">                   ngx_cached_err_log_time.len);</span><br><span class="line"></span><br><span class="line">    p = ngx_slprintf(p, last, <span class="string">" [%V] "</span>, &amp;err_levels[level]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* pid#tid */</span></span><br><span class="line">    p = ngx_slprintf(p, last, <span class="string">"%P#"</span> NGX_TID_T_FMT <span class="string">": "</span>,</span><br><span class="line">                    ngx_log_pid, ngx_log_tid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">log</span>-&gt;connection) &#123;</span><br><span class="line">        p = ngx_slprintf(p, last, <span class="string">"*%uA "</span>, <span class="built_in">log</span>-&gt;connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    msg = p;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_VARIADIC_MACROS)</span></span><br><span class="line"></span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    p = ngx_vslprintf(p, last, fmt, args);</span><br><span class="line">    va_end(args);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line">    p = ngx_vslprintf(p, last, fmt, args);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        p = ngx_log_errno(p, last, err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (level != NGX_LOG_DEBUG &amp;&amp; <span class="built_in">log</span>-&gt;handler) &#123;</span><br><span class="line">        p = <span class="built_in">log</span>-&gt;handler(<span class="built_in">log</span>, p, last - p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p &gt; last - NGX_LINEFEED_SIZE) &#123;</span><br><span class="line">        p = last - NGX_LINEFEED_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_linefeed(p);</span><br><span class="line"></span><br><span class="line">    wrote_stderr = <span class="number">0</span>;</span><br><span class="line">    debug_connection = (<span class="built_in">log</span>-&gt;log_level &amp; NGX_LOG_DEBUG_CONNECTION) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">log</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">log</span>-&gt;log_level &lt; level &amp;&amp; !debug_connection) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">log</span>-&gt;writer) &#123;</span><br><span class="line">            <span class="built_in">log</span>-&gt;writer(<span class="built_in">log</span>, level, errstr, p - errstr);</span><br><span class="line">            <span class="keyword">goto</span> next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_time() == <span class="built_in">log</span>-&gt;disk_full_time) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * on FreeBSD writing to a full filesystem with enabled softupdates</span></span><br><span class="line"><span class="comment">             * may block process for much longer time than writing to non-full</span></span><br><span class="line"><span class="comment">             * filesystem, so we skip writing to a log for one second</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">goto</span> next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n = ngx_write_fd(<span class="built_in">log</span>-&gt;file-&gt;fd, errstr, p - errstr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span> &amp;&amp; ngx_errno == NGX_ENOSPC) &#123;</span><br><span class="line">            <span class="built_in">log</span>-&gt;disk_full_time = ngx_time();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">log</span>-&gt;file-&gt;fd == ngx_stderr) &#123;</span><br><span class="line">            wrote_stderr = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    next:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">log</span> = <span class="built_in">log</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ngx_use_stderr</span><br><span class="line">        || level &gt; NGX_LOG_WARN</span><br><span class="line">        || wrote_stderr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    msg -= (<span class="number">7</span> + err_levels[level].len + <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">void</span>) ngx_sprintf(msg, <span class="string">"nginx: [%V] "</span>, &amp;err_levels[level]);</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">void</span>) ngx_write_console(ngx_stderr, msg, p - msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>从代码中可以看出，nginx的作者对于变参处理还是很细心的，把各种情况都考虑到了，在处理好变参定义之后，就开始初始化字符串格式：</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">p = ngx_cpymem(errstr, ngx_cached_err_log_time.data,</span><br><span class="line">               ngx_cached_err_log_time.len);</span><br><span class="line"></span><br><span class="line">p = ngx_slprintf(p, last, &quot; [%V] &quot;, &amp;err_levels[level]);</span><br><span class="line"></span><br><span class="line">/* pid#tid */</span><br><span class="line">p = ngx_slprintf(p, last, &quot;%P#&quot; NGX_TID_T_FMT &quot;: &quot;,</span><br><span class="line">                ngx_log_pid, ngx_log_tid);</span><br><span class="line"></span><br><span class="line">if (log-&gt;connection) &#123;</span><br><span class="line">    p = ngx_slprintf(p, last, &quot;*%uA &quot;, log-&gt;connection);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>处理变参参数，将变参的值复制到日志串中：</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#if (NGX_HAVE_VARIADIC_MACROS)</span><br><span class="line"></span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    p = ngx_vslprintf(p, last, fmt, args);</span><br><span class="line">    va_end(args);</span><br><span class="line"></span><br><span class="line">#else</span><br><span class="line"></span><br><span class="line">    p = ngx_vslprintf(p, last, fmt, args);</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>处理错误号跟换行：</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (err) &#123;</span><br><span class="line">    p = ngx_log_errno(p, last, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (level != NGX_LOG_DEBUG &amp;&amp; log-&gt;handler) &#123;</span><br><span class="line">    p = log-&gt;handler(log, p, last - p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (p &gt; last - NGX_LINEFEED_SIZE) &#123;</span><br><span class="line">    p = last - NGX_LINEFEED_SIZE;</span><br><span class="line">&#125;</span><br><span class="line">ngx_linefeed(p);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>最后就是将日志串输出到文件或者标准错误流</li></ol></blockquote><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关配置&quot;&gt;&lt;a href=&quot;#1-相关配置&quot; class=&quot;headerlink&quot; title=&quot;1. 相关配置&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx模块详解</title>
    <link href="https://weeweetan.github.io/2019/06/05/Nginx%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2019/06/05/Nginx模块详解/</id>
    <published>2019-06-05T12:58:43.000Z</published>
    <updated>2019-07-20T03:15:19.597Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --><h2 id="1-Nginx模块综述"><a href="#1-Nginx模块综述" class="headerlink" title="1. Nginx模块综述"></a>1. Nginx模块综述</h2><blockquote><p>nginx的模块非常之多，可以认为所有代码都是以模块的形式组织，这包括核心模块和功能模块，针对不同的应用场合，并非所有的功能模块都要被用到，附录A给出的是默认configure（即简单的http服务器应用）下被连接的模块，这里虽说是模块连接，但nginx不会像apache或lighttpd那样在编译时生成so动态库而在程序执行时再进行动态加载，nginx模块源文件会在生成nginx时就直接被编译到其二进制执行文件中，所以如果要选用不同的功能模块，必须对nginx做重新配置和编译。对于功能模块的选择，如果要修改默认值，需要在进行configure时进行指定，比如新增http_flv功能模块（默认是没有这个功能的，各个选项的默认值可以在文件auto/options内看到）：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.2.0]# ./configure --with-http_flv_module</span><br></pre></td></tr></table></figure><blockquote><p>执行后，生成的objs/ngx_modules.c文件内就包含有对ngx_http_flv_module模块的引用了，要再去掉http_flv功能模块，则需要重新configure，即不带–with-http_flv_module配置后再编译生成新的nginx执行程序。通过执行./configure –help，我们可以看到更多的配置选项。<br>虽然Nginx模块有很多，并且每个模块实现的功能各不相同，但是根据模块的功能性质，可以将它们分为四个类别：<br>1， handlers：处理客户端请求并产生待响应内容，比如ngx_http_static_module模块，负责客户端的静态页面请求处理并将对应的磁盘文件准备为响应内容输出。<br>2， filters：对handlers产生的响应内容做各种过滤处理（即是增删改），比如模块ngx_http_not_modified_filter_module，对待响应内容进行过滤检测，如果通过时间戳判断出前后两次请求的响应内容没有发生任何改变，那么可以直接响应 “304 Not Modified”状态标识，让客户端使用缓存即可，而原本待发送的响应内容将被清除掉。<br>3， upstream：如果存在后端真实服务器，nginx可利用upstream模块充当反向代理（Proxy）的角色，对客户端发起的请求只负责进行转发（当然也包括后端真实服务器响应的回转），比如ngx_http_proxy_module就为标准的代理模块。<br>4， load-balance：在nginx充当中间代理时，由于后端真实服务器往往多于一个，对于某一次客户端的请求，如何选择对应的后端真实服务器来进行处理，这就有类似于ngx_http_upstream_ip_hash_module这样的模块来实现不同的负载均衡算法（Load Balance）。<br>对于这几类模块，我们马上会分别进行详细介绍并分析各自典型代表模块，不过在此之前先从nginx模块源码上来进行直观认识。前面讲过nginx的所有代码都是以模块形式进行组织，而封装nginx模块的结构体为ngx_module_s，定义如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_conf_file.h</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_module_s</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>            ctx_index; <span class="comment">//当前模块在同类模块中的序号</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>            index;<span class="comment">//当前模块在所有模块中的序号</span></span><br><span class="line">    …</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>            version;<span class="comment">//当前模块版本号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span>                 *ctx;<span class="comment">//指向当前模块特有的数据</span></span><br><span class="line">    <span class="keyword">ngx_command_t</span>        *commands; <span class="comment">//指向当前模块配置项解析数组</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>            type;<span class="comment">//模块类型</span></span><br><span class="line"><span class="comment">//以下为模块回调函数，回调时机可根据函数名看出</span></span><br><span class="line">    <span class="keyword">ngx_int_t</span>           (*init_master)(<span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>);</span><br><span class="line">    …</span><br><span class="line">&#125;;</span><br><span class="line">Filename : ngx_core.h</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_module_s</span>      <span class="title">ngx_module_t</span>;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>结构体ngx_module_s值得关注的几个字段分别为ctx、commands、type，其中commands字段表示当前模块可以解析的配置项目，这在配置文件解析一章做过详细描述；表示模块类型的type值只有5种可能的值，而同一类型模块的ctx指向的数据类型也相同：</p></blockquote><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">type值</th><th style="text-align:center">ctx指向数据类型</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">NGX_CORE_MODULE</td><td style="text-align:center">ngx_core_module_t</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">NGX_EVENT_MODULE</td><td style="text-align:center">ngx_event_module_t</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">NGX_CONF_MODULE</td><td style="text-align:center">NULL</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">NGX_HTTP_MODULE</td><td style="text-align:center">ngx_http_module_t</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">NGX_MAIL_MODULE</td><td style="text-align:center">ngx_mail_module_t</td></tr></tbody></table><blockquote><p>上表中第三列里的数据类型非常重要，它们的字段基本都是一些回调函数，这些回调函数会在其模块对应的配置文件解析过程前/中/后会适时的被调用，做一些内存准备、初始化、配置值检查、初始值填充与合并、回调函数挂载等初始工作，以ngx_http_core_module模块为例，该模块type类型为NGX_HTTP_MODULE，ctx指向的ngx_http_module_t结构体变量ngx_http_core_module_ctx：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_http_core_module.c</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_http_module_t</span>  ngx_http_core_module_ctx = &#123;</span><br><span class="line">    ngx_http_core_preconfiguration,        <span class="comment">/* preconfiguration */</span></span><br><span class="line">    <span class="literal">NULL</span>,                                  <span class="comment">/* postconfiguration */</span></span><br><span class="line"></span><br><span class="line">    ngx_http_core_create_main_conf,        <span class="comment">/* create main configuration */</span></span><br><span class="line">    ngx_http_core_init_main_conf,          <span class="comment">/* init main configuration */</span></span><br><span class="line"></span><br><span class="line">    ngx_http_core_create_srv_conf,         <span class="comment">/* create server configuration */</span></span><br><span class="line">    ngx_http_core_merge_srv_conf,          <span class="comment">/* merge server configuration */</span></span><br><span class="line"></span><br><span class="line">    ngx_http_core_create_loc_conf,         <span class="comment">/* create location configuration */</span></span><br><span class="line">    ngx_http_core_merge_loc_conf           <span class="comment">/* merge location configuration */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>根据上面代码注释，可以很明显的看出各个回调函数的回调时机，比如函数<em>ngx_http_core_preconfiguration()</em>将在进行http块配置解析前被调用，所以在<em>ngx_http_block()</em>函数里可以看到这样的代码：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_http.c</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_block(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">…</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;preconfiguration) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;preconfiguration(cf) != NGX_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">…</span><br><span class="line">    rv = ngx_conf_parse(cf, <span class="literal">NULL</span>);</span><br><span class="line">…</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;postconfiguration) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;postconfiguration(cf) != NGX_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">…</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>至于这些回调函数内的具体逻辑，如前所述一般是一些初始或默认值填充工作，但也有回调函数挂载的设置，比如ngx_http_static_module模块的postconfiguration字段回调函数ngx_http_static_init()就是将自己的处理函数ngx_http_static_handler()挂载在http处理状态机上，但总体来看这毕竟都只是一些简单的初始准备工作，值得一提的还有ngx_http_core_create_main_conf、ngx_http_core_create_srv_conf、ngx_http_core_create_loc_conf这三个回调函数用来创建存储位于http块、server块、location块配置项的内存。</p></blockquote><p>参考文献：</p><p><a href="http://www.lenky.info/ngx_book" target="_blank" rel="noopener">nginx核心讲解</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Dec 02 2021 22:38:17 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-Nginx模块综述&quot;&gt;&lt;a href=&quot;#1-Nginx模块综述&quot; class=&quot;headerlink&quot; title=&quot;1. Ng
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
</feed>
