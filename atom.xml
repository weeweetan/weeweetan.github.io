<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>weeweetan&#39;s blog</title>
  
  <subtitle>GitHub个人站点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weeweetan.github.io/"/>
  <updated>2019-11-21T14:42:06.501Z</updated>
  <id>https://weeweetan.github.io/</id>
  
  <author>
    <name>weeweetan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx缓存清理</title>
    <link href="https://weeweetan.github.io/2019/10/27/Nginx%E7%BC%93%E5%AD%98%E6%B8%85%E7%90%86/"/>
    <id>https://weeweetan.github.io/2019/10/27/Nginx缓存清理/</id>
    <published>2019-10-27T13:56:19.000Z</published>
    <updated>2019-11-21T14:42:06.501Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1、相关配置"><a href="#1、相关配置" class="headerlink" title="1、相关配置"></a>1、相关配置</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">proxy_cache_path /dev/sda1/data inactive=<span class="number">60</span>m max_size=<span class="number">10</span>G;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>proxy_cache_path指令的inactive参数和max_size参数用来维护缓存队列大小</p></blockquote><h2 id="2、源码解析"><a href="#2、源码解析" class="headerlink" title="2、源码解析"></a>2、源码解析</h2><blockquote><ol><li>首先来看看配置解析函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br></pre></td><td class="code"><pre><span class="line">char *</span><br><span class="line">ngx_http_file_cache_set_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)</span><br><span class="line">&#123;</span><br><span class="line">    char  *confp = conf;</span><br><span class="line"></span><br><span class="line">    off_t                   max_size;</span><br><span class="line">    u_char                 *last, *p;</span><br><span class="line">    time_t                  inactive;</span><br><span class="line">    ssize_t                 size;</span><br><span class="line">    ngx_str_t               s, name, *value;</span><br><span class="line">    ngx_int_t               loader_files, manager_files;</span><br><span class="line">    ngx_msec_t              loader_sleep, manager_sleep, loader_threshold,</span><br><span class="line">                            manager_threshold;</span><br><span class="line">    ngx_uint_t              i, n, use_temp_path;</span><br><span class="line">    ngx_array_t            *caches;</span><br><span class="line">    ngx_http_file_cache_t  *cache, **ce;</span><br><span class="line"></span><br><span class="line">    cache = ngx_pcalloc(cf-&gt;pool, sizeof(ngx_http_file_cache_t));</span><br><span class="line">    if (cache == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cache-&gt;path = ngx_pcalloc(cf-&gt;pool, sizeof(ngx_path_t));</span><br><span class="line">    if (cache-&gt;path == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    use_temp_path = 1;</span><br><span class="line"></span><br><span class="line">    inactive = 600;</span><br><span class="line"></span><br><span class="line">    loader_files = 100;</span><br><span class="line">    loader_sleep = 50;</span><br><span class="line">    loader_threshold = 200;</span><br><span class="line"></span><br><span class="line">    manager_files = 100;</span><br><span class="line">    manager_sleep = 50;</span><br><span class="line">    manager_threshold = 200;</span><br><span class="line"></span><br><span class="line">    name.len = 0;</span><br><span class="line">    size = 0;</span><br><span class="line">    max_size = NGX_MAX_OFF_T_VALUE;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    cache-&gt;path-&gt;name = value[1];</span><br><span class="line"></span><br><span class="line">    if (cache-&gt;path-&gt;name.data[cache-&gt;path-&gt;name.len - 1] == &apos;/&apos;) &#123;</span><br><span class="line">        cache-&gt;path-&gt;name.len--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ngx_conf_full_name(cf-&gt;cycle, &amp;cache-&gt;path-&gt;name, 0) != NGX_OK) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (i = 2; i &lt; cf-&gt;args-&gt;nelts; i++) &#123;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;levels=&quot;, 7) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            p = value[i].data + 7;</span><br><span class="line">            last = value[i].data + value[i].len;</span><br><span class="line"></span><br><span class="line">            for (n = 0; n &lt; NGX_MAX_PATH_LEVEL &amp;&amp; p &lt; last; n++) &#123;</span><br><span class="line"></span><br><span class="line">                if (*p &gt; &apos;0&apos; &amp;&amp; *p &lt; &apos;3&apos;) &#123;</span><br><span class="line"></span><br><span class="line">                    cache-&gt;path-&gt;level[n] = *p++ - &apos;0&apos;;</span><br><span class="line">                    cache-&gt;path-&gt;len += cache-&gt;path-&gt;level[n] + 1;</span><br><span class="line"></span><br><span class="line">                    if (p == last) &#123;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (*p++ == &apos;:&apos; &amp;&amp; n &lt; NGX_MAX_PATH_LEVEL - 1 &amp;&amp; p &lt; last) &#123;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    goto invalid_levels;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                goto invalid_levels;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (cache-&gt;path-&gt;len &lt; 10 + NGX_MAX_PATH_LEVEL) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        invalid_levels:</span><br><span class="line"></span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                               &quot;invalid \&quot;levels\&quot; \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">            return NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;use_temp_path=&quot;, 14) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            if (ngx_strcmp(&amp;value[i].data[14], &quot;on&quot;) == 0) &#123;</span><br><span class="line">                use_temp_path = 1;</span><br><span class="line"></span><br><span class="line">            &#125; else if (ngx_strcmp(&amp;value[i].data[14], &quot;off&quot;) == 0) &#123;</span><br><span class="line">                use_temp_path = 0;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                                   &quot;invalid use_temp_path value \&quot;%V\&quot;, &quot;</span><br><span class="line">                                   &quot;it must be \&quot;on\&quot; or \&quot;off\&quot;&quot;,</span><br><span class="line">                                   &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;keys_zone=&quot;, 10) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            name.data = value[i].data + 10;</span><br><span class="line"></span><br><span class="line">            p = (u_char *) ngx_strchr(name.data, &apos;:&apos;);</span><br><span class="line"></span><br><span class="line">            if (p == NULL) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                                   &quot;invalid keys zone size \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            name.len = p - name.data;</span><br><span class="line"></span><br><span class="line">            s.data = p + 1;</span><br><span class="line">            s.len = value[i].data + value[i].len - s.data;</span><br><span class="line"></span><br><span class="line">            size = ngx_parse_size(&amp;s);</span><br><span class="line"></span><br><span class="line">            if (size == NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                                   &quot;invalid keys zone size \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (size &lt; (ssize_t) (2 * ngx_pagesize)) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                                   &quot;keys zone \&quot;%V\&quot; is too small&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;inactive=&quot;, 9) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            s.len = value[i].len - 9;</span><br><span class="line">            s.data = value[i].data + 9;</span><br><span class="line"></span><br><span class="line">            inactive = ngx_parse_time(&amp;s, 1);</span><br><span class="line">            if (inactive == (time_t) NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                                   &quot;invalid inactive value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;max_size=&quot;, 9) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            s.len = value[i].len - 9;</span><br><span class="line">            s.data = value[i].data + 9;</span><br><span class="line"></span><br><span class="line">            max_size = ngx_parse_offset(&amp;s);</span><br><span class="line">            if (max_size &lt; 0) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                                   &quot;invalid max_size value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;loader_files=&quot;, 13) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            loader_files = ngx_atoi(value[i].data + 13, value[i].len - 13);</span><br><span class="line">            if (loader_files == NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid loader_files value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;loader_sleep=&quot;, 13) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            s.len = value[i].len - 13;</span><br><span class="line">            s.data = value[i].data + 13;</span><br><span class="line"></span><br><span class="line">            loader_sleep = ngx_parse_time(&amp;s, 0);</span><br><span class="line">            if (loader_sleep == (ngx_msec_t) NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid loader_sleep value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;loader_threshold=&quot;, 17) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            s.len = value[i].len - 17;</span><br><span class="line">            s.data = value[i].data + 17;</span><br><span class="line"></span><br><span class="line">            loader_threshold = ngx_parse_time(&amp;s, 0);</span><br><span class="line">            if (loader_threshold == (ngx_msec_t) NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid loader_threshold value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;manager_files=&quot;, 14) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            manager_files = ngx_atoi(value[i].data + 14, value[i].len - 14);</span><br><span class="line">            if (manager_files == NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid manager_files value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;manager_sleep=&quot;, 14) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            s.len = value[i].len - 14;</span><br><span class="line">            s.data = value[i].data + 14;</span><br><span class="line"></span><br><span class="line">            manager_sleep = ngx_parse_time(&amp;s, 0);</span><br><span class="line">            if (manager_sleep == (ngx_msec_t) NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid manager_sleep value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_strncmp(value[i].data, &quot;manager_threshold=&quot;, 18) == 0) &#123;</span><br><span class="line"></span><br><span class="line">            s.len = value[i].len - 18;</span><br><span class="line">            s.data = value[i].data + 18;</span><br><span class="line"></span><br><span class="line">            manager_threshold = ngx_parse_time(&amp;s, 0);</span><br><span class="line">            if (manager_threshold == (ngx_msec_t) NGX_ERROR) &#123;</span><br><span class="line">                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid manager_threshold value \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">                return NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;invalid parameter \&quot;%V\&quot;&quot;, &amp;value[i]);</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (name.len == 0 || size == 0) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;\&quot;%V\&quot; must have \&quot;keys_zone\&quot; parameter&quot;,</span><br><span class="line">                           &amp;cmd-&gt;name);</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cache-&gt;path-&gt;manager = ngx_http_file_cache_manager;</span><br><span class="line">    cache-&gt;path-&gt;loader = ngx_http_file_cache_loader;</span><br><span class="line">    cache-&gt;path-&gt;data = cache;</span><br><span class="line">    cache-&gt;path-&gt;conf_file = cf-&gt;conf_file-&gt;file.name.data;</span><br><span class="line">    cache-&gt;path-&gt;line = cf-&gt;conf_file-&gt;line;</span><br><span class="line">    cache-&gt;loader_files = loader_files;</span><br><span class="line">    cache-&gt;loader_sleep = loader_sleep;</span><br><span class="line">    cache-&gt;loader_threshold = loader_threshold;</span><br><span class="line">    cache-&gt;manager_files = manager_files;</span><br><span class="line">    cache-&gt;manager_sleep = manager_sleep;</span><br><span class="line">    cache-&gt;manager_threshold = manager_threshold;</span><br><span class="line"></span><br><span class="line">    if (ngx_add_path(cf, &amp;cache-&gt;path) != NGX_OK) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cache-&gt;shm_zone = ngx_shared_memory_add(cf, &amp;name, size, cmd-&gt;post);</span><br><span class="line">    if (cache-&gt;shm_zone == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (cache-&gt;shm_zone-&gt;data) &#123;</span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                           &quot;duplicate zone \&quot;%V\&quot;&quot;, &amp;name);</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cache-&gt;shm_zone-&gt;init = ngx_http_file_cache_init;</span><br><span class="line">    cache-&gt;shm_zone-&gt;data = cache;</span><br><span class="line"></span><br><span class="line">    cache-&gt;use_temp_path = use_temp_path;</span><br><span class="line"></span><br><span class="line">    cache-&gt;inactive = inactive;</span><br><span class="line">    cache-&gt;max_size = max_size;</span><br><span class="line"></span><br><span class="line">    caches = (ngx_array_t *) (confp + cmd-&gt;offset);</span><br><span class="line"></span><br><span class="line">    ce = ngx_array_push(caches);</span><br><span class="line">    if (ce == NULL) &#123;</span><br><span class="line">        return NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *ce = cache;</span><br><span class="line"></span><br><span class="line">    return NGX_CONF_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="2"><li>上述代码中我们只关注inactive，max_size参数解析、cache-&gt;path相关成员赋值以及loader和manager相关的赋值代码，如下所示：</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cache-&gt;path-&gt;manager = ngx_http_file_cache_manager;</span><br><span class="line">cache-&gt;path-&gt;loader = ngx_http_file_cache_loader;</span><br><span class="line">cache-&gt;path-&gt;data = cache;</span><br><span class="line">cache-&gt;path-&gt;conf_file = cf-&gt;conf_file-&gt;file.name.data;</span><br><span class="line">cache-&gt;path-&gt;line = cf-&gt;conf_file-&gt;line;</span><br><span class="line">cache-&gt;loader_files = loader_files;</span><br><span class="line">cache-&gt;loader_sleep = loader_sleep;</span><br><span class="line">cache-&gt;loader_threshold = loader_threshold;</span><br><span class="line">cache-&gt;manager_files = manager_files;</span><br><span class="line">cache-&gt;manager_sleep = manager_sleep;</span><br><span class="line">cache-&gt;manager_threshold = manager_threshold;</span><br><span class="line"></span><br><span class="line">if (ngx_add_path(cf, &amp;cache-&gt;path) != NGX_OK) &#123;</span><br><span class="line">    return NGX_CONF_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cache-&gt;shm_zone = ngx_shared_memory_add(cf, &amp;name, size, cmd-&gt;post);</span><br><span class="line">if (cache-&gt;shm_zone == NULL) &#123;</span><br><span class="line">    return NGX_CONF_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (cache-&gt;shm_zone-&gt;data) &#123;</span><br><span class="line">    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,</span><br><span class="line">                       &quot;duplicate zone \&quot;%V\&quot;&quot;, &amp;name);</span><br><span class="line">    return NGX_CONF_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cache-&gt;shm_zone-&gt;init = ngx_http_file_cache_init;</span><br><span class="line">cache-&gt;shm_zone-&gt;data = cache;</span><br><span class="line"></span><br><span class="line">cache-&gt;use_temp_path = use_temp_path;</span><br><span class="line"></span><br><span class="line">cache-&gt;inactive = inactive;</span><br><span class="line">cache-&gt;max_size = max_size;</span><br><span class="line"></span><br><span class="line">caches = (ngx_array_t *) (confp + cmd-&gt;offset);</span><br><span class="line"></span><br><span class="line">ce = ngx_array_push(caches);</span><br><span class="line">if (ce == NULL) &#123;</span><br><span class="line">    return NGX_CONF_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*ce = cache;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>path结构体初始化完成之后，ngx_add_path函数将配置的路径添加到nginx全局路径管理器后，配置解析完成之后会统一管理，接下来我们来看看几个跟目录相关的回调函数。</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ngx_http_file_cache_manager</span><br><span class="line">ngx_http_file_cache_loader</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>首先来看看ngx_http_file_cache_manager函数的具体实现</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static ngx_msec_t</span><br><span class="line">ngx_http_file_cache_manager(void *data)</span><br><span class="line">&#123;</span><br><span class="line">    ngx_http_file_cache_t  *cache = data;</span><br><span class="line"></span><br><span class="line">    off_t       size;</span><br><span class="line">    time_t      wait;</span><br><span class="line">    ngx_msec_t  elapsed, next;</span><br><span class="line">    ngx_uint_t  count, watermark;</span><br><span class="line"></span><br><span class="line">    cache-&gt;last = ngx_current_msec;</span><br><span class="line">    cache-&gt;files = 0;</span><br><span class="line"></span><br><span class="line">    next = (ngx_msec_t) ngx_http_file_cache_expire(cache) * 1000;</span><br><span class="line"></span><br><span class="line">    if (next == 0) &#123;</span><br><span class="line">        next = cache-&gt;manager_sleep;</span><br><span class="line">        goto done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for ( ;; ) &#123;</span><br><span class="line">        ngx_shmtx_lock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        size = cache-&gt;sh-&gt;size;</span><br><span class="line">        count = cache-&gt;sh-&gt;count;</span><br><span class="line">        watermark = cache-&gt;sh-&gt;watermark;</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_unlock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        ngx_log_debug3(NGX_LOG_DEBUG_HTTP, ngx_cycle-&gt;log, 0,</span><br><span class="line">                       &quot;http file cache size: %O c:%ui w:%i&quot;,</span><br><span class="line">                       size, count, (ngx_int_t) watermark);</span><br><span class="line"></span><br><span class="line">        if (size &lt; cache-&gt;max_size &amp;&amp; count &lt; watermark) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        wait = ngx_http_file_cache_forced_expire(cache);</span><br><span class="line"></span><br><span class="line">        if (wait &gt; 0) &#123;</span><br><span class="line">            next = (ngx_msec_t) wait * 1000;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (ngx_quit || ngx_terminate) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (++cache-&gt;files &gt;= cache-&gt;manager_files) &#123;</span><br><span class="line">            next = cache-&gt;manager_sleep;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_time_update();</span><br><span class="line"></span><br><span class="line">        elapsed = ngx_abs((ngx_msec_int_t) (ngx_current_msec - cache-&gt;last));</span><br><span class="line"></span><br><span class="line">        if (elapsed &gt;= cache-&gt;manager_threshold) &#123;</span><br><span class="line">            next = cache-&gt;manager_sleep;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line"></span><br><span class="line">    elapsed = ngx_abs((ngx_msec_int_t) (ngx_current_msec - cache-&gt;last));</span><br><span class="line"></span><br><span class="line">    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, ngx_cycle-&gt;log, 0,</span><br><span class="line">                   &quot;http file cache manager: %ui e:%M n:%M&quot;,</span><br><span class="line">                   cache-&gt;files, elapsed, next);</span><br><span class="line"></span><br><span class="line">    return next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="5"><li>这个函数主要的功能就是遍历缓存结点数，找出过期结点，并删除，接下来看看ngx_http_file_cache_loader函数实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">static void</span><br><span class="line">ngx_http_file_cache_loader(void *data)</span><br><span class="line">&#123;</span><br><span class="line">    ngx_http_file_cache_t  *cache = data;</span><br><span class="line"></span><br><span class="line">    ngx_tree_ctx_t  tree;</span><br><span class="line"></span><br><span class="line">    if (!cache-&gt;sh-&gt;cold || cache-&gt;sh-&gt;loading) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!ngx_atomic_cmp_set(&amp;cache-&gt;sh-&gt;loading, 0, ngx_pid)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, ngx_cycle-&gt;log, 0,</span><br><span class="line">                   &quot;http file cache loader&quot;);</span><br><span class="line"></span><br><span class="line">    tree.init_handler = NULL;</span><br><span class="line">    tree.file_handler = ngx_http_file_cache_manage_file;</span><br><span class="line">    tree.pre_tree_handler = ngx_http_file_cache_manage_directory;</span><br><span class="line">    tree.post_tree_handler = ngx_http_file_cache_noop;</span><br><span class="line">    tree.spec_handler = ngx_http_file_cache_delete_file;</span><br><span class="line">    tree.data = cache;</span><br><span class="line">    tree.alloc = 0;</span><br><span class="line">    tree.log = ngx_cycle-&gt;log;</span><br><span class="line"></span><br><span class="line">    cache-&gt;last = ngx_current_msec;</span><br><span class="line">    cache-&gt;files = 0;</span><br><span class="line"></span><br><span class="line">    if (ngx_walk_tree(&amp;tree, &amp;cache-&gt;path-&gt;name) == NGX_ABORT) &#123;</span><br><span class="line">        cache-&gt;sh-&gt;loading = 0;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cache-&gt;sh-&gt;cold = 0;</span><br><span class="line">    cache-&gt;sh-&gt;loading = 0;</span><br><span class="line"></span><br><span class="line">    ngx_log_error(NGX_LOG_NOTICE, ngx_cycle-&gt;log, 0,</span><br><span class="line">                  &quot;http file cache: %V %.3fM, bsize: %uz&quot;,</span><br><span class="line">                  &amp;cache-&gt;path-&gt;name,</span><br><span class="line">                  ((double) cache-&gt;sh-&gt;size * cache-&gt;bsize) / (1024 * 1024),</span><br><span class="line">                  cache-&gt;bsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;6. 此函数功能就是绑定回调函数，然后遍历配置的目录，根据目录中不同的对象调用不同的回调函数</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><blockquote><p>以上就是nginx缓存管理的主要代码，总的来说就是在解析配置时设置ngx_path_t结构体的回调函数，cache_manager进程定时启动扫描LRU队列，删除过期结点</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、相关配置&quot;&gt;&lt;a href=&quot;#1、相关配置&quot; class=&quot;headerlink&quot; title=&quot;1、相关配置&quot;&gt;&lt;/a&gt;1、相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的return模块</title>
    <link href="https://weeweetan.github.io/2019/10/12/Nginx%E7%9A%84return%E6%A8%A1%E5%9D%97/"/>
    <id>https://weeweetan.github.io/2019/10/12/Nginx的return模块/</id>
    <published>2019-10-12T06:05:34.000Z</published>
    <updated>2019-10-20T01:49:10.362Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1-相关配置"><a href="#1-相关配置" class="headerlink" title="1 相关配置"></a>1 相关配置</h2><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2 源码解析"></a>2 源码解析</h2><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关配置&quot;&gt;&lt;a href=&quot;#1-相关配置&quot; class=&quot;headerlink&quot; title=&quot;1 相关配置&quot;&gt;&lt;/a&gt;1 相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的geo模块</title>
    <link href="https://weeweetan.github.io/2019/10/12/Nginx%E7%9A%84geo%E6%A8%A1%E5%9D%97/"/>
    <id>https://weeweetan.github.io/2019/10/12/Nginx的geo模块/</id>
    <published>2019-10-12T01:26:55.000Z</published>
    <updated>2019-11-24T10:21:54.104Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1、相关配置"><a href="#1、相关配置" class="headerlink" title="1、相关配置"></a>1、相关配置</h2><blockquote><p>geo模块配置指令如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">geo $remote_addr $var &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p></blockquote><p>详细用法参考<a href="http://nginx.org/en/docs/http/ngx_http_geo_module.html#geo" target="_blank" rel="noopener">nginx官方文档</a></p><h2 id="2、源码详解"><a href="#2、源码详解" class="headerlink" title="2、源码详解"></a>2、源码详解</h2><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、相关配置&quot;&gt;&lt;a href=&quot;#1、相关配置&quot; class=&quot;headerlink&quot; title=&quot;1、相关配置&quot;&gt;&lt;/a&gt;1、相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的map模块</title>
    <link href="https://weeweetan.github.io/2019/10/12/Nginx%E7%9A%84map%E6%A8%A1%E5%9D%97/"/>
    <id>https://weeweetan.github.io/2019/10/12/Nginx的map模块/</id>
    <published>2019-10-12T01:25:27.000Z</published>
    <updated>2019-10-22T01:35:02.366Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1、相关配置"><a href="#1、相关配置" class="headerlink" title="1、相关配置"></a>1、相关配置</h2><h2 id="2、代码详解"><a href="#2、代码详解" class="headerlink" title="2、代码详解"></a>2、代码详解</h2><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、相关配置&quot;&gt;&lt;a href=&quot;#1、相关配置&quot; class=&quot;headerlink&quot; title=&quot;1、相关配置&quot;&gt;&lt;/a&gt;1、相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx变量详解</title>
    <link href="https://weeweetan.github.io/2019/10/12/Nginx%E5%8F%98%E9%87%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2019/10/12/Nginx变量详解/</id>
    <published>2019-10-12T01:19:08.000Z</published>
    <updated>2019-11-23T14:40:32.350Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1、源码解析"><a href="#1、源码解析" class="headerlink" title="1、源码解析"></a>1、源码解析</h2><h3 id="1-1-变量分类"><a href="#1-1-变量分类" class="headerlink" title="1.1 变量分类"></a>1.1 变量分类</h3><blockquote><ol><li>nginx变量分为两种，一种是nginx内置变量，可以通过官方网站查询到的含义，另外一种则是在nginx配置文件中通过set指令设置的变量，首先来看一下nginx的内置变量</li></ol></blockquote><h2 id="2、总结"><a href="#2、总结" class="headerlink" title="2、总结"></a>2、总结</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、源码解析&quot;&gt;&lt;a href=&quot;#1、源码解析&quot; class=&quot;headerlink&quot; title=&quot;1、源码解析&quot;&gt;&lt;/a&gt;1、源
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的轮询算法</title>
    <link href="https://weeweetan.github.io/2019/09/15/Nginx%E7%9A%84%E8%BD%AE%E8%AF%A2%E7%AE%97%E6%B3%95/"/>
    <id>https://weeweetan.github.io/2019/09/15/Nginx的轮询算法/</id>
    <published>2019-09-15T10:27:13.000Z</published>
    <updated>2019-10-09T03:10:52.576Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><blockquote><p>Nginx轮询算法应用于http模块和stream模块的upstream块，根据权重选择相应的服务器进行负载均衡。</p></blockquote><h3 id="1-1、相关配置"><a href="#1-1、相关配置" class="headerlink" title="1.1、相关配置"></a>1.1、相关配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span> weight=<span class="number">10</span>;</span><br><span class="line">        server <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>:<span class="number">8080</span> weight=<span class="number">10</span>;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;若upstream块中没有指定负载均衡算法，则默认使用轮询算法。</span><br></pre></td></tr></table></figure><h2 id="2、算法实现"><a href="#2、算法实现" class="headerlink" title="2、算法实现"></a>2、算法实现</h2><blockquote><p>Nginx中http_upstream_module跟stream_upstream_module模块都使用了轮询算法，这里以stream_upstrean模块为例</p></blockquote><h3 id="2-1、相关结构体"><a href="#2-1、相关结构体" class="headerlink" title="2.1、相关结构体"></a>2.1、相关结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peers_t</span>  *peers;</span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peer_t</span>   *current;</span><br><span class="line">    <span class="keyword">uintptr_t</span>                       *tried;</span><br><span class="line">    <span class="keyword">uintptr_t</span>                        data;                   <span class="comment">//若后端服务器数量小于32，则使用此字段表示各个服务器是否使用</span></span><br><span class="line">&#125; <span class="keyword">ngx_stream_upstream_rr_peer_data_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_stream_upstream_rr_peer_s</span>   <span class="title">ngx_stream_upstream_rr_peer_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_stream_upstream_rr_peer_s</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>                 *<span class="title">sockaddr</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span>                        socklen;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                        name;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                        server;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_int_t</span>                        current_weight;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                        effective_weight;           <span class="comment">//RR算法权重，初始值与weight相同</span></span><br><span class="line">    <span class="keyword">ngx_int_t</span>                        weight;                     <span class="comment">//配置的权重</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       conns;                      <span class="comment">//该后端peer上面的成功连接数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       fails;                      <span class="comment">//已尝试失败次数</span></span><br><span class="line">    <span class="keyword">time_t</span>                           accessed;</span><br><span class="line">    <span class="keyword">time_t</span>                           checked;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       max_fails;</span><br><span class="line">    <span class="keyword">time_t</span>                           fail_timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       down;         <span class="comment">/* unsigned  down:1; */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_STREAM_SSL)</span></span><br><span class="line">    <span class="keyword">void</span>                            *ssl_session;</span><br><span class="line">    <span class="keyword">int</span>                              ssl_session_len;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peer_t</span>   *next;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_STREAM_UPSTREAM_ZONE)</span></span><br><span class="line">    <span class="keyword">ngx_atomic_t</span>                     lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_stream_upstream_rr_peers_s</span>  <span class="title">ngx_stream_upstream_rr_peers_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_stream_upstream_rr_peers_s</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       number;           <span class="comment">//服务器数量  为后端配置了多少个服务器  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_STREAM_UPSTREAM_ZONE)</span></span><br><span class="line">    <span class="keyword">ngx_slab_pool_t</span>                 *shpool;</span><br><span class="line">    <span class="keyword">ngx_atomic_t</span>                     rwlock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       total_weight;        <span class="comment">//所有服务器的权重和</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span>                         single:<span class="number">1</span>;           <span class="comment">//是否只有一个服务器</span></span><br><span class="line">    <span class="keyword">unsigned</span>                         weighted:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_str_t</span>                       *name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peers_t</span>  *next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peer_t</span>   *peer;   <span class="comment">//服务器信息 //所有的peer[]服务器信息通过peers-&gt;peer连接在一起</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上述3个结构体是整个轮询算法的核心，ngx_stream_upstream_rr_peer_data_t结构体保存已经选择过的服务器以及当前选择的服务器，ngx_stream_upstream_rr_peers_t结构体中几个weight成员用来选择服务器。</p></blockquote><h3 id="2-1-初始化ngx-stream-upstream-rr-peer-t结构体"><a href="#2-1-初始化ngx-stream-upstream-rr-peer-t结构体" class="headerlink" title="2.1 初始化ngx_stream_upstream_rr_peer_t结构体"></a>2.1 初始化ngx_stream_upstream_rr_peer_t结构体</h3><blockquote><p>Nginx在解析配置文件时，当解析到upstream块时，会调用ngx_stream_upstream_init_round_robin函数，将配置文件中的server保存在ngx_stream_upstream_rr_peer_t结构体中。接下来看看ngx_stream_upstream_init_round_robin函数定义</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_stream_upstream_init_round_robin(<span class="keyword">ngx_conf_t</span> *cf,</span><br><span class="line">    <span class="keyword">ngx_stream_upstream_srv_conf_t</span> *us)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_url_t</span>                        u;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       i, j, n, w;</span><br><span class="line">    <span class="keyword">ngx_stream_upstream_server_t</span>    *server;</span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peer_t</span>   *peer, **peerp;</span><br><span class="line">    <span class="keyword">ngx_stream_upstream_rr_peers_t</span>  *peers, *backup;<span class="comment">//一个是正常的servers，一个是backup servers</span></span><br><span class="line"></span><br><span class="line">    us-&gt;peer.init = ngx_stream_upstream_init_round_robin_peer;<span class="comment">//upstream中服务器节点的初始化赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (us-&gt;servers) &#123;</span><br><span class="line">        server = us-&gt;servers-&gt;elts;</span><br><span class="line"></span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        w = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; us-&gt;servers-&gt;nelts; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (server[i].backup) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            n += server[i].naddrs;</span><br><span class="line">            w += server[i].naddrs * server[i].weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_EMERG, cf-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                          <span class="string">"no servers in upstream \"%V\" in %s:%ui"</span>,</span><br><span class="line">                          &amp;us-&gt;host, us-&gt;file_name, us-&gt;line);</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peers = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_upstream_rr_peers_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (peers == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peer = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_upstream_rr_peer_t</span>) * n);</span><br><span class="line">        <span class="keyword">if</span> (peer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peers-&gt;single = (n == <span class="number">1</span>);</span><br><span class="line">        peers-&gt;number = n;</span><br><span class="line">        peers-&gt;weighted = (w != n);</span><br><span class="line">        peers-&gt;total_weight = w;</span><br><span class="line">        peers-&gt;name = &amp;us-&gt;host;</span><br><span class="line"></span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        peerp = &amp;peers-&gt;peer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; us-&gt;servers-&gt;nelts; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (server[i].backup) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server[i].naddrs; j++) &#123;</span><br><span class="line">                peer[n].sockaddr = server[i].addrs[j].sockaddr;</span><br><span class="line">                peer[n].socklen = server[i].addrs[j].socklen;</span><br><span class="line">                peer[n].name = server[i].addrs[j].name;</span><br><span class="line">                peer[n].weight = server[i].weight;</span><br><span class="line">                peer[n].effective_weight = server[i].weight;</span><br><span class="line">                peer[n].current_weight = <span class="number">0</span>;</span><br><span class="line">                peer[n].max_fails = server[i].max_fails;</span><br><span class="line">                peer[n].fail_timeout = server[i].fail_timeout;</span><br><span class="line">                peer[n].down = server[i].down;</span><br><span class="line">                peer[n].server = server[i].name;</span><br><span class="line"></span><br><span class="line">                *peerp = &amp;peer[n];</span><br><span class="line">                peerp = &amp;peer[n].next;</span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        us-&gt;peer.data = peers;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* backup servers */</span></span><br><span class="line"></span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        w = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; us-&gt;servers-&gt;nelts; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!server[i].backup) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            n += server[i].naddrs;</span><br><span class="line">            w += server[i].naddrs * server[i].weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        backup = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_upstream_rr_peers_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (backup == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peer = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_upstream_rr_peer_t</span>) * n);</span><br><span class="line">        <span class="keyword">if</span> (peer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peers-&gt;single = <span class="number">0</span>;</span><br><span class="line">        backup-&gt;single = <span class="number">0</span>;</span><br><span class="line">        backup-&gt;number = n;</span><br><span class="line">        backup-&gt;weighted = (w != n);</span><br><span class="line">        backup-&gt;total_weight = w;</span><br><span class="line">        backup-&gt;name = &amp;us-&gt;host;</span><br><span class="line"></span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        peerp = &amp;backup-&gt;peer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; us-&gt;servers-&gt;nelts; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!server[i].backup) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server[i].naddrs; j++) &#123;</span><br><span class="line">                peer[n].sockaddr = server[i].addrs[j].sockaddr;</span><br><span class="line">                peer[n].socklen = server[i].addrs[j].socklen;</span><br><span class="line">                peer[n].name = server[i].addrs[j].name;</span><br><span class="line">                peer[n].weight = server[i].weight;</span><br><span class="line">                peer[n].effective_weight = server[i].weight;</span><br><span class="line">                peer[n].current_weight = <span class="number">0</span>;</span><br><span class="line">                peer[n].max_fails = server[i].max_fails;</span><br><span class="line">                peer[n].fail_timeout = server[i].fail_timeout;</span><br><span class="line">                peer[n].down = server[i].down;</span><br><span class="line">                peer[n].server = server[i].name;</span><br><span class="line"></span><br><span class="line">                *peerp = &amp;peer[n];</span><br><span class="line">                peerp = &amp;peer[n].next;</span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peers-&gt;next = backup;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NGX_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* an upstream implicitly defined by proxy_pass, etc. */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (us-&gt;port == <span class="number">0</span>) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_EMERG, cf-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"no port in upstream \"%V\" in %s:%ui"</span>,</span><br><span class="line">                      &amp;us-&gt;host, us-&gt;file_name, us-&gt;line);</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;u, <span class="keyword">sizeof</span>(<span class="keyword">ngx_url_t</span>));</span><br><span class="line"></span><br><span class="line">    u.host = us-&gt;host;</span><br><span class="line">    u.port = us-&gt;port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_inet_resolve_host(cf-&gt;pool, &amp;u) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u.err) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_EMERG, cf-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                          <span class="string">"%s in upstream \"%V\" in %s:%ui"</span>,</span><br><span class="line">                          u.err, &amp;us-&gt;host, us-&gt;file_name, us-&gt;line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = u.naddrs;</span><br><span class="line"></span><br><span class="line">    peers = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_upstream_rr_peers_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (peers == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    peer = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_stream_upstream_rr_peer_t</span>) * n);</span><br><span class="line">    <span class="keyword">if</span> (peer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    peers-&gt;single = (n == <span class="number">1</span>);</span><br><span class="line">    peers-&gt;number = n;</span><br><span class="line">    peers-&gt;weighted = <span class="number">0</span>;</span><br><span class="line">    peers-&gt;total_weight = n;</span><br><span class="line">    peers-&gt;name = &amp;us-&gt;host;</span><br><span class="line"></span><br><span class="line">    peerp = &amp;peers-&gt;peer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; u.naddrs; i++) &#123;</span><br><span class="line">        peer[i].sockaddr = u.addrs[i].sockaddr;</span><br><span class="line">        peer[i].socklen = u.addrs[i].socklen;</span><br><span class="line">        peer[i].name = u.addrs[i].name;</span><br><span class="line">        peer[i].weight = <span class="number">1</span>;</span><br><span class="line">        peer[i].effective_weight = <span class="number">1</span>;</span><br><span class="line">        peer[i].current_weight = <span class="number">0</span>;</span><br><span class="line">        peer[i].max_fails = <span class="number">1</span>;</span><br><span class="line">        peer[i].fail_timeout = <span class="number">10</span>;</span><br><span class="line">        *peerp = &amp;peer[i];</span><br><span class="line">        peerp = &amp;peer[i].next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    us-&gt;peer.data = peers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* implicitly defined upstream has no backup servers */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="number">1.</span> 如果没有指定其他负载均衡算法，则此函数在配置解析阶段执行，由ngx_stream_upstream_init_main_conf函数调用执行。</span><br><span class="line">&gt;<span class="number">2.</span> 将配置中的后端服务器使用peer连接起来，对backup服务器采取同样的操作。</span><br></pre></td></tr></table></figure><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h2&gt;
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx链接自定义静态库</title>
    <link href="https://weeweetan.github.io/2019/08/13/Nginx%E9%93%BE%E6%8E%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9D%99%E6%80%81%E5%BA%93/"/>
    <id>https://weeweetan.github.io/2019/08/13/Nginx链接自定义静态库/</id>
    <published>2019-08-13T02:06:23.000Z</published>
    <updated>2019-08-30T07:27:44.819Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1-准备静态库"><a href="#1-准备静态库" class="headerlink" title="1.准备静态库"></a>1.准备静态库</h2><h3 id="1-1-编译静态库"><a href="#1-1-编译静态库" class="headerlink" title="1.1 编译静态库"></a>1.1 编译静态库</h3><blockquote><p>使用gcc将源代码编译为目标文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gcc -c test.c</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>-c选项只编译不链接，生成目标对象文件，编译成功会生成test.o文件，接着对test.o文件进行打包</p></blockquote><h3 id="1-2-打包静态库"><a href="#1-2-打包静态库" class="headerlink" title="1.2 打包静态库"></a>1.2 打包静态库</h3><blockquote><p>使用ar命令将test.o打包为静态库文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ar -crv libtest.a test.o</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在定义静态库文件文件名时，需要遵从命名规则。</p></blockquote><h2 id="2-配置静态库"><a href="#2-配置静态库" class="headerlink" title="2.配置静态库"></a>2.配置静态库</h2><blockquote><p>将生成的libtest.a 复制到/usr/lib64目录下，如有头文件，则复制到/usr/include目录下</p></blockquote><h2 id="3-修改Nginx编译脚本"><a href="#3-修改Nginx编译脚本" class="headerlink" title="3.修改Nginx编译脚本"></a>3.修改Nginx编译脚本</h2><blockquote><p>在auto/unix脚本中修改变量CORE_LIBS的值</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CORE_LIBS ="$CORE_LIBS -ltest"</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-使用第三方开发库"><a href="#4-使用第三方开发库" class="headerlink" title="4. 使用第三方开发库"></a>4. 使用第三方开发库</h2><h3 id="4-1-安装第三方开发库"><a href="#4-1-安装第三方开发库" class="headerlink" title="4.1 安装第三方开发库"></a>4.1 安装第三方开发库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum -y install xxx xxx-devel</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>安装成功后，在/usr/include/目录下能找到相应的头文件，在/usr/lib64/目录下能找到类似于libxxx.so的文件</p></blockquote><h3 id="4-2-在源码中包含第三方库的头文件，就可以使用相应的函数了"><a href="#4-2-在源码中包含第三方库的头文件，就可以使用相应的函数了" class="headerlink" title="4.2 在源码中包含第三方库的头文件，就可以使用相应的函数了"></a>4.2 在源码中包含第三方库的头文件，就可以使用相应的函数了</h3><h3 id="4-3-修改Nginx编译脚本"><a href="#4-3-修改Nginx编译脚本" class="headerlink" title="4.3 修改Nginx编译脚本"></a>4.3 修改Nginx编译脚本</h3><blockquote><p>在auto/unix脚本中修改变量CORE_LIBS的值</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CORE_LIBS ="$CORE_LIBS -lxxx"</span><br><span class="line"></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-准备静态库&quot;&gt;&lt;a href=&quot;#1-准备静态库&quot; class=&quot;headerlink&quot; title=&quot;1.准备静态库&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的rewrite模块详解</title>
    <link href="https://weeweetan.github.io/2019/08/09/Nginx%E7%9A%84rewrite%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2019/08/09/Nginx的rewrite模块详解/</id>
    <published>2019-08-09T06:06:55.000Z</published>
    <updated>2019-09-01T13:47:08.189Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1-相关指令"><a href="#1-相关指令" class="headerlink" title="1.相关指令"></a>1.相关指令</h2><h3 id="1-1-if指令"><a href="#1-1-if指令" class="headerlink" title="1.1 if指令"></a>1.1 if指令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Context: server, location</span><br></pre></td></tr></table></figure><blockquote><p>依据指定的条件决定是否执行 if 块语句中的内容</p></blockquote><h3 id="1-2-break指令"><a href="#1-2-break指令" class="headerlink" title="1.2 break指令"></a>1.2 break指令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Context: server, location, <span class="keyword">if</span></span><br></pre></td></tr></table></figure><blockquote><p>停止执行 ngx_http_rewrite_module 的指令集，但是其他模块指令是不受影响的</p></blockquote><h3 id="1-3-rewrite指令"><a href="#1-3-rewrite指令" class="headerlink" title="1.3 rewrite指令"></a>1.3 rewrite指令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Context: server, location, <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line">rewrite regex replacement [flag];</span><br></pre></td></tr></table></figure><blockquote><p>rewrite 指令是使用指定的正则表达式regex来匹配请求的urI，如果匹配成功，则使用replacement更改URI。rewrite指令按照它们在配置文件中出现的顺序执行。可以使用flag标志来终止指令的进一步处理。如果替换字符串replacement以http：//，https：//或$scheme开头，则停止处理后续内容，并直接重定向返回给客户端。</p></blockquote><h3 id="1-4-return指令"><a href="#1-4-return指令" class="headerlink" title="1.4 return指令"></a>1.4 return指令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Context: server, location, <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> code [text];</span><br><span class="line"><span class="keyword">return</span> code URL;</span><br><span class="line"><span class="keyword">return</span> URL;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>停止处理并将指定的code码返回给客户端。 非标准code码 444 关闭连接而不发送响应报头</p></blockquote><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2.源码解析"></a>2.源码解析</h2><h3 id="2-1-rewrite指令源码解析"><a href="#2-1-rewrite指令源码解析" class="headerlink" title="2.1 rewrite指令源码解析"></a>2.1 rewrite指令源码解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_rewrite(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span>  *lcf = conf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_str_t</span>                         *value;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                         last;</span><br><span class="line">    <span class="keyword">ngx_regex_compile_t</span>                rc;</span><br><span class="line">    ngx_http_script_code_pt           *code;</span><br><span class="line">    <span class="keyword">ngx_http_script_compile_t</span>          sc;</span><br><span class="line">    <span class="keyword">ngx_http_script_regex_code_t</span>      *regex;</span><br><span class="line">    <span class="keyword">ngx_http_script_regex_end_code_t</span>  *regex_end;</span><br><span class="line">    u_char                             errstr[NGX_MAX_CONF_ERRSTR];</span><br><span class="line"></span><br><span class="line">    regex = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes,</span><br><span class="line">                                       <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_regex_code_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (regex == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(regex, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_regex_code_t</span>));</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;rc, <span class="keyword">sizeof</span>(<span class="keyword">ngx_regex_compile_t</span>));</span><br><span class="line"></span><br><span class="line">    rc.pattern = value[<span class="number">1</span>];</span><br><span class="line">    rc.err.len = NGX_MAX_CONF_ERRSTR;</span><br><span class="line">    rc.err.data = errstr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> NGX_REGEX_CASELESS */</span></span><br><span class="line">    <span class="comment">//解析正则表达式，填写ngx_http_regex_t结构并返回。正则句柄，命名子模式等都在里面了。</span></span><br><span class="line">    regex-&gt;regex = ngx_http_regex_compile(cf, &amp;rc);</span><br><span class="line">    <span class="keyword">if</span> (regex-&gt;regex == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将其设置为第一个code函数，求出目标字符串大小。尾部还有ngx_http_script_regex_end_code</span></span><br><span class="line">    regex-&gt;code = ngx_http_script_regex_start_code;</span><br><span class="line">    regex-&gt;uri = <span class="number">1</span>;</span><br><span class="line">    regex-&gt;name = value[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value[<span class="number">2</span>].data[value[<span class="number">2</span>].len - <span class="number">1</span>] == <span class="string">'?'</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* the last "?" drops the original arguments */</span></span><br><span class="line">        value[<span class="number">2</span>].len--;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        regex-&gt;add_args = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    last = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_strncmp(value[<span class="number">2</span>].data, <span class="string">"http://"</span>, <span class="keyword">sizeof</span>(<span class="string">"http://"</span>) - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line">        || ngx_strncmp(value[<span class="number">2</span>].data, <span class="string">"https://"</span>, <span class="keyword">sizeof</span>(<span class="string">"https://"</span>) - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line">        || ngx_strncmp(value[<span class="number">2</span>].data, <span class="string">"$scheme"</span>, <span class="keyword">sizeof</span>(<span class="string">"$scheme"</span>) - <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        regex-&gt;status = NGX_HTTP_MOVED_TEMPORARILY;</span><br><span class="line">        regex-&gt;redirect = <span class="number">1</span>;</span><br><span class="line">        last = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cf-&gt;args-&gt;nelts == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">3</span>].data, <span class="string">"last"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            last = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">3</span>].data, <span class="string">"break"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            regex-&gt;break_cycle = <span class="number">1</span>;</span><br><span class="line">            last = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">3</span>].data, <span class="string">"redirect"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            regex-&gt;status = NGX_HTTP_MOVED_TEMPORARILY;</span><br><span class="line">            regex-&gt;redirect = <span class="number">1</span>;</span><br><span class="line">            last = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ngx_strcmp(value[<span class="number">3</span>].data, <span class="string">"permanent"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            regex-&gt;status = NGX_HTTP_MOVED_PERMANENTLY;</span><br><span class="line">            regex-&gt;redirect = <span class="number">1</span>;</span><br><span class="line">            last = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"invalid parameter \"%V\""</span>, &amp;value[<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;sc, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_compile_t</span>));</span><br><span class="line"></span><br><span class="line">    sc.cf = cf;</span><br><span class="line">    sc.source = &amp;value[<span class="number">2</span>];</span><br><span class="line">    sc.lengths = &amp;regex-&gt;lengths;</span><br><span class="line">    sc.values = &amp;lcf-&gt;codes;</span><br><span class="line">    sc.variables = ngx_http_script_variables_count(&amp;value[<span class="number">2</span>]);</span><br><span class="line">    sc.main = regex;</span><br><span class="line">    sc.complete_lengths = <span class="number">1</span>;</span><br><span class="line">    sc.compile_args = !regex-&gt;redirect;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_script_compile(&amp;sc) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regex = sc.main;</span><br><span class="line"></span><br><span class="line">    regex-&gt;size = sc.size;</span><br><span class="line">    regex-&gt;args = sc.args;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sc.variables == <span class="number">0</span> &amp;&amp; !sc.dup_capture) &#123;</span><br><span class="line">        regex-&gt;lengths = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regex_end = ngx_http_script_add_code(lcf-&gt;codes,</span><br><span class="line">                                      <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_regex_end_code_t</span>),</span><br><span class="line">                                      &amp;regex);</span><br><span class="line">    <span class="keyword">if</span> (regex_end == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regex_end-&gt;code = ngx_http_script_regex_end_code;   <span class="comment">//结束回调，对应前面的开始。</span></span><br><span class="line">    regex_end-&gt;uri = regex-&gt;uri;</span><br><span class="line">    regex_end-&gt;args = regex-&gt;args;</span><br><span class="line">    regex_end-&gt;add_args = regex-&gt;add_args;</span><br><span class="line">    regex_end-&gt;redirect = regex-&gt;redirect;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (last) &#123;</span><br><span class="line">        code = ngx_http_script_add_code(lcf-&gt;codes, <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>), &amp;regex);</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        *code = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下一个解析句柄组的地址。如果匹配失败，则会直接跳过该regex匹配相关的所有code</span></span><br><span class="line">    regex-&gt;next = (u_char *) lcf-&gt;codes-&gt;elts + lcf-&gt;codes-&gt;nelts</span><br><span class="line">                                              - (u_char *) regex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-return指令源码解析"><a href="#2-2-return指令源码解析" class="headerlink" title="2.2 return指令源码解析"></a>2.2 return指令源码解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_rewrite_return(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span>  *lcf = conf;</span><br><span class="line"></span><br><span class="line">    u_char                            *p;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                         *value, *v;</span><br><span class="line">    <span class="keyword">ngx_http_script_return_code_t</span>     *ret;</span><br><span class="line">    <span class="keyword">ngx_http_compile_complex_value_t</span>   ccv;</span><br><span class="line"></span><br><span class="line">    ret = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes,</span><br><span class="line">                                     <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_return_code_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(ret, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_return_code_t</span>));</span><br><span class="line">    <span class="comment">//注册code为ngx_http_script_return_code</span></span><br><span class="line">    ret-&gt;code = ngx_http_script_return_code;</span><br><span class="line"></span><br><span class="line">    p = value[<span class="number">1</span>].data;</span><br><span class="line"></span><br><span class="line">    ret-&gt;status = ngx_atoi(p, value[<span class="number">1</span>].len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret-&gt;status == (<span class="keyword">uintptr_t</span>) NGX_ERROR) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cf-&gt;args-&gt;nelts == <span class="number">2</span></span><br><span class="line">            &amp;&amp; (ngx_strncmp(p, <span class="string">"http://"</span>, <span class="keyword">sizeof</span>(<span class="string">"http://"</span>) - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line">                || ngx_strncmp(p, <span class="string">"https://"</span>, <span class="keyword">sizeof</span>(<span class="string">"https://"</span>) - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line">                || ngx_strncmp(p, <span class="string">"$scheme"</span>, <span class="keyword">sizeof</span>(<span class="string">"$scheme"</span>) - <span class="number">1</span>) == <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            ret-&gt;status = NGX_HTTP_MOVED_TEMPORARILY;</span><br><span class="line">            v = &amp;value[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"invalid return code \"%V\""</span>, &amp;value[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ret-&gt;status &gt; <span class="number">999</span>) &#123;</span><br><span class="line">            ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                               <span class="string">"invalid return code \"%V\""</span>, &amp;value[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cf-&gt;args-&gt;nelts == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        v = &amp;value[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;ccv, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_compile_complex_value_t</span>));</span><br><span class="line"></span><br><span class="line">    ccv.cf = cf;</span><br><span class="line">    ccv.value = v;</span><br><span class="line">    ccv.complex_value = &amp;ret-&gt;text;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_compile_complex_value(&amp;ccv) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-break指令源码解析"><a href="#2-3-break指令源码解析" class="headerlink" title="2.3 break指令源码解析"></a>2.3 break指令源码解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_rewrite_break(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span> *lcf = conf;</span><br><span class="line"></span><br><span class="line">    ngx_http_script_code_pt  *code;</span><br><span class="line"></span><br><span class="line">    code = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes, <span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (code == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *code = ngx_http_script_break_code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>配合ngx_http_rewrite_handler读代码，可以看到如果设置一个code节点到codes数组，那么在ngx_http_rewrite_handler的for循环执行到该节点code的时候，就会把e-&gt;ip置为NULL，这样就直接退出while (<em>(uintptr_t </em>) e-&gt;ip){}循环</p></blockquote><h3 id="2-4-if指令源码解析"><a href="#2-4-if指令源码解析" class="headerlink" title="2.4 if指令源码解析"></a>2.4 if指令源码解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> * </span><br><span class="line">ngx_http_rewrite_if(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span>  *lcf = conf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span>                         *mconf;</span><br><span class="line">    <span class="keyword">char</span>                         *rv;</span><br><span class="line">    u_char                       *elts;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                    i;</span><br><span class="line">    <span class="keyword">ngx_conf_t</span>                    save;</span><br><span class="line">    <span class="keyword">ngx_http_module_t</span>            *<span class="keyword">module</span>;</span><br><span class="line">    <span class="keyword">ngx_http_conf_ctx_t</span>          *ctx, *pctx;</span><br><span class="line">    <span class="keyword">ngx_http_core_loc_conf_t</span>     *clcf, *pclcf;</span><br><span class="line">    <span class="keyword">ngx_http_script_if_code_t</span>    *if_code;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span>  *nlcf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//if的解析过程和location&#123;&#125;解析过程差不多,也有ctx</span></span><br><span class="line">    ctx = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_conf_ctx_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pctx = cf-&gt;ctx; <span class="comment">//父块&#123;&#125;的上下文ctx</span></span><br><span class="line">    ctx-&gt;main_conf = pctx-&gt;main_conf;</span><br><span class="line">    ctx-&gt;srv_conf = pctx-&gt;srv_conf;</span><br><span class="line"></span><br><span class="line">    ctx-&gt;loc_conf = ngx_pcalloc(cf-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">void</span> *) * ngx_http_max_module);</span><br><span class="line">    <span class="keyword">if</span> (ctx-&gt;loc_conf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; ngx_modules[i]; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ngx_modules[i]-&gt;type != NGX_HTTP_MODULE) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = ngx_modules[i]-&gt;ctx;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;create_loc_conf) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">               在解析if时， nginx会把它当做一个location来对待的，并且它的location type为noname。通过ngx_http_add_location将该“location”添</span></span><br><span class="line"><span class="comment">               加到上层的locations中。这里将if看做location自然有它的合理性，因为if的配置也是需要进行url匹配的。</span></span><br><span class="line"><span class="comment">               */</span></span><br><span class="line">            mconf = <span class="keyword">module</span>-&gt;create_loc_conf(cf);</span><br><span class="line">            <span class="keyword">if</span> (mconf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                 <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ctx-&gt;loc_conf[ngx_modules[i]-&gt;ctx_index] = mconf;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pclcf = pctx-&gt;loc_conf[ngx_http_core_module.ctx_index];<span class="comment">//该if&#123;&#125;所在location&#123;&#125;的配置信息</span></span><br><span class="line"></span><br><span class="line">    clcf = ctx-&gt;loc_conf[ngx_http_core_module.ctx_index]; <span class="comment">//if&#123;&#125;的配置信息</span></span><br><span class="line">    clcf-&gt;loc_conf = ctx-&gt;loc_conf;</span><br><span class="line">    clcf-&gt;name = pclcf-&gt;name;</span><br><span class="line">    clcf-&gt;noname = <span class="number">1</span>; <span class="comment">//if配置被作为location的noname形式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_add_location(cf, &amp;pclcf-&gt;locations, clcf) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_rewrite_if_condition(cf, lcf) != NGX_CONF_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if_code = ngx_array_push_n(lcf-&gt;codes, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_if_code_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (if_code == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if_code-&gt;code = ngx_http_script_if_code;</span><br><span class="line"></span><br><span class="line">    elts = lcf-&gt;codes-&gt;elts;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the inner directives must be compiled to the same code array */</span></span><br><span class="line"></span><br><span class="line">    nlcf = ctx-&gt;loc_conf[ngx_http_rewrite_module.ctx_index];</span><br><span class="line">    nlcf-&gt;codes = lcf-&gt;codes;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    save = *cf;</span><br><span class="line">    cf-&gt;ctx = ctx;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pclcf-&gt;name.len == <span class="number">0</span>) &#123;</span><br><span class="line">        if_code-&gt;loc_conf = <span class="literal">NULL</span>;</span><br><span class="line">        cf-&gt;cmd_type = NGX_HTTP_SIF_CONF;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        if_code-&gt;loc_conf = ctx-&gt;loc_conf;</span><br><span class="line">        cf-&gt;cmd_type = NGX_HTTP_LIF_CONF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rv = ngx_conf_parse(cf, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    *cf = save;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rv != NGX_CONF_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> rv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (elts != lcf-&gt;codes-&gt;elts) &#123;</span><br><span class="line">        if_code = (<span class="keyword">ngx_http_script_if_code_t</span> *)</span><br><span class="line">                   ((u_char *) if_code + ((u_char *) lcf-&gt;codes-&gt;elts - elts));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if_code-&gt;next = (u_char *) lcf-&gt;codes-&gt;elts + lcf-&gt;codes-&gt;nelts</span><br><span class="line">                                                - (u_char *) if_code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the code array belong to parent block */</span></span><br><span class="line"></span><br><span class="line">    nlcf-&gt;codes = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-set指令源码解析"><a href="#2-5-set指令源码解析" class="headerlink" title="2.5 set指令源码解析"></a>2.5 set指令源码解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*Syntax:set $variable value</span></span><br><span class="line"><span class="comment">1. 将$variable加入到变量系统中，cmcf-&gt;variables_keys-&gt;keys和cmcf-&gt;variables。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a. 如果value是简单字符串，那么解析之后，lcf-&gt;codes就会追加这样的到后面: </span></span><br><span class="line"><span class="comment">ngx_http_script_value_code  直接简单字符串指向一下就行，都不用拷贝了。</span></span><br><span class="line"><span class="comment">b. 如果value是复杂的包含变量的串，那么lcf-&gt;codes就会追加如下的进去 :</span></span><br><span class="line"><span class="comment">ngx_http_script_complex_value_code  调用lengths的lcode获取组合字符串的总长度，并且申请内存</span></span><br><span class="line"><span class="comment">lengths</span></span><br><span class="line"><span class="comment">values，这里根据表达式的不同而不同。 分别将value代表的复杂表达式拆分成语法单元，进行一个个求值，并合并在一起。</span></span><br><span class="line"><span class="comment">ngx_http_script_set_var_code负责将上述合并出的最终结果设置到variables[]数组中去。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_rewrite_set(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_http_rewrite_loc_conf_t</span>  *lcf = conf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_int_t</span>                            index;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                           *value;</span><br><span class="line">    <span class="keyword">ngx_http_variable_t</span>                 *v;</span><br><span class="line">    <span class="keyword">ngx_http_script_var_code_t</span>          *vcode;</span><br><span class="line">    <span class="keyword">ngx_http_script_var_handler_code_t</span>  *vhcode;</span><br><span class="line"></span><br><span class="line">    value = cf-&gt;args-&gt;elts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value[<span class="number">1</span>].data[<span class="number">0</span>] != <span class="string">'$'</span>) &#123;<span class="comment">//变量必须以$开头</span></span><br><span class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"invalid variable name \"%V\""</span>, &amp;value[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value[<span class="number">1</span>].len--;</span><br><span class="line">    value[<span class="number">1</span>].data++;</span><br><span class="line">    <span class="comment">//下面根据这个变量名，将其加入到cmcf-&gt;variables_keys-&gt;keys里面。</span></span><br><span class="line">    v = ngx_http_add_variable(cf, &amp;value[<span class="number">1</span>], NGX_HTTP_VAR_CHANGEABLE);</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将其加入到cmcf-&gt;variables里面，并返回其下标</span></span><br><span class="line">    index = ngx_http_get_variable_index(cf, &amp;value[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (index == NGX_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set $variable value中的第一个参数$variable对应的在这里或者ngx_http_variables_init_vars设置ngx_http_variable_t的get_handler和data成员</span></span><br><span class="line">    <span class="keyword">if</span> (v-&gt;get_handler == <span class="literal">NULL</span></span><br><span class="line">        &amp;&amp; ngx_strncasecmp(value[<span class="number">1</span>].data, (u_char *) <span class="string">"http_"</span>, <span class="number">5</span>) != <span class="number">0</span></span><br><span class="line">        &amp;&amp; ngx_strncasecmp(value[<span class="number">1</span>].data, (u_char *) <span class="string">"sent_http_"</span>, <span class="number">10</span>) != <span class="number">0</span></span><br><span class="line">        &amp;&amp; ngx_strncasecmp(value[<span class="number">1</span>].data, (u_char *) <span class="string">"upstream_http_"</span>, <span class="number">14</span>) != <span class="number">0</span></span><br><span class="line">        &amp;&amp; ngx_strncasecmp(value[<span class="number">1</span>].data, (u_char *) <span class="string">"cookie_"</span>, <span class="number">7</span>) != <span class="number">0</span></span><br><span class="line">        &amp;&amp; ngx_strncasecmp(value[<span class="number">1</span>].data, (u_char *) <span class="string">"upstream_cookie_"</span>, <span class="number">16</span>)</span><br><span class="line">           != <span class="number">0</span></span><br><span class="line">        &amp;&amp; ngx_strncasecmp(value[<span class="number">1</span>].data, (u_char *) <span class="string">"arg_"</span>, <span class="number">4</span>) != <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//如果变量名称不是以上开头，则其get_handler为ngx_http_rewrite_var，data为index 。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//设置一个默认的handler。在ngx_http_variables_init_vars里面其实是会将上面这些"http_" "sent_http_"这些变量get_hendler的</span></span><br><span class="line">        v-&gt;get_handler = ngx_http_rewrite_var;</span><br><span class="line">        v-&gt;data = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    脚本引擎是一系列的凹调函数以及相关数据（它们被组织成ngx_httpscript_ xxx_codet这样的结构体，代表各种不同功能的操</span></span><br><span class="line"><span class="comment">作步骤），被保存在变量lcf-&gt;codes数组内，而ngx_httprewrite_loc_conf_t类型变量Icf是与当前location相关联的，所以这个脚本引擎只有</span></span><br><span class="line"><span class="comment">当客户端请求访问当前这个location时才会被启动执行。如下配置中，“set $file t_a;”构建的脚本引擎只有当客户端请求访问/t日录时才会</span></span><br><span class="line"><span class="comment">被触发，如果当客户端请求访问根目录时则与它毫无关系。</span></span><br><span class="line"><span class="comment">       location / &#123;</span></span><br><span class="line"><span class="comment">root web;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">       location /t &#123;</span></span><br><span class="line"><span class="comment">set $file t_a;</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//ngx_http_rewrite_handler中会移除执行lcf-&gt;codes数组中的各个ngx_http_script_xxx_code_t-&gt;code函数，</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//set $variable value的value参数在这里处理 ,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    从下面可以看出没set一次就会创建一个ngx_http_script_var_code_t和ngx_http_script_xxx_value_code_t但是如果连续多次设置同样的</span></span><br><span class="line"><span class="comment">    变量不同的值，那么就会有多个var_code_t和value_code_t对，实际上在ngx_http_rewrite_handler变量执行的时候，以最后面的为准，例如:</span></span><br><span class="line"><span class="comment">    50：    location / &#123;</span></span><br><span class="line"><span class="comment">    51：        root    web;</span></span><br><span class="line"><span class="comment">    52:         set $file indexl.html;</span></span><br><span class="line"><span class="comment">    53：        index $file;</span></span><br><span class="line"><span class="comment">    54：</span></span><br><span class="line"><span class="comment">    65:         set $file  index2.html;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">    上面的例子追踪访问到的是index2.html</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果set $variable value中的value是普通字符串，则下面的ngx_http_rewrite_value从ngx_http_rewrite_loc_conf_t-&gt;codes数组中获取ngx_http_script_value_code_t空间，紧接着在后面的</span></span><br><span class="line"><span class="comment">ngx_http_script_start_code函数同样从ngx_http_rewrite_loc_conf_t-&gt;codes数组中获取ngx_http_script_var_code_t空间，因此在codes数组中</span></span><br><span class="line"><span class="comment">存放变量值value的ngx_http_script_value_code_t空间与存放var变量名的ngx_http_script_var_code_t在空间上是靠着的，图形化见&lt;深入剖析nginx 图8-4&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     如果set $variable value中的value是变量名，则下面的ngx_http_rewrite_value从ngx_http_rewrite_loc_conf_t-&gt;codes数组中获取ngx_http_script_complex_value_code_t空间，紧接着在后面的</span></span><br><span class="line"><span class="comment"> ngx_http_script_start_code函数同样从ngx_http_rewrite_loc_conf_t-&gt;codes数组中获取ngx_http_script_complex_value_code_t空间，因此在codes数组中</span></span><br><span class="line"><span class="comment"> 存放变量值value的ngx_http_script_value_code_t空间与存放var变量名的ngx_http_script_var_code_t在空间上是靠着的，图形化见&lt;深入剖析nginx 图8-4&gt;</span></span><br><span class="line"><span class="comment">     */</span><span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_rewrite_value(cf, lcf, &amp;value[<span class="number">2</span>]) != NGX_CONF_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v-&gt;set_handler) &#123;</span><br><span class="line">        vhcode = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes,</span><br><span class="line">                                   <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_var_handler_code_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (vhcode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vhcode-&gt;code = ngx_http_script_var_set_handler_code;</span><br><span class="line">        vhcode-&gt;handler = v-&gt;set_handler;</span><br><span class="line">        vhcode-&gt;data = v-&gt;data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vcode = ngx_http_script_start_code(cf-&gt;pool, &amp;lcf-&gt;codes,</span><br><span class="line">                                       <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_script_var_code_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (vcode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vcode-&gt;code = ngx_http_script_set_var_code;</span><br><span class="line">    vcode-&gt;index = (<span class="keyword">uintptr_t</span>) index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_CONF_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关指令&quot;&gt;&lt;a href=&quot;#1-相关指令&quot; class=&quot;headerlink&quot; title=&quot;1.相关指令&quot;&gt;&lt;/a&gt;1.相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的upstream模块</title>
    <link href="https://weeweetan.github.io/2019/07/16/Nginx%E7%9A%84upstream%E6%A8%A1%E5%9D%97/"/>
    <id>https://weeweetan.github.io/2019/07/16/Nginx的upstream模块/</id>
    <published>2019-07-16T14:58:54.000Z</published>
    <updated>2019-08-06T08:28:20.806Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1-相关配置"><a href="#1-相关配置" class="headerlink" title="1.相关配置"></a>1.相关配置</h2><blockquote><p>upstream模块的典型应用是反向代理，这里就以ngx_http_proxy_module模块为例。假定我们有如下这样的实例环境，客户端对服务器80端口的请求都被Nginx Proxy Server转发到另外两个真实的Nginx Web Server实例上进行处理（下图是实验环境，Web Server和Proxy Server都只是Nginx进程，并且运行在同一台服务器）：<br><img src="/images/2019-07-16_nginx_upstream_1.png" alt><br>那么，Nginx Proxy Server的核心配置多半是这样：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">Filename : nginx.conf</span><br><span class="line">…</span><br><span class="line">http &#123;</span><br><span class="line">    …</span><br><span class="line">upstream load_balance &#123;</span><br><span class="line">server localhost:8001;</span><br><span class="line">server localhost:8002;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_buffering off;</span><br><span class="line">proxy_pass http://load_balance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的<em>proxy_buffering off;</em>配置是为了禁用nginx反向代理的缓存功能，保证客户端的每次请求都被转发到后端真实服务器，以便我们每次跟踪分析的nginx执行流程更加简单且完整。而另外两个配置指令upstream和proxy_pass在此处显得更为重要，其中upstream配置指令的回调处理函数为ngx_http_upstream()，该函数除了申请内存、设置初始值等之外，最主要的动作就是切换配置上下文并调用ngx_conf_parse()函数继续进行配置解析：</p></blockquote><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2.源码解析"></a>2.源码解析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_http_upstream.c</span><br><span class="line">    pcf = *cf;</span><br><span class="line">    cf-&gt;ctx = ctx;</span><br><span class="line">    cf-&gt;cmd_type = NGX_HTTP_UPS_CONF;</span><br><span class="line"></span><br><span class="line">    rv = ngx_conf_parse(cf, <span class="literal">NULL</span>);</span><br><span class="line">…</span><br><span class="line">    <span class="keyword">if</span> (uscf-&gt;servers == <span class="literal">NULL</span>) &#123;</span><br></pre></td></tr></table></figure><blockquote><p>进入到upstream配置块内，最主要的配置指令也就是server，其对应的处理函数为ngx_http_upstream_server()，对于每一个后端真实服务器，除了其uri地址外，还有诸如down、weight、max_fails、fail_timeout、backup这样的可选参数，所有这些都需要ngx_http_upstream_server()函数来处理。<br>在ngx_http_upstream.c的第4173行下个断点，我们可以看到这里给出示例的解析结果：<br><img src="/images/2019-07-16_nginx_upstream_2.png" alt></p></blockquote><blockquote><p>另外一个重要配置指令proxy_pass主要出现在location配置上下文中，而其对应的处理函数为ngx_http_proxy_pass()，抹去该函数内的众多细节，我们重点关注两个赋值语句：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_http_proxy_module.c</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_proxy_pass(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">&#123;</span><br><span class="line">…</span><br><span class="line">    clcf-&gt;handler = ngx_http_proxy_handler;</span><br><span class="line">…</span><br><span class="line">    plcf-&gt;upstream.upstream = ngx_http_upstream_add(cf, &amp;u, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>上面片段代码里的第一个赋值语句给当前location的http处理设置回调函数，而第二个赋值语句则是查找（没有找到则会创建，比如如果配置文件中upstream指令出现在proxy_pass指令的后面）其对应的upstream配置，我们这里就一个名为load_balance的upstream，所以找到的配置就是它了：<br><img src="/images/2019-07-16_nginx_upstream_3.png" alt></p></blockquote><blockquote><p>前面曾提到，Nginx将对客户端的http请求处理分为多个阶段，而其中有个NGX_HTTP_FIND_CONFIG_PHASE阶段主要就是做配置查找处理，如果当前请求location设置了upstream，即回调函数指针clcf-&gt;handler不为空，则表示对该location的请求需要后端真实服务器来处理：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_http_core_module.c</span><br><span class="line"><span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_core_find_config_phase(<span class="keyword">ngx_http_request_t</span> *r,</span><br><span class="line">    <span class="keyword">ngx_http_phase_handler_t</span> *ph)</span><br><span class="line">&#123;</span><br><span class="line">…</span><br><span class="line">    ngx_http_update_location_config(r);</span><br><span class="line">…</span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_http_update_location_config(<span class="keyword">ngx_http_request_t</span> *r)</span><br><span class="line">&#123;</span><br><span class="line">…</span><br><span class="line">    <span class="keyword">if</span> (clcf-&gt;handler) &#123;</span><br><span class="line">        r-&gt;content_handler = clcf-&gt;handler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在其它有location更新的情况下，比如redirect重定向location或named命名location或if条件location等，此时也会调用ngx_http_update_location_config()函数进行location配置更新。我们知道upstream模块的主要功能是产生响应数据，虽然这些响应数据来自后端真实服务器，所以在NGX_HTTP_CONTENT_PHASE 阶段的checker函数ngx_http_core_content_phase()内，我们可以看到在r-&gt;content_handler不为空的情况下会优先对r-&gt;content_handler函数指针进行回调：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_http_core_module.c</span><br><span class="line"><span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_core_content_phase(<span class="keyword">ngx_http_request_t</span> *r,</span><br><span class="line">    <span class="keyword">ngx_http_phase_handler_t</span> *ph)</span><br><span class="line">&#123;</span><br><span class="line">…</span><br><span class="line">    <span class="keyword">if</span> (r-&gt;content_handler) &#123;</span><br><span class="line">        r-&gt;write_event_handler = ngx_http_request_empty_handler;</span><br><span class="line">        ngx_http_finalize_request(r, r-&gt;content_handler(r));</span><br><span class="line">        <span class="keyword">return</span> NGX_OK;</span><br><span class="line">    &#125;</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>如果r-&gt;content_handler不为空，即存在upstream，那么进入处理，注意第1397行直接返回NGX_OK，也即不再调用挂在该阶段的其它模块回调函数，所以说upstream模块的优先级是最高的。根据前面的回调赋值，调用r-&gt;content_handler()指针函数，实质上就是执行函数ngx_http_proxy_handler()，直到这里，我们才真正走进upstream代理模块的处理逻辑里。</p><h2 id="3-回调函数"><a href="#3-回调函数" class="headerlink" title="3.回调函数"></a>3.回调函数</h2><blockquote><p>对于任何一个Upstream模块而言，最核心的实现主要是7个回调函数，upstream代理模块自然也不例外，它实现并注册了这7个回调函数：</p></blockquote><table><thead><tr><th style="text-align:center">回调指针</th><th style="text-align:center">函数功能</th><th style="text-align:center">upstream代理模块</th></tr></thead><tbody><tr><td style="text-align:center">create_request</td><td style="text-align:center">根据nginx与后端服务器通信协议（比如HTTP、Memcache），将客户端的HTTP请求信息转换为对应的发送到后端服务器的真实请求</td><td style="text-align:center">ngx_http_proxy_create_request 由于nginx与后端服务器通信协议也为HTTP，所以直接拷贝客户端的请求头、请求体（如果有）到变量r-&gt;upstream-&gt;request_bufs内。</td></tr><tr><td style="text-align:center">process_header</td><td style="text-align:center">根据nginx与后端服务器通信协议，将后端服务器返回的头部信息转换为对客户端响应的HTTP响应头。</td><td style="text-align:center">ngx_http_proxy_process_status_line 此时后端服务器返回的头部信息已经保存在变量r-&gt;upstream-&gt;buffer内，将这串字符串解析为HTTP响应头存储到变量r-&gt;upstream-&gt;headers_in内。</td></tr><tr><td style="text-align:center">input_filter_init</td><td style="text-align:center">根据前面获得的后端服务器返回的头部信息，为进一步处理后端服务器将返回的响应体做初始准备工作。</td><td style="text-align:center">ngx_http_proxy_input_filter_init 根据已解析的后端服务器返回的头部信息，设置需进一步处理的后端服务器将返回的响应体的长度，该值保存在变量r-&gt;upstream-&gt;length内。</td></tr><tr><td style="text-align:center">input_filter</td><td style="text-align:center">正式处理后端服务器返回的响应体</td><td style="text-align:center">ngx_http_proxy_non_buffered_copy_filter 本次收到的响应体数据长度为bytes，数据长度存储在r-&gt;upstream-&gt;buffer内，把它加入到r-&gt;upstream-&gt;out_bufs响应数据链等待发送给客户端。</td></tr><tr><td style="text-align:center">finalize_request</td><td style="text-align:center">正常结束与后端服务器的交互，比如剩余待取数据长度为0或读到EOF等，之后就会调用该函数。由于nginx会自动完成与后端服务器交互的清理工作，所以该函数一般仅做下日志，标识响应正常结束。</td><td style="text-align:center">ngx_http_proxy_finalize_request 记录一条日志，标识正常结束与后端服务器的交互，然后函数返回。</td></tr><tr><td style="text-align:center">reinit_request</td><td style="text-align:center">对交互重新初始化，比如当nginx发现一台后端服务器出错无法正常完成处理，需要尝试请求另一台后端服务器时就会调用该函数。</td><td style="text-align:center">ngx_http_proxy_reinit_request设置初始值，设置回调指针，处理比较简单。</td></tr><tr><td style="text-align:center">abort_request</td><td style="text-align:center">异常结束与后端服务器的交互后就会调用该函数。大部分情况下，该函数仅做下日志，标识响应异常结束。</td><td style="text-align:center">ngx_http_proxy_abort_request记录一条日志，标识异常结束与后端服务器的交互，然后函数返回。</td></tr></tbody></table><p>上表格中前面5个函数执行的先后次序如下图所示，由于在Client/Proxy/Server之间，一次请求/响应数据可以发送多次（下图中只画出一次就发送完毕的情况），所以下图中对应的函数也可能被执行多次，不过一般情况下，这5个函数执行的先后次序就是这样了。<br><img src="/images/2019-07-16_nginx_upstream_4.png" alt></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><blockquote><p>这些回调函数如何夹杂到nginx中被调用并不需要完全搞清楚，要写一个Upstream模块，我们只要实现上面提到的这7个函数即可，当然，可以看到最主要的也就是create_request、process_header和input_filter这三个回调，它们实现从HTTP协议到Nginx与后端服务器之间交互协议的来回转换，使得在用户看来，他访问的就是一台功能完整的Web服务器，而也许事实上，显示在他面前的数据来自Memcache或别的什么服务器。</p></blockquote><p>参考文献：</p><p><a href="http://www.lenky.info/ngx_book" target="_blank" rel="noopener">nginx核心讲解</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关配置&quot;&gt;&lt;a href=&quot;#1-相关配置&quot; class=&quot;headerlink&quot; title=&quot;1.相关配置&quot;&gt;&lt;/a&gt;1.相
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx缓存详解</title>
    <link href="https://weeweetan.github.io/2019/06/27/Nginx%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2019/06/27/Nginx缓存详解/</id>
    <published>2019-06-27T12:56:57.000Z</published>
    <updated>2019-09-12T08:40:11.814Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1-相关配置"><a href="#1-相关配置" class="headerlink" title="1. 相关配置"></a>1. 相关配置</h2><h3 id="1-1-配置指令"><a href="#1-1-配置指令" class="headerlink" title="1.1 配置指令"></a>1.1 配置指令</h3><blockquote><p>Nginx缓存由<strong>proxy_cache_path</strong>指令开启</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path D:\output levels=1:2 keys_zone=my_cache:10m max_size=2g inactive=60m use_temp_path=off;</span><br></pre></td></tr></table></figure><blockquote><p>对于每个参数的具体含义可以参考<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path" target="_blank" rel="noopener">nginx官方文档</a>，对于缓存文件名则需要proxy_cache_key指令指定</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache my_cache;</span><br></pre></td></tr></table></figure><blockquote><p>对于该指令的具体用法可以参考<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache" target="_blank" rel="noopener">nginx官方文档</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_valid 200 1h;</span><br></pre></td></tr></table></figure><blockquote><p><strong>需要注意的是，如果没有这条指令，nginx将不会缓存上游的数据</strong>。对于该指令的具体用法可以参考<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_valid" target="_blank" rel="noopener">nginx官方文档</a></p></blockquote><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2. 源码解析"></a>2. 源码解析</h2><blockquote><p>Nginx与文件缓存相关的代码在<strong>src/http/ngx_http_file_cache.c</strong></p></blockquote><h3 id="2-1-关键结构体"><a href="#2-1-关键结构体" class="headerlink" title="2.1 关键结构体"></a>2.1 关键结构体</h3><blockquote><p>与缓存相关的结构体有<em>ngx_path_t</em>、<em>ngx_http_file_cache_sh_t</em>、<em>ngx_http_file_cache_s</em> 、<em>ngx_http_file_cache_node_t</em>、 <em>ngx_http_file_cache_header_t</em>，来看看这几个结构体的定义</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_str_t</span>                  name;</span><br><span class="line">    <span class="keyword">size_t</span>                     len;</span><br><span class="line">    <span class="keyword">size_t</span>                     level[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    ngx_path_manager_pt        manager;  <span class="comment">//决定是否启用cache manager进程 </span></span><br><span class="line">    ngx_path_loader_pt         loader;  <span class="comment">//决定是否启用cache loader进程 </span></span><br><span class="line">    <span class="keyword">void</span>                      *data;</span><br><span class="line"></span><br><span class="line">    u_char                    *conf_file;   <span class="comment">//nginx配置文件路径</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                 line;</span><br><span class="line">&#125; <span class="keyword">ngx_path_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_rbtree_t</span>                     rbtree;  </span><br><span class="line">    <span class="keyword">ngx_rbtree_node_t</span>                sentinel;</span><br><span class="line">    <span class="keyword">ngx_queue_t</span>                      <span class="built_in">queue</span>;</span><br><span class="line">    <span class="keyword">ngx_atomic_t</span>                     cold;</span><br><span class="line">    <span class="keyword">ngx_atomic_t</span>                     loading;</span><br><span class="line">    <span class="keyword">off_t</span>                            size;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       count;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       watermark;</span><br><span class="line">&#125; <span class="keyword">ngx_http_file_cache_sh_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_file_cache_s</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_http_file_cache_sh_t</span>        *sh;</span><br><span class="line">    <span class="keyword">ngx_slab_pool_t</span>                 *shpool;      <span class="comment">/* shpool是用于管理共享内存的 slab allocator ，所有缓存节点占用空间都由它进行分配 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_path_t</span>                      *path;             <span class="comment">/* ngx_http_file_cache_set_slot中创建ngx_path_t空间 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">off_t</span>                            max_size;</span><br><span class="line">    <span class="keyword">size_t</span>                           bsize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span>                           inactive;     <span class="comment">/* 触发LRU算法阈值 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span>                           fail_time;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       files;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       loader_files;  <span class="comment">/* 阈值，当load的文件个数大于这个值之后，load进程会短暂的休眠(时间位loader_sleep) */</span></span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       last;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       loader_sleep;  <span class="comment">/* 阈值，执行一次缓存文件到共享内存后 , 进程的休眠时间 , 默认200 */</span></span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       loader_threshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       manager_files;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       manager_sleep;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       manager_threshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_shm_zone_t</span>                  *shm_zone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       use_temp_path;</span><br><span class="line">                                     <span class="comment">/* unsigned use_temp_path:1 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_rbtree_node_t</span>                node;     <span class="comment">/* 缓存查询树的节点 */</span></span><br><span class="line">    <span class="keyword">ngx_queue_t</span>                      <span class="built_in">queue</span>;     <span class="comment">/* LRU页面置换算法 队列中的节点 */</span></span><br><span class="line"></span><br><span class="line">    u_char                           key[NGX_HTTP_CACHE_KEY_LEN</span><br><span class="line">                                         - <span class="keyword">sizeof</span>(<span class="keyword">ngx_rbtree_key_t</span>)];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span>                         count:<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         uses:<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         valid_msec:<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         error:<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         exists:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         updating:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         deleting:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         purged:<span class="number">1</span>;</span><br><span class="line">                                     <span class="comment">/* 10 unused bits */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_file_uniq_t</span>                  uniq;</span><br><span class="line">    <span class="keyword">time_t</span>                           expire;</span><br><span class="line">    <span class="keyword">time_t</span>                           valid_sec;</span><br><span class="line">    <span class="keyword">size_t</span>                           body_start;</span><br><span class="line">    <span class="keyword">off_t</span>                            fs_size;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       lock_time;</span><br><span class="line">&#125; <span class="keyword">ngx_http_file_cache_node_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在写缓存文件时会将这个结构体写入</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       version;</span><br><span class="line">    <span class="keyword">time_t</span>                           valid_sec;</span><br><span class="line">    <span class="keyword">time_t</span>                           updating_sec;</span><br><span class="line">    <span class="keyword">time_t</span>                           error_sec;</span><br><span class="line">    <span class="keyword">time_t</span>                           last_modified;</span><br><span class="line">    <span class="keyword">time_t</span>                           date;</span><br><span class="line">    <span class="keyword">uint32_t</span>                         crc32;</span><br><span class="line">    u_short                          valid_msec;</span><br><span class="line">    u_short                          header_start;         <span class="comment">/* 缓存文件中http头开始的偏移 */</span></span><br><span class="line">    u_short                          body_start;</span><br><span class="line">    u_char                           etag_len;</span><br><span class="line">    u_char                           etag[NGX_HTTP_CACHE_ETAG_LEN];</span><br><span class="line">    u_char                           vary_len;</span><br><span class="line">    u_char                           vary[NGX_HTTP_CACHE_VARY_LEN];</span><br><span class="line">    u_char                           variant[NGX_HTTP_CACHE_KEY_LEN];</span><br><span class="line">&#125; <span class="keyword">ngx_http_file_cache_header_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_cache_s</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_file_t</span>                       file;    <span class="comment">/* 缓存文件描述结构体 */</span></span><br><span class="line">    <span class="keyword">ngx_array_t</span>                      keys;    <span class="comment">/* 存放proxy_cache_key指令的值 */</span></span><br><span class="line">    <span class="keyword">uint32_t</span>                         crc32;</span><br><span class="line">    u_char                           key[NGX_HTTP_CACHE_KEY_LEN];     <span class="comment">/* 存放计算md5后的值 */</span></span><br><span class="line">    u_char                           main[NGX_HTTP_CACHE_KEY_LEN];    <span class="comment">/* 跟key相同 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_file_uniq_t</span>                  uniq;</span><br><span class="line">    <span class="keyword">time_t</span>                           valid_sec;</span><br><span class="line">    <span class="keyword">time_t</span>                           updating_sec;</span><br><span class="line">    <span class="keyword">time_t</span>                           error_sec;</span><br><span class="line">    <span class="keyword">time_t</span>                           last_modified;</span><br><span class="line">    <span class="keyword">time_t</span>                           date;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_str_t</span>                        etag;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                        vary;</span><br><span class="line">    u_char                           variant[NGX_HTTP_CACHE_KEY_LEN];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span>                           header_start;     <span class="comment">/* http头在缓存中的偏移位置 */</span></span><br><span class="line">    <span class="keyword">size_t</span>                           body_start;       <span class="comment">/* http响应体在缓存中的偏移位置 */</span></span><br><span class="line">    <span class="keyword">off_t</span>                            length;           <span class="comment">/* 缓存文件的大小，见ngx_http_file_cache_open */</span></span><br><span class="line">    <span class="keyword">off_t</span>                            fs_size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       min_uses;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       error;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       valid_msec;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                       vary_tag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_buf_t</span>                       *buf;      <span class="comment">/* 存储缓存文件头 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_http_file_cache_t</span>           *file_cache;</span><br><span class="line">    <span class="keyword">ngx_http_file_cache_node_t</span>      *node;      <span class="comment">//ngx_http_file_cache_exists中创建空间和赋值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_THREADS || NGX_COMPAT)</span></span><br><span class="line">    <span class="keyword">ngx_thread_task_t</span>               *thread_task;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       lock_timeout;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       lock_age;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       lock_time;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>                       wait_time;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ngx_event_t</span>                      wait_event;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span>                         lock:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         waiting:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span>                         updated:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         updating:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         exists:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         temp_file:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         purged:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         reading:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         secondary:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         background:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span>                         stale_updating:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span>                         stale_error:<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>部分字段含义见注释</p></blockquote><h2 id="2-2-生成标记缓存文件的key"><a href="#2-2-生成标记缓存文件的key" class="headerlink" title="2.2 生成标记缓存文件的key"></a>2.2 生成标记缓存文件的key</h2><blockquote><p>生成标记缓存文件的key由<em>ngx_http_file_cache_create_key</em>函数实现，我们来看看具体实现</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_http_file_cache_create_key(<span class="keyword">ngx_http_request_t</span> *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">size_t</span>             len;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>         *key;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>         i;</span><br><span class="line">    <span class="keyword">ngx_md5_t</span>          md5;</span><br><span class="line">    <span class="keyword">ngx_http_cache_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    c = r-&gt;cache;</span><br><span class="line"></span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ngx_crc32_init(c-&gt;crc32);</span><br><span class="line">    ngx_md5_init(&amp;md5);</span><br><span class="line"></span><br><span class="line">    key = c-&gt;keys.elts;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; c-&gt;keys.nelts; i++) &#123;</span><br><span class="line">        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                       <span class="string">"http cache key: \"%V\""</span>, &amp;key[i]);</span><br><span class="line"></span><br><span class="line">        len += key[i].len;</span><br><span class="line"></span><br><span class="line">        ngx_crc32_update(&amp;c-&gt;crc32, key[i].data, key[i].len);</span><br><span class="line">        ngx_md5_update(&amp;md5, key[i].data, key[i].len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;header_start = <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_file_cache_header_t</span>)</span><br><span class="line">                      + <span class="keyword">sizeof</span>(ngx_http_file_cache_key) + len + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ngx_crc32_final(c-&gt;crc32);</span><br><span class="line">    ngx_md5_final(c-&gt;key, &amp;md5);</span><br><span class="line"></span><br><span class="line">    ngx_memcpy(c-&gt;main, c-&gt;key, NGX_HTTP_CACHE_KEY_LEN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>该函数实现较简单，主要是计算proxy_cache_key指令值的md5值，并保存，然后初始化header_start成员的值，这个地方需要注意一下缓存文件头部信息<br>[ngx_http_file_cache_header_t][“\nKEY: “][orig_key][“\n”][header][body]</p></blockquote><h3 id="2-3-缓存文件名生成"><a href="#2-3-缓存文件名生成" class="headerlink" title="2.3 缓存文件名生成"></a>2.3 缓存文件名生成</h3><blockquote><p>生成缓存文件名主要由<em>ngx_http_file_cache_name</em>实现，现在来看看源码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_file_cache_name(<span class="keyword">ngx_http_request_t</span> *r, <span class="keyword">ngx_path_t</span> *path)</span><br><span class="line">&#123;</span><br><span class="line">    u_char            *p;</span><br><span class="line">    <span class="keyword">ngx_http_cache_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    c = r-&gt;cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;file.name.len) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;file.name.len = path-&gt;name.len + <span class="number">1</span> + path-&gt;len</span><br><span class="line">                       + <span class="number">2</span> * NGX_HTTP_CACHE_KEY_LEN;</span><br><span class="line"></span><br><span class="line">    c-&gt;file.name.data = ngx_pnalloc(r-&gt;pool, c-&gt;file.name.len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;file.name.data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memcpy(c-&gt;file.name.data, path-&gt;name.data, path-&gt;name.len);</span><br><span class="line"></span><br><span class="line">    p = c-&gt;file.name.data + path-&gt;name.len + <span class="number">1</span> + path-&gt;len;</span><br><span class="line">    p = ngx_hex_dump(p, c-&gt;key, NGX_HTTP_CACHE_KEY_LEN);</span><br><span class="line">    *p = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    ngx_create_hashed_filename(path, c-&gt;file.name.data, c-&gt;file.name.len);</span><br><span class="line"></span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"cache file: \"%s\""</span>, c-&gt;file.name.data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol><li>该函数首先判断当前缓存文件名是否已经生成成功，若已生成，则直接返回，代码如下：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (c-&gt;file.name.len) &#123;</span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>接下来计算缓存文件名长度，其中<em>path-&gt;name.len</em>为<em>proxy_cache_path</em>指令第一个参数，path-&gt;len为levels长度，比如level=1:2则path-&gt;len为5，包含两个/，代码如下：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c-&gt;file.name.len = path-&gt;name.len + <span class="number">1</span> + path-&gt;len</span><br><span class="line">                   + <span class="number">2</span> * NGX_HTTP_CACHE_KEY_LEN;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>接着为缓存文件名申请内存，代码如下：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-&gt;file.name.data = ngx_pnalloc(r-&gt;pool, c-&gt;file.name.len + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>接着将<em>proxy_cache_path</em>指令设置的路径复制到<em>c-&gt;file.name.data</em>最前端，完成后<em>c-&gt;file.name.data</em>的值为:D:\output,代码如下：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx_memcpy(c-&gt;file.name.data, path-&gt;name.data, path-&gt;name.len);</span><br></pre></td></tr></table></figure><blockquote><ol start="5"><li>接着将p指向<em>c-&gt;file.name.data</em>偏移 <em>path-&gt;name.len + 1 + path-&gt;len</em>的位置处，这样做的目的是准备生成32位长的md5文件名，并预留level设置的目录</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = c-&gt;file.name.data + path-&gt;name.len + <span class="number">1</span> + path-&gt;len;</span><br><span class="line">p = ngx_hex_dump(p, c-&gt;key, NGX_HTTP_CACHE_KEY_LEN);</span><br><span class="line">*p = <span class="string">'\0'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>这一步完成之后<em>c-&gt;file.name.data</em>的值为D:\output屯屯屯md5(proxy_cache_key)</p></blockquote><blockquote><ol start="6"><li>调用<em>ngx_create_hashed_filename</em>函数补全第5步预留的level目录</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx_create_hashed_filename(path, c-&gt;file.name.data, c-&gt;file.name.len);</span><br></pre></td></tr></table></figure><h3 id="2-4-生成由levels参数指定的目录层级"><a href="#2-4-生成由levels参数指定的目录层级" class="headerlink" title="2.4 生成由levels参数指定的目录层级"></a>2.4 生成由levels参数指定的目录层级</h3><blockquote><p>生成由levels参数指定的目录层级由<em>ngx_create_hashed_filename</em>实现，现在来看看源码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_create_hashed_filename(<span class="keyword">ngx_path_t</span> *path, u_char *file, <span class="keyword">size_t</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">size_t</span>      i, level;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>  n;</span><br><span class="line"></span><br><span class="line">    i = path-&gt;name.len + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    file[path-&gt;name.len + path-&gt;len]  = <span class="string">'/'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; NGX_MAX_PATH_LEVEL; n++) &#123;</span><br><span class="line">        level = path-&gt;level[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (level == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        len -= level;</span><br><span class="line">        file[i - <span class="number">1</span>] = <span class="string">'/'</span>;</span><br><span class="line">        ngx_memcpy(&amp;file[i], &amp;file[len], level);</span><br><span class="line">        i += level + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>从上一节中我们知道参数file的值为D:\output屯屯屯md5(proxy_cache_key)，该函数首先用一个变量i保存path长度加1，这个设计非常巧妙，在后续中会使用到，代码如下：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = path-&gt;name.len + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>接着修改file的值，在层级目录后添加一个反斜杠，修改后为D:\output屯屯屯/md5(proxy_cache_key)</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file[path-&gt;name.len + path-&gt;len]  = <span class="string">'/'</span>;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>接下来进入一个for循环，填充file中的屯屯屯，在第一次循环中首先获取levels=1：2中的1，接着用变量len减去变量level，接着在output后添加一个’/‘，然后将file中从len位置复制1个字符到<em>output/</em>后，修改i的值；第二次循环，首先获取levels=1：2中的2，接着用len减去2，接着在第一次缓存复制的字符后添加一个’/‘，然后把file从len处复制2个字符到上一步的’/‘后，修改i的值；第三次跳出循环，至此填充完成，代码如下：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; NGX_MAX_PATH_LEVEL; n++) &#123;</span><br><span class="line">    level = path-&gt;level[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (level == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    len -= level;</span><br><span class="line">    file[i - <span class="number">1</span>] = <span class="string">'/'</span>;</span><br><span class="line">    ngx_memcpy(&amp;file[i], &amp;file[len], level);</span><br><span class="line">    i += level + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-从红黑树中查找缓存节点"><a href="#2-5-从红黑树中查找缓存节点" class="headerlink" title="2.5 从红黑树中查找缓存节点"></a>2.5 从红黑树中查找缓存节点</h3><blockquote><p>缓存key跟缓存文件名生成好之后，紧接着根据生成好的key从红黑树中查找，若不存在则插入，找到则返回对应的缓存节点，这个功能由<em>ngx_http_file_cache_exists</em>函数实现，我们看看具体实现。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static ngx_int_t</span><br><span class="line">ngx_http_file_cache_exists(ngx_http_file_cache_t *cache, ngx_http_cache_t *c)</span><br><span class="line">&#123;</span><br><span class="line">    ngx_int_t                    rc;</span><br><span class="line">    ngx_http_file_cache_node_t  *fcn;</span><br><span class="line"></span><br><span class="line">    ngx_shmtx_lock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">    fcn = c-&gt;node;//后面没找到则会创建node节点</span><br><span class="line">   </span><br><span class="line">    if (fcn == NULL) &#123;</span><br><span class="line">        fcn = ngx_http_file_cache_lookup(cache, c-&gt;key); //以 c-&gt;key 为查找条件从缓存中查找缓存节点： </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (fcn) &#123; //cache中存在该key</span><br><span class="line">        ngx_queue_remove(&amp;fcn-&gt;queue);</span><br><span class="line"></span><br><span class="line">        //该客户端在新建连接后，如果之前有缓存该文件，则c-&gt;node为NULL，表示这个连接请求第一次走到这里，有一个客户端在获取数据，如果在</span><br><span class="line">        //连接范围内(还没有断开连接)多次获取该缓存文件，则也只会加1，表示当前有多少个客户端连接在获取该缓存</span><br><span class="line">        if (c-&gt;node == NULL) &#123; //如果该请求第一次使用此缓存节点，则增加相关引用和使用次数</span><br><span class="line">            fcn-&gt;uses++;</span><br><span class="line">            fcn-&gt;count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (fcn-&gt;error) &#123;</span><br><span class="line"></span><br><span class="line">            if (fcn-&gt;valid_sec &lt; ngx_time()) &#123;</span><br><span class="line">                goto renew; //缓存已过期</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rc = NGX_OK;</span><br><span class="line"></span><br><span class="line">            goto done;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (fcn-&gt;exists || fcn-&gt;uses &gt;= c-&gt;min_uses) &#123; //该请求的缓存已经存在，并且对该缓存的请求次数达到了最低要求次数min_uses</span><br><span class="line">            //表示该缓存文件是否存在，Proxy_cache_min_uses 3，则第3次后开始获取后端数据，获取完毕后在ngx_http_file_cache_update中置1，但是只有在地4次请求的时候才会在ngx_http_file_cache_exists赋值为1</span><br><span class="line">            c-&gt;exists = fcn-&gt;exists;</span><br><span class="line">            if (fcn-&gt;body_start) &#123;</span><br><span class="line">                c-&gt;body_start = fcn-&gt;body_start;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rc = NGX_OK;</span><br><span class="line"></span><br><span class="line">            goto done;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //例如配置Proxy_cache_min_uses 5，则需要客户端请求5才才能从缓存中取，如果现在只有4次，则都需要从后端获取数据</span><br><span class="line">        rc = NGX_AGAIN;</span><br><span class="line"></span><br><span class="line">        goto done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //没找到，则在下面创建node节点，添加到ngx_http_file_cache_t-&gt;sh-&gt;rbtree红黑树中</span><br><span class="line">    fcn = ngx_slab_calloc_locked(cache-&gt;shpool,</span><br><span class="line">                                 sizeof(ngx_http_file_cache_node_t));</span><br><span class="line">    if (fcn == NULL) &#123;</span><br><span class="line">        ngx_shmtx_unlock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        (void) ngx_http_file_cache_forced_expire(cache);</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_lock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        fcn = ngx_slab_calloc_locked(cache-&gt;shpool,</span><br><span class="line">                                     sizeof(ngx_http_file_cache_node_t));</span><br><span class="line">        if (fcn == NULL) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_ALERT, ngx_cycle-&gt;log, 0,</span><br><span class="line">                          &quot;could not allocate node%s&quot;, cache-&gt;shpool-&gt;log_ctx);</span><br><span class="line">            rc = NGX_ERROR;</span><br><span class="line">            goto failed;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_memcpy((u_char *) &amp;fcn-&gt;node.key, c-&gt;key, sizeof(ngx_rbtree_key_t));</span><br><span class="line"></span><br><span class="line">    ngx_memcpy(fcn-&gt;key, &amp;c-&gt;key[sizeof(ngx_rbtree_key_t)],</span><br><span class="line">               NGX_HTTP_CACHE_KEY_LEN - sizeof(ngx_rbtree_key_t));</span><br><span class="line"></span><br><span class="line">    ngx_rbtree_insert(&amp;cache-&gt;sh-&gt;rbtree, &amp;fcn-&gt;node); //把该节点添加到红黑树中</span><br><span class="line"></span><br><span class="line">    fcn-&gt;uses = 1;</span><br><span class="line">    fcn-&gt;count = 1;</span><br><span class="line"></span><br><span class="line">renew:</span><br><span class="line"></span><br><span class="line">    rc = NGX_DECLINED; //uri第一次请求的时候创建node节点，同时返回NGX_DECLINED。或者缓存过期需要把该节点相关信息恢复为默认值</span><br><span class="line"></span><br><span class="line">    fcn-&gt;valid_msec = 0;</span><br><span class="line">    fcn-&gt;error = 0;</span><br><span class="line">    fcn-&gt;exists = 0;</span><br><span class="line">    fcn-&gt;valid_sec = 0;</span><br><span class="line">    fcn-&gt;uniq = 0;</span><br><span class="line">    fcn-&gt;body_start = 0;</span><br><span class="line">    fcn-&gt;fs_size = 0;</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line"></span><br><span class="line">    fcn-&gt;expire = ngx_time() + cache-&gt;inactive;</span><br><span class="line"></span><br><span class="line">    ngx_queue_insert_head(&amp;cache-&gt;sh-&gt;queue, &amp;fcn-&gt;queue); //新创建的node节点添加到cache-&gt;sh-&gt;queue头部</span><br><span class="line"></span><br><span class="line">    c-&gt;uniq = fcn-&gt;uniq;//文件的uniq  赋值见ngx_http_file_cache_update</span><br><span class="line">    c-&gt;error = fcn-&gt;error;</span><br><span class="line">    c-&gt;node = fcn; //把新创建的fcn赋值给c-&gt;node</span><br><span class="line"></span><br><span class="line">failed:</span><br><span class="line"></span><br><span class="line">    ngx_shmtx_unlock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">    return rc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-6-打开缓存文件"><a href="#2-6-打开缓存文件" class="headerlink" title="2.6 打开缓存文件"></a>2.6 打开缓存文件</h3><blockquote><p>上一节中介绍了如何从红黑树中查找缓存节点，找到缓存节点之后，就要需要根据缓存节点中的缓存文件路径去打开缓存文件了，Nginx使用<em>ngx_http_file_cache_open</em>函数实现，接下来我们来看看实现：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_file_cache_open(<span class="keyword">ngx_http_request_t</span> *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                  rc, rv;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                 test;</span><br><span class="line">    <span class="keyword">ngx_http_cache_t</span>          *c;</span><br><span class="line">    <span class="keyword">ngx_pool_cleanup_t</span>        *cln;</span><br><span class="line">    <span class="keyword">ngx_open_file_info_t</span>       of;</span><br><span class="line">    <span class="keyword">ngx_http_file_cache_t</span>     *cache;</span><br><span class="line">    <span class="keyword">ngx_http_core_loc_conf_t</span>  *clcf;</span><br><span class="line"></span><br><span class="line">    c = r-&gt;cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;waiting) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_AGAIN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;reading) &#123;</span><br><span class="line">        <span class="keyword">return</span> ngx_http_file_cache_read(r, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cache = c-&gt;file_cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cln = ngx_pool_cleanup_add(r-&gt;pool, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (cln == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cln-&gt;handler = ngx_http_file_cache_cleanup;</span><br><span class="line">        cln-&gt;data = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rc = ngx_http_file_cache_exists(cache, c);</span><br><span class="line"></span><br><span class="line">    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"http file cache exists: %i e:%d"</span>, rc, c-&gt;exists);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_AGAIN) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_CACHE_SCARCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_OK) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c-&gt;error) &#123;</span><br><span class="line">            <span class="keyword">return</span> c-&gt;error;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c-&gt;temp_file = <span class="number">1</span>;</span><br><span class="line">        test = c-&gt;exists ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        rv = NGX_DECLINED;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">/* rc == NGX_DECLINED */</span></span><br><span class="line"></span><br><span class="line">        test = cache-&gt;sh-&gt;cold ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c-&gt;min_uses &gt; <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!test) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_HTTP_CACHE_SCARCE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rv = NGX_HTTP_CACHE_SCARCE;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c-&gt;temp_file = <span class="number">1</span>;</span><br><span class="line">            rv = NGX_DECLINED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_file_cache_name(r, cache-&gt;path) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!test) &#123;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;of, <span class="keyword">sizeof</span>(<span class="keyword">ngx_open_file_info_t</span>));</span><br><span class="line"></span><br><span class="line">    of.uniq = c-&gt;uniq;</span><br><span class="line">    of.valid = clcf-&gt;open_file_cache_valid;</span><br><span class="line">    of.min_uses = clcf-&gt;open_file_cache_min_uses;</span><br><span class="line">    of.events = clcf-&gt;open_file_cache_events;</span><br><span class="line">    of.directio = NGX_OPEN_FILE_DIRECTIO_OFF;</span><br><span class="line">    of.read_ahead = clcf-&gt;read_ahead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_open_cached_file(clcf-&gt;open_file_cache, &amp;c-&gt;file.name, &amp;of, r-&gt;pool)</span><br><span class="line">        != NGX_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (of.err) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> NGX_ENOENT:</span><br><span class="line">        <span class="keyword">case</span> NGX_ENOTDIR:</span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, of.err,</span><br><span class="line">                          ngx_open_file_n <span class="string">" \"%s\" failed"</span>, c-&gt;file.name.data);</span><br><span class="line">            <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"http file cache fd: %d"</span>, of.fd);</span><br><span class="line"></span><br><span class="line">    c-&gt;file.fd = of.fd;</span><br><span class="line">    c-&gt;file.<span class="built_in">log</span> = r-&gt;connection-&gt;<span class="built_in">log</span>;</span><br><span class="line">    c-&gt;uniq = of.uniq;</span><br><span class="line">    c-&gt;length = of.size;</span><br><span class="line">    c-&gt;fs_size = (of.fs_size + cache-&gt;bsize - <span class="number">1</span>) / cache-&gt;bsize;</span><br><span class="line"></span><br><span class="line">    c-&gt;buf = ngx_create_temp_buf(r-&gt;pool, c-&gt;body_start);</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;buf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ngx_http_file_cache_read(r, c);</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rv == NGX_DECLINED) &#123;</span><br><span class="line">        <span class="keyword">return</span> ngx_http_file_cache_lock(r, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rv;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-读缓存文件"><a href="#2-7-读缓存文件" class="headerlink" title="2.7 读缓存文件"></a>2.7 读缓存文件</h3><blockquote><p>若缓存文件存在，则会读取缓存文件头部，并根据读取出的头部信息进行下一步操作，nginx使用<em>ngx_http_file_cache_read</em>函数实现这个功能，我们来看一下具体实现</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_file_cache_read(<span class="keyword">ngx_http_request_t</span> *r, <span class="keyword">ngx_http_cache_t</span> *c)</span><br><span class="line">&#123;</span><br><span class="line">    u_char                        *p;</span><br><span class="line">    <span class="keyword">time_t</span>                         now;</span><br><span class="line">    <span class="keyword">ssize_t</span>                        n;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                     *key;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                      rc;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                     i;</span><br><span class="line">    <span class="keyword">ngx_http_file_cache_t</span>         *cache;</span><br><span class="line">    <span class="keyword">ngx_http_file_cache_header_t</span>  *h;</span><br><span class="line"></span><br><span class="line">    n = ngx_http_file_cache_aio_read(r, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//写缓冲区封装过程参考:ngx_http_upstream_process_header</span></span><br><span class="line">     <span class="comment">//缓存文件中前面部分格式:[ngx_http_file_cache_header_t]["\nKEY: "][orig_key]["\n"][header]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">size_t</span>) n &lt; c-&gt;header_start) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"cache file \"%s\" is too small"</span>, c-&gt;file.name.data);</span><br><span class="line">        <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h = (<span class="keyword">ngx_http_file_cache_header_t</span> *) c-&gt;buf-&gt;pos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h-&gt;version != NGX_HTTP_CACHE_VERSION) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_INFO, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"cache file \"%s\" version mismatch"</span>, c-&gt;file.name.data);</span><br><span class="line">        <span class="keyword">return</span> NGX_DECLINED;   <span class="comment">//如果返回这个NGX_DECLINED，会把cached置0，返回出去后只有从后端从新获取数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h-&gt;crc32 != c-&gt;crc32 || (<span class="keyword">size_t</span>) h-&gt;header_start != c-&gt;header_start) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"cache file \"%s\" has md5 collision"</span>, c-&gt;file.name.data);</span><br><span class="line">        <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p = c-&gt;buf-&gt;pos + <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_file_cache_header_t</span>)</span><br><span class="line">        + <span class="keyword">sizeof</span>(ngx_http_file_cache_key);</span><br><span class="line"></span><br><span class="line">    key = c-&gt;keys.elts;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; c-&gt;keys.nelts; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ngx_memcmp(p, key[i].data, key[i].len) != <span class="number">0</span>) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                          <span class="string">"cache file \"%s\" has md5 collision"</span>,</span><br><span class="line">                          c-&gt;file.name.data);</span><br><span class="line">            <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p += key[i].len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">size_t</span>) h-&gt;body_start &gt; c-&gt;body_start) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"cache file \"%s\" has too long header"</span>,</span><br><span class="line">                      c-&gt;file.name.data);</span><br><span class="line">        <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h-&gt;vary_len &gt; NGX_HTTP_CACHE_VARY_LEN) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"cache file \"%s\" has incorrect vary length"</span>,</span><br><span class="line">                      c-&gt;file.name.data);</span><br><span class="line">        <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h-&gt;vary_len) &#123;</span><br><span class="line">        ngx_http_file_cache_vary(r, h-&gt;vary, h-&gt;vary_len, c-&gt;variant);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_memcmp(c-&gt;variant, h-&gt;variant, NGX_HTTP_CACHE_KEY_LEN) != <span class="number">0</span>) &#123;</span><br><span class="line">            ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"http file cache vary mismatch"</span>);</span><br><span class="line">            <span class="keyword">return</span> ngx_http_file_cache_reopen(r, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c-&gt;buf-&gt;last += n;</span><br><span class="line"></span><br><span class="line">    c-&gt;valid_sec = h-&gt;valid_sec;</span><br><span class="line">    c-&gt;updating_sec = h-&gt;updating_sec;</span><br><span class="line">    c-&gt;error_sec = h-&gt;error_sec;</span><br><span class="line">    c-&gt;last_modified = h-&gt;last_modified;</span><br><span class="line">    c-&gt;date = h-&gt;date;</span><br><span class="line">    c-&gt;valid_msec = h-&gt;valid_msec;</span><br><span class="line">    c-&gt;body_start = h-&gt;body_start;</span><br><span class="line">    c-&gt;etag.len = h-&gt;etag_len;</span><br><span class="line">    c-&gt;etag.data = h-&gt;etag;</span><br><span class="line"></span><br><span class="line">    r-&gt;cached = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    cache = c-&gt;file_cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cache-&gt;sh-&gt;cold) &#123;</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_lock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!c-&gt;node-&gt;exists) &#123;</span><br><span class="line">            c-&gt;node-&gt;uses = <span class="number">1</span>;</span><br><span class="line">            c-&gt;node-&gt;body_start = c-&gt;body_start;</span><br><span class="line">            c-&gt;node-&gt;exists = <span class="number">1</span>;</span><br><span class="line">            c-&gt;node-&gt;uniq = c-&gt;uniq;</span><br><span class="line">            c-&gt;node-&gt;fs_size = c-&gt;fs_size;</span><br><span class="line"></span><br><span class="line">            cache-&gt;sh-&gt;size += c-&gt;fs_size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_unlock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    now = ngx_time();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;valid_sec &lt; now) &#123;</span><br><span class="line">        c-&gt;stale_updating = c-&gt;valid_sec + c-&gt;updating_sec &gt;= now;</span><br><span class="line">        c-&gt;stale_error = c-&gt;valid_sec + c-&gt;error_sec &gt;= now;</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_lock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c-&gt;node-&gt;updating) &#123;</span><br><span class="line">            rc = NGX_HTTP_CACHE_UPDATING;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c-&gt;node-&gt;updating = <span class="number">1</span>;</span><br><span class="line">            c-&gt;updating = <span class="number">1</span>;</span><br><span class="line">            c-&gt;lock_time = c-&gt;node-&gt;lock_time;</span><br><span class="line">            rc = NGX_HTTP_CACHE_STALE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_shmtx_unlock(&amp;cache-&gt;shpool-&gt;mutex);</span><br><span class="line"></span><br><span class="line">        ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                       <span class="string">"http file cache expired: %i %T %T"</span>,</span><br><span class="line">                       rc, c-&gt;valid_sec, now);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol><li>调用ngx_http_file_cache_aio_read函数读取缓存文件，读取大小为c-&gt;header_start，读取完成后，对返回值进行校验，确定是否读取成功，代码如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">n = ngx_http_file_cache_aio_read(r, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">size_t</span>) n &lt; c-&gt;header_start) &#123;</span><br><span class="line">    ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                  <span class="string">"cache file \"%s\" is too small"</span>, c-&gt;file.name.data);</span><br><span class="line">    <span class="keyword">return</span> NGX_DECLINED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="2"><li>取出缓存文件头部，并对其字段进行校验，封包过程参考ngx_http_file_cache_set_header函数<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">h = (<span class="keyword">ngx_http_file_cache_header_t</span> *) c-&gt;buf-&gt;pos;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>使用读出的缓存文件头部，更新内存中缓存节点信息</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">c-&gt;buf-&gt;last += n;    <span class="comment">//buf后续会被用来存放http头，所以这个地方移动last指针</span></span><br><span class="line"></span><br><span class="line">c-&gt;valid_sec = h-&gt;valid_sec;</span><br><span class="line">c-&gt;updating_sec = h-&gt;updating_sec;</span><br><span class="line">c-&gt;error_sec = h-&gt;error_sec;</span><br><span class="line">c-&gt;last_modified = h-&gt;last_modified;</span><br><span class="line">c-&gt;date = h-&gt;date;</span><br><span class="line">c-&gt;valid_msec = h-&gt;valid_msec;</span><br><span class="line">c-&gt;body_start = h-&gt;body_start;</span><br><span class="line">c-&gt;etag.len = h-&gt;etag_len;</span><br><span class="line">c-&gt;etag.data = h-&gt;etag;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-8-发送缓存"><a href="#2-8-发送缓存" class="headerlink" title="2.8 发送缓存"></a>2.8 发送缓存</h3><blockquote><p>若2.7节读取缓存文件成功，而且缓存校验也成功，则开始发送缓存内容，该功能由<em>ngx_http_upstream_cache_send</em>函数实现，接下来我们看看源码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_upstream_cache_send(<span class="keyword">ngx_http_request_t</span> *r, <span class="keyword">ngx_http_upstream_t</span> *u)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>          rc;</span><br><span class="line">    <span class="keyword">ngx_http_cache_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    r-&gt;cached = <span class="number">1</span>;</span><br><span class="line">    c = r-&gt;cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;header_start == c-&gt;body_start) &#123;</span><br><span class="line">        r-&gt;http_version = NGX_HTTP_VERSION_9;</span><br><span class="line">        <span class="keyword">return</span> ngx_http_cache_send(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> cache stack */</span></span><br><span class="line"></span><br><span class="line">    u-&gt;buffer = *c-&gt;buf;</span><br><span class="line">    u-&gt;buffer.pos += c-&gt;header_start;</span><br><span class="line"></span><br><span class="line">    ngx_memzero(&amp;u-&gt;headers_in, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_upstream_headers_in_t</span>));</span><br><span class="line">    u-&gt;headers_in.content_length_n = <span class="number">-1</span>;</span><br><span class="line">    u-&gt;headers_in.last_modified_time = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_list_init(&amp;u-&gt;headers_in.headers, r-&gt;pool, <span class="number">8</span>,</span><br><span class="line">                      <span class="keyword">sizeof</span>(<span class="keyword">ngx_table_elt_t</span>))</span><br><span class="line">        != NGX_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_list_init(&amp;u-&gt;headers_in.trailers, r-&gt;pool, <span class="number">2</span>,</span><br><span class="line">                      <span class="keyword">sizeof</span>(<span class="keyword">ngx_table_elt_t</span>))</span><br><span class="line">        != NGX_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rc = u-&gt;process_header(r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_OK) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_http_upstream_process_headers(r, u) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_DONE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ngx_http_cache_send(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_AGAIN) &#123;</span><br><span class="line">        rc = NGX_HTTP_UPSTREAM_INVALID_HEADER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* rc == NGX_HTTP_UPSTREAM_INVALID_HEADER */</span></span><br><span class="line"></span><br><span class="line">    ngx_log_error(NGX_LOG_CRIT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                  <span class="string">"cache file \"%s\" contains invalid header"</span>,</span><br><span class="line">                  c-&gt;file.name.data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> delete file */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-9-向上游回源"><a href="#2-9-向上游回源" class="headerlink" title="2.9 向上游回源"></a>2.9 向上游回源</h3><blockquote><p>若缓存不存在，nginx则向上游回源，那么整个流程就走到<em>ngx_http_upstream_init_request</em>函数的#if (NGX_HTTP_CACHE)块后，我们来看看其源码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">ngx_http_upstream_init_request(<span class="keyword">ngx_http_request_t</span> *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_str_t</span>                      *host;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>                      i;</span><br><span class="line">    <span class="keyword">ngx_resolver_ctx_t</span>             *ctx, temp;</span><br><span class="line">    <span class="keyword">ngx_http_cleanup_t</span>             *cln;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_t</span>            *u;</span><br><span class="line">    <span class="keyword">ngx_http_core_loc_conf_t</span>       *clcf;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_srv_conf_t</span>   *uscf, **uscfp;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_main_conf_t</span>  *umcf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;aio) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u = r-&gt;upstream;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;conf-&gt;cache) &#123;</span><br><span class="line">        <span class="keyword">ngx_int_t</span>  rc;</span><br><span class="line"></span><br><span class="line">        rc = ngx_http_upstream_cache(r, u);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc == NGX_BUSY) &#123;</span><br><span class="line">            r-&gt;write_event_handler = ngx_http_upstream_init_request;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r-&gt;write_event_handler = ngx_http_request_empty_handler;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc == NGX_ERROR) &#123;</span><br><span class="line">            ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc == NGX_OK) &#123;</span><br><span class="line">            rc = ngx_http_upstream_cache_send(r, u);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rc == NGX_DONE) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rc == NGX_HTTP_UPSTREAM_INVALID_HEADER) &#123;</span><br><span class="line">                rc = NGX_DECLINED;</span><br><span class="line">                r-&gt;cached = <span class="number">0</span>;</span><br><span class="line">                u-&gt;buffer.start = <span class="literal">NULL</span>;</span><br><span class="line">                u-&gt;cache_status = NGX_HTTP_CACHE_MISS;</span><br><span class="line">                u-&gt;request_sent = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_http_upstream_cache_background_update(r, u) != NGX_OK) &#123;</span><br><span class="line">                rc = NGX_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc != NGX_DECLINED) &#123;</span><br><span class="line">            ngx_http_finalize_request(r, rc);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    u-&gt;store = u-&gt;conf-&gt;store;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *设置Nginx与下游客户端之间TCP连接的检查方法</span></span><br><span class="line"><span class="comment">    *实际上，这两个方法都会通过ngx_http_upstream_check_broken_connection方法检查Nginx与下游的连接是否正常，如果出现错误，就会立即终止连接。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!u-&gt;store &amp;&amp; !r-&gt;post_action &amp;&amp; !u-&gt;conf-&gt;ignore_client_abort) &#123;</span><br><span class="line">        <span class="comment">//注意这时候的r还是客户端的连接，与上游服务器的连接r还没有建立</span></span><br><span class="line">        r-&gt;read_event_handler = ngx_http_upstream_rd_check_broken_connection;</span><br><span class="line">        r-&gt;write_event_handler = ngx_http_upstream_wr_check_broken_connection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有接收到客户端包体，则把包体结构赋值给u-&gt;request_bufs，在后面的if (u-&gt;create_request(r) != NGX_OK) &#123;会用到</span></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;request_body) &#123;</span><br><span class="line">        u-&gt;request_bufs = r-&gt;request_body-&gt;bufs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;create_request(r) != NGX_OK) &#123; <span class="comment">//ngx_http_proxy_create_request</span></span><br><span class="line">        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_upstream_set_local(r, u, u-&gt;conf-&gt;local) != NGX_OK) &#123;</span><br><span class="line">        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;conf-&gt;socket_keepalive) &#123;</span><br><span class="line">        u-&gt;peer.so_keepalive = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);</span><br><span class="line">    <span class="comment">/* 初始化ngx_http_upstream_t结构中成员output向下游发送响应的方式 */</span></span><br><span class="line">    u-&gt;output.alignment = clcf-&gt;directio_alignment;</span><br><span class="line">    u-&gt;output.pool = r-&gt;pool;</span><br><span class="line">    u-&gt;output.bufs.num = <span class="number">1</span>;</span><br><span class="line">    u-&gt;output.bufs.size = clcf-&gt;client_body_buffer_size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;output.output_filter == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        u-&gt;output.output_filter = ngx_chain_writer;</span><br><span class="line">        u-&gt;output.filter_ctx = &amp;u-&gt;writer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;writer.pool = r-&gt;pool;</span><br><span class="line">    <span class="comment">/* 添加用于表示上游响应的状态，例如：错误编码、包体长度等 */</span></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;upstream_states == <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        r-&gt;upstream_states = ngx_array_create(r-&gt;pool, <span class="number">1</span>,</span><br><span class="line">                                            <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_upstream_state_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (r-&gt;upstream_states == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        u-&gt;state = ngx_array_push(r-&gt;upstream_states);</span><br><span class="line">        <span class="keyword">if</span> (u-&gt;state == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ngx_memzero(u-&gt;state, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_upstream_state_t</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cln = ngx_http_cleanup_add(r, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (cln == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cln-&gt;handler = ngx_http_upstream_cleanup; <span class="comment">//当请求结束时，一定会调用ngx_http_upstream_cleanup方法</span></span><br><span class="line">    cln-&gt;data = r;</span><br><span class="line">    u-&gt;cleanup = &amp;cln-&gt;handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;resolved == <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        uscf = u-&gt;conf-&gt;upstream;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> (NGX_HTTP_SSL)</span><br><span class="line">        u-&gt;ssl_name = u-&gt;resolved-&gt;host;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        host = &amp;u-&gt;resolved-&gt;host;</span><br><span class="line"></span><br><span class="line">        umcf = ngx_http_get_module_main_conf(r, ngx_http_upstream_module);</span><br><span class="line"></span><br><span class="line">        uscfp = umcf-&gt;upstreams.elts;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; umcf-&gt;upstreams.nelts; i++) &#123;</span><br><span class="line"></span><br><span class="line">            uscf = uscfp[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (uscf-&gt;host.len == host-&gt;len</span><br><span class="line">                &amp;&amp; ((uscf-&gt;port == <span class="number">0</span> &amp;&amp; u-&gt;resolved-&gt;no_port)</span><br><span class="line">                     || uscf-&gt;port == u-&gt;resolved-&gt;port)</span><br><span class="line">                &amp;&amp; ngx_strncasecmp(uscf-&gt;host.data, host-&gt;data, host-&gt;len) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">goto</span> found;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u-&gt;resolved-&gt;sockaddr) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (u-&gt;resolved-&gt;port == <span class="number">0</span></span><br><span class="line">                &amp;&amp; u-&gt;resolved-&gt;sockaddr-&gt;sa_family != AF_UNIX)</span><br><span class="line">            &#123;</span><br><span class="line">                ngx_log_error(NGX_LOG_ERR, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                              <span class="string">"no port in upstream \"%V\""</span>, host);</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_http_upstream_create_round_robin_peer(r, u-&gt;resolved)</span><br><span class="line">                != NGX_OK)</span><br><span class="line">            &#123;</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ngx_http_upstream_connect(r, u);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u-&gt;resolved-&gt;port == <span class="number">0</span>) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_ERR, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                          <span class="string">"no port in upstream \"%V\""</span>, host);</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        temp.name = *host;</span><br><span class="line">        <span class="comment">// 初始化域名解析器</span></span><br><span class="line">        ctx = ngx_resolve_start(clcf-&gt;resolver, &amp;temp);</span><br><span class="line">        <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ctx == NGX_NO_RESOLVER) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_ERR, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                          <span class="string">"no resolver defined to resolve %V"</span>, host);</span><br><span class="line"></span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, NGX_HTTP_BAD_GATEWAY);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx-&gt;name = *host;</span><br><span class="line">        ctx-&gt;handler = ngx_http_upstream_resolve_handler; <span class="comment">//设置域名解析完成后的回调函数。</span></span><br><span class="line">        ctx-&gt;data = r;</span><br><span class="line">        ctx-&gt;timeout = clcf-&gt;resolver_timeout;</span><br><span class="line"></span><br><span class="line">        u-&gt;resolved-&gt;ctx = ctx;</span><br><span class="line">        <span class="comment">//开始域名解析，没有完成也会返回的。</span></span><br><span class="line">        <span class="keyword">if</span> (ngx_resolve_name(ctx) != NGX_OK) &#123;</span><br><span class="line">            u-&gt;resolved-&gt;ctx = <span class="literal">NULL</span>;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                               NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// 域名还没有解析完成，则直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">found:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uscf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_ALERT, r-&gt;connection-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="string">"no upstream configuration"</span>);</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                           NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;upstream = uscf;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_SSL)</span></span><br><span class="line">    u-&gt;ssl_name = uscf-&gt;host;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uscf-&gt;peer.init(r, uscf) != NGX_OK) &#123;</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u,</span><br><span class="line">                                           NGX_HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;peer.start_time = ngx_current_msec;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;conf-&gt;next_upstream_tries</span><br><span class="line">        &amp;&amp; u-&gt;peer.tries &gt; u-&gt;conf-&gt;next_upstream_tries)</span><br><span class="line">    &#123;</span><br><span class="line">        u-&gt;peer.tries = u-&gt;conf-&gt;next_upstream_tries;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_http_upstream_connect(r, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-10-接受上游返回的数据"><a href="#2-10-接受上游返回的数据" class="headerlink" title="2.10 接受上游返回的数据"></a>2.10 接受上游返回的数据</h3><blockquote><p>该功能由<em>ngx_http_upstream_send_response</em>函数实现，我们来看看源码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">ngx_http_upstream_send_response(<span class="keyword">ngx_http_request_t</span> *r, <span class="keyword">ngx_http_upstream_t</span> *u)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ssize_t</span>                    n;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                  rc;</span><br><span class="line">    <span class="keyword">ngx_event_pipe_t</span>          *p;</span><br><span class="line">    <span class="keyword">ngx_connection_t</span>          *c;</span><br><span class="line">    <span class="keyword">ngx_http_core_loc_conf_t</span>  *clcf;</span><br><span class="line"></span><br><span class="line">    rc = ngx_http_send_header(r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == NGX_ERROR || rc &gt; NGX_OK || r-&gt;post_action) &#123;</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u, rc);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;header_sent = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;upgrade) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r-&gt;cache) &#123;</span><br><span class="line">            ngx_http_file_cache_free(r-&gt;cache, u-&gt;pipe-&gt;temp_file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        ngx_http_upstream_upgrade(r, u);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c = r-&gt;connection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;header_only) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!u-&gt;buffering) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, rc);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!u-&gt;cacheable &amp;&amp; !u-&gt;store) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, rc);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        u-&gt;pipe-&gt;downstream_error = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;request_body &amp;&amp; r-&gt;request_body-&gt;temp_file</span><br><span class="line">        &amp;&amp; r == r-&gt;main &amp;&amp; !r-&gt;preserve_body</span><br><span class="line">        &amp;&amp; !u-&gt;conf-&gt;preserve_output)</span><br><span class="line">    &#123;</span><br><span class="line">        ngx_pool_run_cleanup_file(r-&gt;pool, r-&gt;request_body-&gt;temp_file-&gt;file.fd);</span><br><span class="line">        r-&gt;request_body-&gt;temp_file-&gt;file.fd = NGX_INVALID_FILE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!u-&gt;buffering) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r-&gt;cache) &#123;</span><br><span class="line">            ngx_http_file_cache_free(r-&gt;cache, u-&gt;pipe-&gt;temp_file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u-&gt;input_filter == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            u-&gt;input_filter_init = ngx_http_upstream_non_buffered_filter_init;</span><br><span class="line">            u-&gt;input_filter = ngx_http_upstream_non_buffered_filter;</span><br><span class="line">            u-&gt;input_filter_ctx = r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        u-&gt;read_event_handler = ngx_http_upstream_process_non_buffered_upstream;</span><br><span class="line">        r-&gt;write_event_handler =</span><br><span class="line">                             ngx_http_upstream_process_non_buffered_downstream;</span><br><span class="line"></span><br><span class="line">        r-&gt;limit_rate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u-&gt;input_filter_init(u-&gt;input_filter_ctx) == NGX_ERROR) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clcf-&gt;tcp_nodelay &amp;&amp; ngx_tcp_nodelay(c) != NGX_OK) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n = u-&gt;buffer.last - u-&gt;buffer.pos;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n) &#123;</span><br><span class="line">            u-&gt;buffer.last = u-&gt;buffer.pos;</span><br><span class="line"></span><br><span class="line">            u-&gt;state-&gt;response_length += n;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (u-&gt;input_filter(u-&gt;input_filter_ctx, n) == NGX_ERROR) &#123;</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ngx_http_upstream_process_non_buffered_downstream(r);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            u-&gt;buffer.pos = u-&gt;buffer.start;</span><br><span class="line">            u-&gt;buffer.last = u-&gt;buffer.start;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_http_send_special(r, NGX_HTTP_FLUSH) == NGX_ERROR) &#123;</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (u-&gt;peer.connection-&gt;read-&gt;ready || u-&gt;length == <span class="number">0</span>) &#123;</span><br><span class="line">                ngx_http_upstream_process_non_buffered_upstream(r, u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> preallocate event_pipe bufs, look "Content-Length" */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;cache &amp;&amp; r-&gt;cache-&gt;file.fd != NGX_INVALID_FILE) &#123;</span><br><span class="line">        ngx_pool_run_cleanup_file(r-&gt;pool, r-&gt;cache-&gt;file.fd);</span><br><span class="line">        r-&gt;cache-&gt;file.fd = NGX_INVALID_FILE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (ngx_http_test_predicates(r, u-&gt;conf-&gt;no_cache)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> NGX_ERROR:</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> NGX_DECLINED:</span><br><span class="line">        u-&gt;cacheable = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">/* NGX_OK */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u-&gt;cache_status == NGX_HTTP_CACHE_BYPASS) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* create cache if previously bypassed */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_http_file_cache_create(r) != NGX_OK) &#123;</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;cacheable) &#123;</span><br><span class="line">        <span class="keyword">time_t</span>  now, valid;</span><br><span class="line"></span><br><span class="line">        now = ngx_time();</span><br><span class="line"></span><br><span class="line">        valid = r-&gt;cache-&gt;valid_sec;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valid == <span class="number">0</span>) &#123;</span><br><span class="line">            valid = ngx_http_file_cache_valid(u-&gt;conf-&gt;cache_valid,</span><br><span class="line">                                              u-&gt;headers_in.status_n);</span><br><span class="line">            <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                r-&gt;cache-&gt;valid_sec = now + valid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有配置proxy_cache_valid，valid的值为0</span></span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            r-&gt;cache-&gt;date = now;</span><br><span class="line">            r-&gt;cache-&gt;body_start = (u_short) (u-&gt;buffer.pos - u-&gt;buffer.start);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (u-&gt;headers_in.status_n == NGX_HTTP_OK</span><br><span class="line">                || u-&gt;headers_in.status_n == NGX_HTTP_PARTIAL_CONTENT)</span><br><span class="line">            &#123;</span><br><span class="line">                r-&gt;cache-&gt;last_modified = u-&gt;headers_in.last_modified_time;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (u-&gt;headers_in.etag) &#123;</span><br><span class="line">                    r-&gt;cache-&gt;etag = u-&gt;headers_in.etag-&gt;value;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ngx_str_null(&amp;r-&gt;cache-&gt;etag);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r-&gt;cache-&gt;last_modified = <span class="number">-1</span>;</span><br><span class="line">                ngx_str_null(&amp;r-&gt;cache-&gt;etag);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_http_file_cache_set_header(r, u-&gt;buffer.start) != NGX_OK) &#123;</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            u-&gt;cacheable = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"http cacheable: %d"</span>, u-&gt;cacheable);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;cacheable == <span class="number">0</span> &amp;&amp; r-&gt;cache) &#123;</span><br><span class="line">        ngx_http_file_cache_free(r-&gt;cache, u-&gt;pipe-&gt;temp_file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;header_only &amp;&amp; !u-&gt;cacheable &amp;&amp; !u-&gt;store) &#123;</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    p = u-&gt;pipe;</span><br><span class="line"></span><br><span class="line">    p-&gt;output_filter = ngx_http_upstream_output_filter;</span><br><span class="line">    p-&gt;output_ctx = r;</span><br><span class="line">    p-&gt;tag = u-&gt;output.tag;</span><br><span class="line">    p-&gt;bufs = u-&gt;conf-&gt;bufs;</span><br><span class="line">    p-&gt;busy_size = u-&gt;conf-&gt;busy_buffers_size;</span><br><span class="line">    p-&gt;upstream = u-&gt;peer.connection;</span><br><span class="line">    p-&gt;downstream = c;</span><br><span class="line">    p-&gt;pool = r-&gt;pool;</span><br><span class="line">    p-&gt;<span class="built_in">log</span> = c-&gt;<span class="built_in">log</span>;</span><br><span class="line">    p-&gt;limit_rate = u-&gt;conf-&gt;limit_rate;</span><br><span class="line">    p-&gt;start_sec = ngx_time();</span><br><span class="line"></span><br><span class="line">    p-&gt;cacheable = u-&gt;cacheable || u-&gt;store;</span><br><span class="line"></span><br><span class="line">    p-&gt;temp_file = ngx_pcalloc(r-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_temp_file_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;temp_file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;temp_file-&gt;file.fd = NGX_INVALID_FILE;</span><br><span class="line">    p-&gt;temp_file-&gt;file.<span class="built_in">log</span> = c-&gt;<span class="built_in">log</span>;</span><br><span class="line">    p-&gt;temp_file-&gt;path = u-&gt;conf-&gt;temp_path; <span class="comment">//u-&gt;conf-&gt;temp_path的值在ngx_http_proxy_handler函数中赋值，赋值流程为ngx_http_proxy_merge_loc_conf-&gt;ngx_conf_merge_path_value</span></span><br><span class="line">    p-&gt;temp_file-&gt;pool = r-&gt;pool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;cacheable) &#123;</span><br><span class="line">        p-&gt;temp_file-&gt;persistent = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line">        <span class="keyword">if</span> (r-&gt;cache &amp;&amp; !r-&gt;cache-&gt;file_cache-&gt;use_temp_path) &#123;</span><br><span class="line">            p-&gt;temp_file-&gt;path = r-&gt;cache-&gt;file_cache-&gt;path;</span><br><span class="line">            p-&gt;temp_file-&gt;file.name = r-&gt;cache-&gt;file.name;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p-&gt;temp_file-&gt;log_level = NGX_LOG_WARN;</span><br><span class="line">        p-&gt;temp_file-&gt;warn = <span class="string">"an upstream response is buffered "</span></span><br><span class="line">                             <span class="string">"to a temporary file"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;max_temp_file_size = u-&gt;conf-&gt;max_temp_file_size;</span><br><span class="line">    p-&gt;temp_file_write_size = u-&gt;conf-&gt;temp_file_write_size;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_THREADS)</span></span><br><span class="line">    <span class="keyword">if</span> (clcf-&gt;aio == NGX_HTTP_AIO_THREADS &amp;&amp; clcf-&gt;aio_write) &#123;</span><br><span class="line">        p-&gt;thread_handler = ngx_http_upstream_thread_handler;</span><br><span class="line">        p-&gt;thread_ctx = r;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    p-&gt;preread_bufs = ngx_alloc_chain_link(r-&gt;pool);</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;preread_bufs == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;preread_bufs-&gt;buf = &amp;u-&gt;buffer;</span><br><span class="line">    p-&gt;preread_bufs-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    u-&gt;buffer.recycled = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    p-&gt;preread_size = u-&gt;buffer.last - u-&gt;buffer.pos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;cacheable) &#123;</span><br><span class="line"></span><br><span class="line">        p-&gt;buf_to_file = ngx_calloc_buf(r-&gt;pool);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;buf_to_file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p-&gt;buf_to_file-&gt;start = u-&gt;buffer.start;</span><br><span class="line">        p-&gt;buf_to_file-&gt;pos = u-&gt;buffer.start;</span><br><span class="line">        p-&gt;buf_to_file-&gt;last = u-&gt;buffer.pos;</span><br><span class="line">        p-&gt;buf_to_file-&gt;temporary = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_event_flags &amp; NGX_USE_IOCP_EVENT) &#123;</span><br><span class="line">        <span class="comment">/* the posted aio operation may corrupt a shadow buffer */</span></span><br><span class="line">        p-&gt;single_buf = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> p-&gt;free_bufs = 0 if use ngx_create_chain_of_bufs() */</span></span><br><span class="line">    p-&gt;free_bufs = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * event_pipe would do u-&gt;buffer.last += p-&gt;preread_size</span></span><br><span class="line"><span class="comment">     * as though these bytes were read</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    u-&gt;buffer.last = u-&gt;buffer.pos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;conf-&gt;cyclic_temp_file) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * we need to disable the use of sendfile() if we use cyclic temp file</span></span><br><span class="line"><span class="comment">         * because the writing a new data may interfere with sendfile()</span></span><br><span class="line"><span class="comment">         * that uses the same kernel file pages (at least on FreeBSD)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        p-&gt;cyclic_temp_file = <span class="number">1</span>;</span><br><span class="line">        c-&gt;sendfile = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p-&gt;cyclic_temp_file = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;read_timeout = u-&gt;conf-&gt;read_timeout;</span><br><span class="line">    p-&gt;send_timeout = clcf-&gt;send_timeout;</span><br><span class="line">    p-&gt;send_lowat = clcf-&gt;send_lowat;</span><br><span class="line"></span><br><span class="line">    p-&gt;length = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u-&gt;input_filter_init</span><br><span class="line">        &amp;&amp; u-&gt;input_filter_init(p-&gt;input_ctx) != NGX_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;read_event_handler = ngx_http_upstream_process_upstream;</span><br><span class="line">    r-&gt;write_event_handler = ngx_http_upstream_process_downstream;</span><br><span class="line"></span><br><span class="line">    ngx_http_upstream_process_upstream(r, u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>读取数据的具体操作在<em>ngx_http_upstream_process_upstream</em>函数中实现</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">ngx_http_upstream_process_upstream(<span class="keyword">ngx_http_request_t</span> *r,</span><br><span class="line">    <span class="keyword">ngx_http_upstream_t</span> *u)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_event_t</span>       *rev;</span><br><span class="line">    <span class="keyword">ngx_event_pipe_t</span>  *p;</span><br><span class="line">    <span class="keyword">ngx_connection_t</span>  *c;</span><br><span class="line"></span><br><span class="line">    c = u-&gt;peer.connection;</span><br><span class="line">    p = u-&gt;pipe;</span><br><span class="line">    rev = c-&gt;read;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">"http upstream process upstream"</span>);</span><br><span class="line"></span><br><span class="line">    c-&gt;<span class="built_in">log</span>-&gt;action = <span class="string">"reading upstream"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rev-&gt;timedout) &#123;</span><br><span class="line"></span><br><span class="line">        p-&gt;upstream_error = <span class="number">1</span>;</span><br><span class="line">        ngx_connection_error(c, NGX_ETIMEDOUT, <span class="string">"upstream timed out"</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">//请求没有超时，那么对后端，处理一下读事件。ngx_event_pipe开始处理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rev-&gt;delayed) &#123;</span><br><span class="line"></span><br><span class="line">            ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">"http upstream delayed"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_handle_read_event(rev, <span class="number">0</span>) != NGX_OK) &#123;</span><br><span class="line">                ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_event_pipe(p, <span class="number">0</span>) == NGX_ABORT) &#123;</span><br><span class="line">            ngx_http_upstream_finalize_request(r, u, NGX_ERROR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注意走到这里的时候，后端发送的头部行信息已经在前面的ngx_http_upstream_send_response-&gt;ngx_http_send_header已经把头部行部分发送给客户端了</span></span><br><span class="line">    <span class="comment">//该函数处理的只是后端放回过来的网页包体部分</span></span><br><span class="line">    ngx_http_upstream_process_request(r, u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接下来分析一下<em>ngx_event_pipe</em>这个函数，在有buffering的时候，使用event_pipe进行数据的转发，调用ngx_event_pipe_write_to_downstream函数读取数据，或者发送数据给客户端。<br>ngx_event_pipe将upstream响应发送回客户端。do_write代表是否要往客户端发送，写数据。如果设置了，那么会先发给客户端，再读upstream数据，当然，如果读取了数据，也会调用这里的。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_event_pipe(<span class="keyword">ngx_event_pipe_t</span> *p, <span class="keyword">ngx_int_t</span> do_write)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>     rc;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>    flags;</span><br><span class="line">    <span class="keyword">ngx_event_t</span>  *rev, *wev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( ;; ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (do_write) &#123;</span><br><span class="line">            p-&gt;<span class="built_in">log</span>-&gt;action = <span class="string">"sending to client"</span>;</span><br><span class="line"></span><br><span class="line">            rc = ngx_event_pipe_write_to_downstream(p);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rc == NGX_ABORT) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_ABORT;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rc == NGX_BUSY) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_OK;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p-&gt;read = <span class="number">0</span>;</span><br><span class="line">        p-&gt;upstream_blocked = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        p-&gt;<span class="built_in">log</span>-&gt;action = <span class="string">"reading upstream"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_event_pipe_read_upstream(p) == NGX_ABORT) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ABORT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!p-&gt;read &amp;&amp; !p-&gt;upstream_blocked) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        do_write = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;upstream-&gt;fd != (<span class="keyword">ngx_socket_t</span>) <span class="number">-1</span>) &#123;</span><br><span class="line">        rev = p-&gt;upstream-&gt;read;</span><br><span class="line"></span><br><span class="line">        flags = (rev-&gt;eof || rev-&gt;error) ? NGX_CLOSE_EVENT : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_handle_read_event(rev, flags) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ABORT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!rev-&gt;delayed) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rev-&gt;active &amp;&amp; !rev-&gt;ready) &#123;</span><br><span class="line">                ngx_add_timer(rev, p-&gt;read_timeout);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rev-&gt;timer_set) &#123;</span><br><span class="line">                ngx_del_timer(rev);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;downstream-&gt;fd != (<span class="keyword">ngx_socket_t</span>) <span class="number">-1</span></span><br><span class="line">        &amp;&amp; p-&gt;downstream-&gt;data == p-&gt;output_ctx)</span><br><span class="line">    &#123;</span><br><span class="line">        wev = p-&gt;downstream-&gt;write;</span><br><span class="line">        <span class="keyword">if</span> (ngx_handle_write_event(wev, p-&gt;send_lowat) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_ABORT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!wev-&gt;delayed) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wev-&gt;active &amp;&amp; !wev-&gt;ready) &#123;</span><br><span class="line">                ngx_add_timer(wev, p-&gt;send_timeout);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wev-&gt;timer_set) &#123;</span><br><span class="line">                ngx_del_timer(wev);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个函数中最重要的就是ngx_event_pipe_write_to_downstream跟ngx_event_pipe_read_upstream，这两个函数将处理来自上游的数据以及将数据转发到客户端。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关配置&quot;&gt;&lt;a href=&quot;#1-相关配置&quot; class=&quot;headerlink&quot; title=&quot;1. 相关配置&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx反向代理详解</title>
    <link href="https://weeweetan.github.io/2019/06/17/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2019/06/17/Nginx反向代理详解/</id>
    <published>2019-06-17T12:59:19.000Z</published>
    <updated>2019-07-28T13:50:36.966Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1-相关配置"><a href="#1-相关配置" class="headerlink" title="1. 相关配置"></a>1. 相关配置</h2><blockquote><p>Nginx实现反向代理功能主要由proxy_pass、upstream指令实现，配置指令如下：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    upstream proxy &#123;</span><br><span class="line">        server 127.0.0.1:8080</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://proxy</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>具体配置可以参考<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="noopener">ngx_http_proxy_module</a></p></blockquote><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2. 源码解析"></a>2. 源码解析</h2><blockquote><p>Nginx实现反向代理功能的源码在src/http/modules/ngx_http_proxy_module.c，因为反向代理模块是一种upstream模块，所以还有一些基础代码在src/http/ngx_http_upstream.c中</p></blockquote><h3 id="2-1-入口函数"><a href="#2-1-入口函数" class="headerlink" title="2.1 入口函数"></a>2.1 入口函数</h3><blockquote><p>反向代理模块的入口函数是<strong>ngx_http_proxy_handler</strong>，我们看一下源码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_int_t</span></span><br><span class="line">ngx_http_proxy_handler(<span class="keyword">ngx_http_request_t</span> *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_int_t</span>                    rc;</span><br><span class="line">    <span class="keyword">ngx_http_upstream_t</span>         *u;</span><br><span class="line">    <span class="keyword">ngx_http_proxy_ctx_t</span>        *ctx;</span><br><span class="line">    <span class="keyword">ngx_http_proxy_loc_conf_t</span>   *plcf;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line">    <span class="keyword">ngx_http_proxy_main_conf_t</span>  *pmcf;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_http_upstream_create(r) != NGX_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx = ngx_pcalloc(r-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_http_proxy_ctx_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_http_set_ctx(r, ctx, ngx_http_proxy_module);</span><br><span class="line"></span><br><span class="line">    plcf = ngx_http_get_module_loc_conf(r, ngx_http_proxy_module);</span><br><span class="line"></span><br><span class="line">    u = r-&gt;upstream;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (plcf-&gt;proxy_lengths == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ctx-&gt;vars = plcf-&gt;vars;</span><br><span class="line">        u-&gt;schema = plcf-&gt;vars.schema;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_SSL)</span></span><br><span class="line">        u-&gt;ssl = (plcf-&gt;upstream.ssl != <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ngx_http_proxy_eval(r, ctx, plcf) != NGX_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;output.tag = (<span class="keyword">ngx_buf_tag_t</span>) &amp;ngx_http_proxy_module;</span><br><span class="line"></span><br><span class="line">    u-&gt;conf = &amp;plcf-&gt;upstream;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></span><br><span class="line">    pmcf = ngx_http_get_module_main_conf(r, ngx_http_proxy_module);</span><br><span class="line"></span><br><span class="line">    u-&gt;caches = &amp;pmcf-&gt;caches;</span><br><span class="line">    u-&gt;create_key = ngx_http_proxy_create_key;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    u-&gt;create_request = ngx_http_proxy_create_request;</span><br><span class="line">    u-&gt;reinit_request = ngx_http_proxy_reinit_request;</span><br><span class="line">    u-&gt;process_header = ngx_http_proxy_process_status_line;</span><br><span class="line">    u-&gt;abort_request = ngx_http_proxy_abort_request;</span><br><span class="line">    u-&gt;finalize_request = ngx_http_proxy_finalize_request;</span><br><span class="line">    r-&gt;state = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (plcf-&gt;redirects) &#123;</span><br><span class="line">        u-&gt;rewrite_redirect = ngx_http_proxy_rewrite_redirect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (plcf-&gt;cookie_domains || plcf-&gt;cookie_paths) &#123;</span><br><span class="line">        u-&gt;rewrite_cookie = ngx_http_proxy_rewrite_cookie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;buffering = plcf-&gt;upstream.buffering;</span><br><span class="line"></span><br><span class="line">    u-&gt;pipe = ngx_pcalloc(r-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_event_pipe_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (u-&gt;pipe == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u-&gt;pipe-&gt;input_filter = ngx_http_proxy_copy_filter;</span><br><span class="line">    u-&gt;pipe-&gt;input_ctx = r;</span><br><span class="line"></span><br><span class="line">    u-&gt;input_filter_init = ngx_http_proxy_input_filter_init;</span><br><span class="line">    u-&gt;input_filter = ngx_http_proxy_non_buffered_copy_filter;</span><br><span class="line">    u-&gt;input_filter_ctx = r;</span><br><span class="line"></span><br><span class="line">    u-&gt;accel = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!plcf-&gt;upstream.request_buffering</span><br><span class="line">        &amp;&amp; plcf-&gt;body_values == <span class="literal">NULL</span> &amp;&amp; plcf-&gt;upstream.pass_request_body</span><br><span class="line">        &amp;&amp; (!r-&gt;headers_in.chunked</span><br><span class="line">            || plcf-&gt;http_version == NGX_HTTP_VERSION_11))</span><br><span class="line">    &#123;</span><br><span class="line">        r-&gt;request_body_no_buffering = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rc = ngx_http_read_client_request_body(r, ngx_http_upstream_init);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc &gt;= NGX_HTTP_SPECIAL_RESPONSE) &#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NGX_DONE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>该函数首先调用<em>ngx_http_upstream_create</em>函数从内存池中创建<em>ngx_http_upstream_s</em>结构体；</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ngx_http_upstream_create(r) != NGX_OK) &#123;</span><br><span class="line">    <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>接下来初始化<em>ngx_http_upstream_s</em>各成员，应当注意<em>ngx_http_upstream_s</em>结构体的几个回调函数，这个是实现反向代理的重要功能</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">u-&gt;create_request = ngx_http_proxy_create_request;</span><br><span class="line">u-&gt;reinit_request = ngx_http_proxy_reinit_request;</span><br><span class="line">u-&gt;process_header = ngx_http_proxy_process_status_line;</span><br><span class="line">u-&gt;abort_request = ngx_http_proxy_abort_request;</span><br><span class="line">u-&gt;finalize_request = ngx_http_proxy_finalize_request;</span><br><span class="line">r-&gt;state = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (plcf-&gt;redirects) &#123;</span><br><span class="line">    u-&gt;rewrite_redirect = ngx_http_proxy_rewrite_redirect;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (plcf-&gt;cookie_domains || plcf-&gt;cookie_paths) &#123;</span><br><span class="line">    u-&gt;rewrite_cookie = ngx_http_proxy_rewrite_cookie;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">u-&gt;buffering = plcf-&gt;upstream.buffering;</span><br><span class="line">    </span><br><span class="line">u-&gt;pipe = ngx_pcalloc(r-&gt;pool, <span class="keyword">sizeof</span>(<span class="keyword">ngx_event_pipe_t</span>));</span><br><span class="line"><span class="keyword">if</span> (u-&gt;pipe == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">u-&gt;pipe-&gt;input_filter = ngx_http_proxy_copy_filter;</span><br><span class="line">u-&gt;pipe-&gt;input_ctx = r;</span><br><span class="line">    </span><br><span class="line">u-&gt;input_filter_init = ngx_http_proxy_input_filter_init;</span><br><span class="line">u-&gt;input_filter = ngx_http_proxy_non_buffered_copy_filter;</span><br><span class="line">u-&gt;input_filter_ctx = r;</span><br><span class="line">    </span><br><span class="line">u-&gt;accel = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关配置&quot;&gt;&lt;a href=&quot;#1-相关配置&quot; class=&quot;headerlink&quot; title=&quot;1. 相关配置&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx日志详解</title>
    <link href="https://weeweetan.github.io/2019/06/15/Nginx%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2019/06/15/Nginx日志详解/</id>
    <published>2019-06-15T12:59:00.000Z</published>
    <updated>2019-08-07T03:10:04.761Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1-相关配置"><a href="#1-相关配置" class="headerlink" title="1. 相关配置"></a>1. 相关配置</h2><blockquote><p>Nginx日志系统由两条指令开启error_log、access_log</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">error_log  logs/error.log debug;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>具体配置可以参考<a href="http://nginx.org/en/docs/ngx_core_module.html#error_log" target="_blank" rel="noopener">error_log</a>跟<a href="http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log" target="_blank" rel="noopener">access_log</a></p></blockquote><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2. 源码解析"></a>2. 源码解析</h2><blockquote><p>首先来看一下关于日志的几个宏定义</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">filename:<span class="built_in">log</span>.h</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_C99_VARIADIC_MACROS)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NGX_HAVE_VARIADIC_MACROS  1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_log_error(level, log, ...)                                        \</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">log</span>)-&gt;log_level &gt;= level) ngx_log_error_core(level, <span class="built_in">log</span>, __VA_ARGS__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ngx_log_error_core</span><span class="params">(<span class="keyword">ngx_uint_t</span> level, <span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_log_debug(level, log, ...)                                        \</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">log</span>)-&gt;log_level &amp; level)                                             \</span><br><span class="line">        ngx_log_error_core(NGX_LOG_DEBUG, <span class="built_in">log</span>, __VA_ARGS__)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> (NGX_HAVE_GCC_VARIADIC_MACROS)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NGX_HAVE_VARIADIC_MACROS  1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_log_error(level, log, args...)                                    \</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">log</span>)-&gt;log_level &gt;= level) ngx_log_error_core(level, <span class="built_in">log</span>, args)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ngx_log_error_core</span><span class="params">(<span class="keyword">ngx_uint_t</span> level, <span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ngx_log_debug(level, log, args...)                                    \</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">log</span>)-&gt;log_level &amp; level)                                             \</span><br><span class="line">        ngx_log_error_core(NGX_LOG_DEBUG, <span class="built_in">log</span>, args)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* no variadic macros */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NGX_HAVE_VARIADIC_MACROS  0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> ngx_cdecl <span class="title">ngx_log_error</span><span class="params">(<span class="keyword">ngx_uint_t</span> level, <span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ngx_log_error_core</span><span class="params">(<span class="keyword">ngx_uint_t</span> level, <span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list args)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> ngx_cdecl <span class="title">ngx_log_debug_core</span><span class="params">(<span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* variadic macros */</span></span></span><br></pre></td></tr></table></figure><blockquote><p>从上面的定义可以看出，实现日志功能的核心在于<em>ngx_log_error_core</em>函数，接下来我们就来看看这个函数的实现</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_VARIADIC_MACROS)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_log_error_core(<span class="keyword">ngx_uint_t</span> level, <span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_log_error_core(<span class="keyword">ngx_uint_t</span> level, <span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>, <span class="keyword">ngx_err_t</span> err,</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list args)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_VARIADIC_MACROS)</span></span><br><span class="line">    va_list      args;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    u_char      *p, *last, *msg;</span><br><span class="line">    <span class="keyword">ssize_t</span>      n;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>   wrote_stderr, debug_connection;</span><br><span class="line">    u_char       errstr[NGX_MAX_ERROR_STR];</span><br><span class="line"></span><br><span class="line">    last = errstr + NGX_MAX_ERROR_STR;</span><br><span class="line"></span><br><span class="line">    p = ngx_cpymem(errstr, ngx_cached_err_log_time.data,</span><br><span class="line">                   ngx_cached_err_log_time.len);</span><br><span class="line"></span><br><span class="line">    p = ngx_slprintf(p, last, <span class="string">" [%V] "</span>, &amp;err_levels[level]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* pid#tid */</span></span><br><span class="line">    p = ngx_slprintf(p, last, <span class="string">"%P#"</span> NGX_TID_T_FMT <span class="string">": "</span>,</span><br><span class="line">                    ngx_log_pid, ngx_log_tid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">log</span>-&gt;connection) &#123;</span><br><span class="line">        p = ngx_slprintf(p, last, <span class="string">"*%uA "</span>, <span class="built_in">log</span>-&gt;connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    msg = p;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_VARIADIC_MACROS)</span></span><br><span class="line"></span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    p = ngx_vslprintf(p, last, fmt, args);</span><br><span class="line">    va_end(args);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line">    p = ngx_vslprintf(p, last, fmt, args);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        p = ngx_log_errno(p, last, err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (level != NGX_LOG_DEBUG &amp;&amp; <span class="built_in">log</span>-&gt;handler) &#123;</span><br><span class="line">        p = <span class="built_in">log</span>-&gt;handler(<span class="built_in">log</span>, p, last - p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p &gt; last - NGX_LINEFEED_SIZE) &#123;</span><br><span class="line">        p = last - NGX_LINEFEED_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_linefeed(p);</span><br><span class="line"></span><br><span class="line">    wrote_stderr = <span class="number">0</span>;</span><br><span class="line">    debug_connection = (<span class="built_in">log</span>-&gt;log_level &amp; NGX_LOG_DEBUG_CONNECTION) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">log</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">log</span>-&gt;log_level &lt; level &amp;&amp; !debug_connection) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">log</span>-&gt;writer) &#123;</span><br><span class="line">            <span class="built_in">log</span>-&gt;writer(<span class="built_in">log</span>, level, errstr, p - errstr);</span><br><span class="line">            <span class="keyword">goto</span> next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_time() == <span class="built_in">log</span>-&gt;disk_full_time) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * on FreeBSD writing to a full filesystem with enabled softupdates</span></span><br><span class="line"><span class="comment">             * may block process for much longer time than writing to non-full</span></span><br><span class="line"><span class="comment">             * filesystem, so we skip writing to a log for one second</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">goto</span> next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n = ngx_write_fd(<span class="built_in">log</span>-&gt;file-&gt;fd, errstr, p - errstr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span> &amp;&amp; ngx_errno == NGX_ENOSPC) &#123;</span><br><span class="line">            <span class="built_in">log</span>-&gt;disk_full_time = ngx_time();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">log</span>-&gt;file-&gt;fd == ngx_stderr) &#123;</span><br><span class="line">            wrote_stderr = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    next:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">log</span> = <span class="built_in">log</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ngx_use_stderr</span><br><span class="line">        || level &gt; NGX_LOG_WARN</span><br><span class="line">        || wrote_stderr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    msg -= (<span class="number">7</span> + err_levels[level].len + <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">void</span>) ngx_sprintf(msg, <span class="string">"nginx: [%V] "</span>, &amp;err_levels[level]);</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">void</span>) ngx_write_console(ngx_stderr, msg, p - msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>从代码中可以看出，nginx的作者对于变参处理还是很细心的，把各种情况都考虑到了，在处理好变参定义之后，就开始初始化字符串格式：</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">p = ngx_cpymem(errstr, ngx_cached_err_log_time.data,</span><br><span class="line">               ngx_cached_err_log_time.len);</span><br><span class="line"></span><br><span class="line">p = ngx_slprintf(p, last, &quot; [%V] &quot;, &amp;err_levels[level]);</span><br><span class="line"></span><br><span class="line">/* pid#tid */</span><br><span class="line">p = ngx_slprintf(p, last, &quot;%P#&quot; NGX_TID_T_FMT &quot;: &quot;,</span><br><span class="line">                ngx_log_pid, ngx_log_tid);</span><br><span class="line"></span><br><span class="line">if (log-&gt;connection) &#123;</span><br><span class="line">    p = ngx_slprintf(p, last, &quot;*%uA &quot;, log-&gt;connection);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>处理变参参数，将变参的值复制到日志串中：</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#if (NGX_HAVE_VARIADIC_MACROS)</span><br><span class="line"></span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    p = ngx_vslprintf(p, last, fmt, args);</span><br><span class="line">    va_end(args);</span><br><span class="line"></span><br><span class="line">#else</span><br><span class="line"></span><br><span class="line">    p = ngx_vslprintf(p, last, fmt, args);</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>处理错误号跟换行：</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (err) &#123;</span><br><span class="line">    p = ngx_log_errno(p, last, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (level != NGX_LOG_DEBUG &amp;&amp; log-&gt;handler) &#123;</span><br><span class="line">    p = log-&gt;handler(log, p, last - p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (p &gt; last - NGX_LINEFEED_SIZE) &#123;</span><br><span class="line">    p = last - NGX_LINEFEED_SIZE;</span><br><span class="line">&#125;</span><br><span class="line">ngx_linefeed(p);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>最后就是将日志串输出到文件或者标准错误流</li></ol></blockquote><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-相关配置&quot;&gt;&lt;a href=&quot;#1-相关配置&quot; class=&quot;headerlink&quot; title=&quot;1. 相关配置&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx模块详解</title>
    <link href="https://weeweetan.github.io/2019/06/05/Nginx%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/"/>
    <id>https://weeweetan.github.io/2019/06/05/Nginx模块详解/</id>
    <published>2019-06-05T12:58:43.000Z</published>
    <updated>2019-07-20T03:15:19.597Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1-Nginx模块综述"><a href="#1-Nginx模块综述" class="headerlink" title="1. Nginx模块综述"></a>1. Nginx模块综述</h2><blockquote><p>nginx的模块非常之多，可以认为所有代码都是以模块的形式组织，这包括核心模块和功能模块，针对不同的应用场合，并非所有的功能模块都要被用到，附录A给出的是默认configure（即简单的http服务器应用）下被连接的模块，这里虽说是模块连接，但nginx不会像apache或lighttpd那样在编译时生成so动态库而在程序执行时再进行动态加载，nginx模块源文件会在生成nginx时就直接被编译到其二进制执行文件中，所以如果要选用不同的功能模块，必须对nginx做重新配置和编译。对于功能模块的选择，如果要修改默认值，需要在进行configure时进行指定，比如新增http_flv功能模块（默认是没有这个功能的，各个选项的默认值可以在文件auto/options内看到）：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.2.0]# ./configure --with-http_flv_module</span><br></pre></td></tr></table></figure><blockquote><p>执行后，生成的objs/ngx_modules.c文件内就包含有对ngx_http_flv_module模块的引用了，要再去掉http_flv功能模块，则需要重新configure，即不带–with-http_flv_module配置后再编译生成新的nginx执行程序。通过执行./configure –help，我们可以看到更多的配置选项。<br>虽然Nginx模块有很多，并且每个模块实现的功能各不相同，但是根据模块的功能性质，可以将它们分为四个类别：<br>1， handlers：处理客户端请求并产生待响应内容，比如ngx_http_static_module模块，负责客户端的静态页面请求处理并将对应的磁盘文件准备为响应内容输出。<br>2， filters：对handlers产生的响应内容做各种过滤处理（即是增删改），比如模块ngx_http_not_modified_filter_module，对待响应内容进行过滤检测，如果通过时间戳判断出前后两次请求的响应内容没有发生任何改变，那么可以直接响应 “304 Not Modified”状态标识，让客户端使用缓存即可，而原本待发送的响应内容将被清除掉。<br>3， upstream：如果存在后端真实服务器，nginx可利用upstream模块充当反向代理（Proxy）的角色，对客户端发起的请求只负责进行转发（当然也包括后端真实服务器响应的回转），比如ngx_http_proxy_module就为标准的代理模块。<br>4， load-balance：在nginx充当中间代理时，由于后端真实服务器往往多于一个，对于某一次客户端的请求，如何选择对应的后端真实服务器来进行处理，这就有类似于ngx_http_upstream_ip_hash_module这样的模块来实现不同的负载均衡算法（Load Balance）。<br>对于这几类模块，我们马上会分别进行详细介绍并分析各自典型代表模块，不过在此之前先从nginx模块源码上来进行直观认识。前面讲过nginx的所有代码都是以模块形式进行组织，而封装nginx模块的结构体为ngx_module_s，定义如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_conf_file.h</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_module_s</span> &#123;</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>            ctx_index; <span class="comment">//当前模块在同类模块中的序号</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>            index;<span class="comment">//当前模块在所有模块中的序号</span></span><br><span class="line">    …</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>            version;<span class="comment">//当前模块版本号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span>                 *ctx;<span class="comment">//指向当前模块特有的数据</span></span><br><span class="line">    <span class="keyword">ngx_command_t</span>        *commands; <span class="comment">//指向当前模块配置项解析数组</span></span><br><span class="line">    <span class="keyword">ngx_uint_t</span>            type;<span class="comment">//模块类型</span></span><br><span class="line"><span class="comment">//以下为模块回调函数，回调时机可根据函数名看出</span></span><br><span class="line">    <span class="keyword">ngx_int_t</span>           (*init_master)(<span class="keyword">ngx_log_t</span> *<span class="built_in">log</span>);</span><br><span class="line">    …</span><br><span class="line">&#125;;</span><br><span class="line">Filename : ngx_core.h</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_module_s</span>      <span class="title">ngx_module_t</span>;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>结构体ngx_module_s值得关注的几个字段分别为ctx、commands、type，其中commands字段表示当前模块可以解析的配置项目，这在配置文件解析一章做过详细描述；表示模块类型的type值只有5种可能的值，而同一类型模块的ctx指向的数据类型也相同：</p></blockquote><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">type值</th><th style="text-align:center">ctx指向数据类型</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">NGX_CORE_MODULE</td><td style="text-align:center">ngx_core_module_t</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">NGX_EVENT_MODULE</td><td style="text-align:center">ngx_event_module_t</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">NGX_CONF_MODULE</td><td style="text-align:center">NULL</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">NGX_HTTP_MODULE</td><td style="text-align:center">ngx_http_module_t</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">NGX_MAIL_MODULE</td><td style="text-align:center">ngx_mail_module_t</td></tr></tbody></table><blockquote><p>上表中第三列里的数据类型非常重要，它们的字段基本都是一些回调函数，这些回调函数会在其模块对应的配置文件解析过程前/中/后会适时的被调用，做一些内存准备、初始化、配置值检查、初始值填充与合并、回调函数挂载等初始工作，以ngx_http_core_module模块为例，该模块type类型为NGX_HTTP_MODULE，ctx指向的ngx_http_module_t结构体变量ngx_http_core_module_ctx：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_http_core_module.c</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_http_module_t</span>  ngx_http_core_module_ctx = &#123;</span><br><span class="line">    ngx_http_core_preconfiguration,        <span class="comment">/* preconfiguration */</span></span><br><span class="line">    <span class="literal">NULL</span>,                                  <span class="comment">/* postconfiguration */</span></span><br><span class="line"></span><br><span class="line">    ngx_http_core_create_main_conf,        <span class="comment">/* create main configuration */</span></span><br><span class="line">    ngx_http_core_init_main_conf,          <span class="comment">/* init main configuration */</span></span><br><span class="line"></span><br><span class="line">    ngx_http_core_create_srv_conf,         <span class="comment">/* create server configuration */</span></span><br><span class="line">    ngx_http_core_merge_srv_conf,          <span class="comment">/* merge server configuration */</span></span><br><span class="line"></span><br><span class="line">    ngx_http_core_create_loc_conf,         <span class="comment">/* create location configuration */</span></span><br><span class="line">    ngx_http_core_merge_loc_conf           <span class="comment">/* merge location configuration */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>根据上面代码注释，可以很明显的看出各个回调函数的回调时机，比如函数<em>ngx_http_core_preconfiguration()</em>将在进行http块配置解析前被调用，所以在<em>ngx_http_block()</em>函数里可以看到这样的代码：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Filename : ngx_http.c</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">ngx_http_block(<span class="keyword">ngx_conf_t</span> *cf, <span class="keyword">ngx_command_t</span> *cmd, <span class="keyword">void</span> *conf)</span><br><span class="line">…</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;preconfiguration) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;preconfiguration(cf) != NGX_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">…</span><br><span class="line">    rv = ngx_conf_parse(cf, <span class="literal">NULL</span>);</span><br><span class="line">…</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;postconfiguration) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">module</span>-&gt;postconfiguration(cf) != NGX_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> NGX_CONF_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">…</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>至于这些回调函数内的具体逻辑，如前所述一般是一些初始或默认值填充工作，但也有回调函数挂载的设置，比如ngx_http_static_module模块的postconfiguration字段回调函数ngx_http_static_init()就是将自己的处理函数ngx_http_static_handler()挂载在http处理状态机上，但总体来看这毕竟都只是一些简单的初始准备工作，值得一提的还有ngx_http_core_create_main_conf、ngx_http_core_create_srv_conf、ngx_http_core_create_loc_conf这三个回调函数用来创建存储位于http块、server块、location块配置项的内存。</p></blockquote><p>参考文献：</p><p><a href="http://www.lenky.info/ngx_book" target="_blank" rel="noopener">nginx核心讲解</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-Nginx模块综述&quot;&gt;&lt;a href=&quot;#1-Nginx模块综述&quot; class=&quot;headerlink&quot; title=&quot;1. Ng
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Dos常用命令</title>
    <link href="https://weeweetan.github.io/2019/05/26/Dos%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://weeweetan.github.io/2019/05/26/Dos常用命令/</id>
    <published>2019-05-26T05:56:27.000Z</published>
    <updated>2019-05-26T06:04:11.118Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h2><blockquote><p>sc命令可用于卸载windows服务，如下所示：</p></blockquote><pre><code>sc delete serv</code></pre><blockquote><p>其中serv为服务名，可在服务中查看</p></blockquote><h2 id="xcopy"><a href="#xcopy" class="headerlink" title="xcopy"></a>xcopy</h2><blockquote><p>xcopy命令用于Dos下复制文件夹及子文件夹，如下所示：</p></blockquote><pre><code>xcopy d:\abc\aaa\*.* c:\windows\system /s</code></pre><blockquote><p>其中第一个参数是源位置，第二个参数是目标位置<br>/s：复制目录和子目录，除了空的。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;sc&quot;&gt;&lt;a href=&quot;#sc&quot; class=&quot;headerlink&quot; title=&quot;sc&quot;&gt;&lt;/a&gt;sc&lt;/h2&gt;&lt;blockqu
      
    
    </summary>
    
      <category term="总结" scheme="https://weeweetan.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Dos" scheme="https://weeweetan.github.io/tags/Dos/"/>
    
  </entry>
  
  <entry>
    <title>中国菜翻译方法</title>
    <link href="https://weeweetan.github.io/2019/05/18/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E7%BF%BB%E8%AF%91%E6%96%B9%E6%B3%95/"/>
    <id>https://weeweetan.github.io/2019/05/18/中国菜翻译方法/</id>
    <published>2019-05-18T02:27:42.000Z</published>
    <updated>2019-05-18T02:32:50.166Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="以主料为主"><a href="#以主料为主" class="headerlink" title="以主料为主"></a>以主料为主</h2><blockquote><p>配料或配汁为辅的翻译原则<br>菜肴的主料和配料</p><p>主料（名称/形状）+ with + 配料</p><p>如：松仁香菇 Chinese Mushrooms with Pine Nuts</p><p>菜肴的主料和配汁</p><p>主料 + with / in + 汤汁（Sauce）</p><p>如：冰梅凉瓜 Bitter Melon in Plum Sauc</p></blockquote><h2 id="以烹制方法为主"><a href="#以烹制方法为主" class="headerlink" title="以烹制方法为主"></a>以烹制方法为主</h2><blockquote><p>原料为辅的翻译原则<br>菜肴的做法和主料</p><p>做法（动词过去分词）+ 主料（名称/形状）</p><p>如：拌双耳 Tossed Black and White Fungus</p><p>菜肴的做法、主料和汤汁</p><p>做法(动词过去分词) + 主料（名称/形状）+ with / in + 汤汁</p><p>如：京酱肉丝 Sautéed Shredded Pork in Sweet Bean Sauce</p></blockquote><h2 id="以形状、口感为主"><a href="#以形状、口感为主" class="headerlink" title="以形状、口感为主"></a>以形状、口感为主</h2><blockquote><p>原料为辅的翻译原则<br>菜肴形状或口感以及主配料</p><p>形状/口感 + 主料</p><p>如：玉兔馒头 Rabbit-Shaped Mantou<br>菜肴的做法、形状或口感、做法以及主配料</p><p>做法（动词过去分词）+ 形状/口感 + 主料 + 配料</p><p>如： 小炒黑山羊 Sautéed Sliced Lamb with Pepper and Parsley</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;以主料为主&quot;&gt;&lt;a href=&quot;#以主料为主&quot; class=&quot;headerlink&quot; title=&quot;以主料为主&quot;&gt;&lt;/a&gt;以主料为主&lt;
      
    
    </summary>
    
      <category term="总结" scheme="https://weeweetan.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="翻译" scheme="https://weeweetan.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>C语言编程常见错误</title>
    <link href="https://weeweetan.github.io/2019/05/17/C%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    <id>https://weeweetan.github.io/2019/05/17/C语言编程常见错误/</id>
    <published>2019-05-17T15:21:03.000Z</published>
    <updated>2019-09-24T06:51:35.433Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1-使用close函数出现bad-file-descriptor错误"><a href="#1-使用close函数出现bad-file-descriptor错误" class="headerlink" title="1. 使用close函数出现bad file descriptor错误"></a>1. 使用close函数出现bad file descriptor错误</h2><blockquote><p>出现这种错误一般是两次close导致，仔细检查代码，调用close关闭文件描述符后，应该将文件描述符置为0，避免重复调用close，切记切记。</p></blockquote><h2 id="2-守护程序闪退问题"><a href="#2-守护程序闪退问题" class="headerlink" title="2. 守护程序闪退问题"></a>2. 守护程序闪退问题</h2><blockquote><p>出现这个问题一般是两次释放同一块内存，仔细检查释放内存与指针赋值相关代码，释放内存后，应将指针置为NULL，避免重复调用close，切记切记。</p></blockquote><h2 id="3-四字节对齐"><a href="#3-四字节对齐" class="headerlink" title="3. 四字节对齐"></a>3. 四字节对齐</h2><h3 id="4-什么是四字节对齐"><a href="#4-什么是四字节对齐" class="headerlink" title="4. 什么是四字节对齐"></a>4. 什么是四字节对齐</h3><blockquote><p>现代计算机中，内存空间按照字节划分，理论上可以从任何起始地址访问任意类型的变量。但实际中在访问特定类型变量时经常在特定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序一个接一个地存放，这就是对齐。</p></blockquote><h3 id="4-1-四字节对齐作用"><a href="#4-1-四字节对齐作用" class="headerlink" title="4.1 四字节对齐作用"></a>4.1 四字节对齐作用</h3><blockquote><p>定义结构体成员时应当注意四字节对齐，保证内存利用最大化。但要注意，在32位机中使用1字节或2字节对齐，反而会降低变量访问速度。因此需要考虑处理器类型。还应考虑编译器的类型。在VC/C++和GNU GCC中都是默认是4字节对齐。</p></blockquote><h2 id="5-柔性数组"><a href="#5-柔性数组" class="headerlink" title="5. 柔性数组"></a>5. 柔性数组</h2><blockquote><p>定义结构体时，最后一个成员定义为</p></blockquote><pre><code>struct test {    int a;    char b[0];}  </code></pre><blockquote><p>b[0]就称为柔性数组，使用</p></blockquote><pre><code>sizeof(struct test);</code></pre><blockquote><p>返回值为4，即b[0]不占用内存空间。</p></blockquote><h2 id="6-数字转字符"><a href="#6-数字转字符" class="headerlink" title="6. 数字转字符"></a>6. 数字转字符</h2><blockquote><p>C语言书籍上可能出现过如下代码将数字转为字符</p></blockquote><pre><code>int a = 0;char b = a + &apos;0&apos;;</code></pre><blockquote><p>这个操作有局限性，当a的值超过9的时候就会得到你意向不到的结果，</p></blockquote><pre><code>int a = 10;char b = a + &apos;0&apos;;     </code></pre><blockquote><p>这个时候字符b的值为’:’</p></blockquote><h2 id="7-fork函数注意事项"><a href="#7-fork函数注意事项" class="headerlink" title="7. fork函数注意事项"></a>7. fork函数注意事项</h2><blockquote><p>fork函数用来产生一个子进程，而且会复制父进程的资源（包括打开的文件描述符，变量等），无论是在子进程还是父进程对打开的文件描述符都需要谨慎对待，调用close函数关闭文件描述符可能不会报错，但是删除文件的时候就会出问题。</p></blockquote><h2 id="8-变参宏定义"><a href="#8-变参宏定义" class="headerlink" title="8. 变参宏定义"></a>8. 变参宏定义</h2><blockquote><p>C99定义了一种变参宏定义</p></blockquote><pre><code>#define LOG(format, ...) fprintf(stdout, format, __VA_ARGS__) </code></pre><blockquote><p>…表示可变参数列表，<strong>VA_ARGS</strong>在预处理中，会被实际的参数集（实参列表）所替换。<br>同时gcc还支持带可以变参数名的方式（<strong>注意：VC不支持,即在vs环境下无法使用</strong>）：</p></blockquote><pre><code>#define LOG(format, args...) fprintf(stdout, format, args)  </code></pre><blockquote><p>同样，args在预处理过程中，会被实际的参数集所替换。其用法和上面的方式一样，只是参数的符号有变。</p></blockquote><h2 id="9-整数相除"><a href="#9-整数相除" class="headerlink" title="9. 整数相除"></a>9. 整数相除</h2><blockquote><p>C语言中，两个int型相除只能得到int型，若结果分子小于分母，则结果为0。必要时，将分子或者分母强转为float型，则结果为float型。</p></blockquote><h2 id="10-屏蔽gcc编译函数未使用错误"><a href="#10-屏蔽gcc编译函数未使用错误" class="headerlink" title="10. 屏蔽gcc编译函数未使用错误"></a>10. 屏蔽gcc编译函数未使用错误</h2><blockquote><p>函数定义了未使用在visual studio中，不会报错，但是使用gcc编译时就要报错，这个时候需要添加一个编译标志如下</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS=<span class="string">"$CFLAGS -Wno-unused-function"</span></span><br></pre></td></tr></table></figure><blockquote><p>添加上这个标志以后，就不会报错了。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-使用close函数出现bad-file-descriptor错误&quot;&gt;&lt;a href=&quot;#1-使用close函数出现bad-file
      
    
    </summary>
    
      <category term="总结" scheme="https://weeweetan.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C" scheme="https://weeweetan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习笔记</title>
    <link href="https://weeweetan.github.io/2019/05/08/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://weeweetan.github.io/2019/05/08/Nginx学习笔记/</id>
    <published>2019-05-08T02:49:55.000Z</published>
    <updated>2019-08-16T08:26:32.125Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="1-编译步骤"><a href="#1-编译步骤" class="headerlink" title="1. 编译步骤"></a>1. 编译步骤</h2><h3 id="1-1-configure原理"><a href="#1-1-configure原理" class="headerlink" title="1.1 configure原理"></a>1.1 configure原理</h3><blockquote><p>configure本质上是个shell脚本，所以如果要完全理解configure需要熟悉shell基本语法，除此之外，脚本中大量运用了test、sed、cat、echo、grep等命令以及重定向符，所以也需要了解这些命令的用法。</p></blockquote><h3 id="1-2-auto脚本"><a href="#1-2-auto脚本" class="headerlink" title="1.2 auto脚本"></a>1.2 auto脚本</h3><blockquote><p>auto脚本由一系列脚本组成，他们有一些是实现一些通用功能由其它脚本来调用（如have），有一些则是完成一些特定的功能（如option）。脚本之间的主要执行顺序及调用关系如下图所示（由上到下，表示主流程的执行）：<br><img src="/images/2019-05-13_nginx.png" alt><br>上图中的脚本都位于auto目录下，所以省略，而configure与auto同级目录，故完整执行脚本如.auto/options所示。</p></blockquote><h4 id="1-2-1-auto-options脚本"><a href="#1-2-1-auto-options脚本" class="headerlink" title="1.2.1 auto/options脚本"></a>1.2.1 auto/options脚本</h4><blockquote><p>auto/options主是处理用户输入的configure选项，以及输出帮助信息等。auto/options的目的主要是处理用户选项，并由选项生成一些全局变量的值，这些值在其它文件中会用到。该文件也会输出configure的帮助信息。<br>应当注意如下代码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for option</span><br><span class="line">do</span><br><span class="line">    opt="$opt `echo $option | sed -e \"s/\(--[^=]*=\)\(.* .*\)/\1'\2'/\"`"</span><br></pre></td></tr></table></figure><blockquote><p>for后面可以省略要遍历的变量,这时,表示在遍历$@,即用户传入的所有变量组合</p></blockquote><h4 id="1-2-2-auto-init脚本"><a href="#1-2-2-auto-init脚本" class="headerlink" title="1.2.2 auto/init脚本"></a>1.2.2 auto/init脚本</h4><blockquote><blockquote><p>该文件的目录在于初始化一些临时文件的路径，检查echo的兼容性，并创建最原始的Makefile文件。</p><footer><strong>淘宝</strong><cite><a href="http://tengine.taobao.org/book/chapter_09.html#auto" target="_blank" rel="noopener">Nginx开发从入门到精通</a></cite></footer></blockquote><p>注意：这里生成的Makefile文件与configure文件在同一目录，真正执行编译指令的Makefile在objs目录下</p></blockquote><h4 id="1-2-3-auto-sources脚本"><a href="#1-2-3-auto-sources脚本" class="headerlink" title="1.2.3 auto/sources脚本"></a>1.2.3 auto/sources脚本</h4><blockquote><blockquote><p>该文件从文件名中就可以看出，它的主要功能是跟源文件相关的。它的主要作用是定义不同功能或系统所需要的文件的变量。根据功能，分为CORE/REGEX/EVENT/UNIX/FREEBSD/HTTP等。每一个功能将会由四个变量组成，”_MODULES”表示此功能相关的模块，最终会输出到ngx_modules.c文件中，即动态生成需要编译到nginx中的模块；”INCS”表示此功能依赖的源码目录，查找头文件的时候会用到，在编译选项中，会出现在”-I”中；”DEPS”显示指明在Makefile中需要依赖的文件名，即编译时，需要检查这些文件的更新时间；”SRCS”表示需要此功能编译需要的源文件。</p><footer><strong>淘宝</strong><cite><a href="http://tengine.taobao.org/book/chapter_09.html#auto" target="_blank" rel="noopener">Nginx开发从入门到精通</a></cite></footer></blockquote><p>根据上面的描述，所以如果需要对nginx进行功能扩展，添加相应的C文件后，修改这个脚本就可以将自己的功能编译进nginx。</p></blockquote><h2 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2. 源码解析"></a>2. 源码解析</h2><h3 id="2-1-模块相关"><a href="#2-1-模块相关" class="headerlink" title="2.1 模块相关"></a>2.1 模块相关</h3><blockquote><p>在<em>ngx_module.h</em>中引用了两个至关重要的外部变量</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">ngx_module_t</span>  *ngx_modules[];</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>          *ngx_module_names[];</span><br></pre></td></tr></table></figure><blockquote><p><em>ngx_modules</em>跟<em>ngx_module_names</em>定义在<em>ngx_modules.c</em>中，这个文件并不存在于nginx源码中，在编译时执行configure动态生成。ngx_modules数组包含所有的Nginx模块，Nginx启动时会调用<em>ngx_cycle_modules</em>函数，原型如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ngx_int_t</span> ngx_cycle_modules(<span class="keyword">ngx_cycle_t</span> *cycle)</span><br></pre></td></tr></table></figure><blockquote><p>此函数的目的是将ngx_modules中的数据复制到cycle中，函数调用顺序如下：</p></blockquote><pre><code>main-&gt;ngx_init_cycle-&gt;ngx_cycle_modules</code></pre><h3 id="2-2-数据结构"><a href="#2-2-数据结构" class="headerlink" title="2.2 数据结构"></a>2.2 数据结构</h3><h4 id="2-2-1-ngx-str-t"><a href="#2-2-1-ngx-str-t" class="headerlink" title="2.2.1 ngx_str_t"></a>2.2.1 ngx_str_t</h4><blockquote><p>Nginx开发从入门到精通已经对<a href="http://tengine.taobao.org/book/chapter_02.html#ngx-str-t-100" target="_blank" rel="noopener">ngx_str_t</a>的定义以及相关api进行了非常详细的讲解，以下为定义：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">size_t</span>      len;</span><br><span class="line">    u_char     *data;</span><br><span class="line">&#125; <span class="keyword">ngx_str_t</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><ol><li>不要试图复制char *到data所指向的内存，可能导致coredump</li><li>初始化相关api都是基于常量字符串，char *类型慎用</li><li>如果非要复制char *到data所指向的内存，一定先分配内存</li></ol></blockquote><h4 id="2-2-2-ngx-array-t"><a href="#2-2-2-ngx-array-t" class="headerlink" title="2.2.2 ngx_array_t"></a>2.2.2 ngx_array_t</h4><blockquote><p>Nginx开发从入门到精通已经对<a href="http://tengine.taobao.org/book/chapter_02.html#ngx-array-t-100" target="_blank" rel="noopener">ngx_array_t</a>的定义以及相关api进行了非常详细的讲解，以下为定义：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_array_s</span>       <span class="title">ngx_array_t</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_array_s</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span>        *elts;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>   nelts;</span><br><span class="line">    <span class="keyword">size_t</span>       size;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>   nalloc;</span><br><span class="line">    <span class="keyword">ngx_pool_t</span>  *pool;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项</p><ol><li>如果使用ngx_array_t作为字符串容器，在调用ngx_array_create时，使用字符串长度最后一个参数</li><li>ngx_array_push返回第n个元素首地址，要注意指针运算</li></ol></blockquote><h2 id="3-handler模块的编写步骤"><a href="#3-handler模块的编写步骤" class="headerlink" title="3. handler模块的编写步骤"></a>3. handler模块的编写步骤</h2><blockquote><ol><li>编写模块基本结构。包括模块的定义，模块上下文结构，模块的配置结构等，即分别初始化如下变量：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_command_t</span> ngx_http_module_name_commands[] = &#123;&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ngx_http_module_t</span> ngx_http_module_name_module_ctx = &#123;&#125;;</span><br><span class="line"><span class="keyword">ngx_module_t</span> ngx_http_module_name_module = &#123;&#125;;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>实现handler的挂载函数。根据模块的需求选择正确的挂载方式，即实现如下函数：</li></ol></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static ngx_int_t ngx_http_module_name_init(ngx_conf_t *cf)；</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>编写handler处理函数。模块的功能主要通过这个函数来完成，即实现如下函数：</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ngx_int_t <span class="title">ngx_http_module_name_handler</span><span class="params">(<span class="keyword">ngx_http_request_t</span> *r)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="3-1-模块编译"><a href="#3-1-模块编译" class="headerlink" title="3.1 模块编译"></a>3.1 模块编译</h3><blockquote><blockquote><p>对于开发一个模块，我们是需要把这个模块的C代码组织到一个目录里，同时需要编写一个config文件。这个config文件的内容就是告诉nginx的编译脚本，该如何进行编译。</p><footer><strong>淘宝</strong><cite><a href="http://tengine.taobao.org/book/chapter_03.html#config" target="_blank" rel="noopener">Nginx开发从入门到精通</a></cite></footer></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">ngx_addon_name=ngx_http_hello_module</span><br><span class="line">HTTP_MODULES=&quot;$HTTP_MODULES ngx_http_hello_module&quot;</span><br><span class="line">NGX_ADDON_SRCS=&quot;$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_hello_module.c&quot;</span><br></pre></td></tr></table></figure><blockquote><p>执行如下命令进行编译</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure –add-module=/home/jizhao/open_source/book_module        </span><br></pre></td></tr></table></figure><h2 id="4-部分功能简介"><a href="#4-部分功能简介" class="headerlink" title="4. 部分功能简介"></a>4. 部分功能简介</h2><h3 id="4-1-日志系统"><a href="#4-1-日志系统" class="headerlink" title="4.1 日志系统"></a>4.1 日志系统</h3><blockquote><p>Nginx的日志系统分为两个部分，一个是Nginx核心的错误日志（包括debug日志），一个是各模块的访问日志，整个Nginx框架中主要以核心的错误日志为主，各模块的访问日志根据模块调用顺序使用，下面分别介绍两种日志系统。</p></blockquote><h4 id="4-1-1-错误日志"><a href="#4-1-1-错误日志" class="headerlink" title="4.1.1 错误日志"></a>4.1.1 错误日志</h4><blockquote><p>关于错误日志的配置指令可以参考<a href="http://nginx.org/en/docs/ngx_core_module.html#error_log" target="_blank" rel="noopener">error_log</a>，分析Nginx源码可以发现，源码中多处使用ngx_log_debug0，ngx_log_debug1等类似的宏定义，启用这些宏定义需要在configure的时候执行–with-debug。<br>错误日志初始化分为两个阶段，一个是ngx_log_init函数中初始化日志对象，另外一个就是在解析配置文件的时候会新建一个日志对象。</p></blockquote><h4 id="4-1-2-访问日志"><a href="#4-1-2-访问日志" class="headerlink" title="4.1.2 访问日志"></a>4.1.2 访问日志</h4><blockquote><p>目前实现了访问日志的官方模块有http模块，stream模块，其中http模块的配置指令可以参考<a href="http://nginx.org/en/docs/http/ngx_http_log_module.html" target="_blank" rel="noopener">ngx_http_log_module</a>。http模块的日志系统是以http第三方模块的形式存在，所以编写的时候遵循第3节的规则，Nginx将HTTP请求划分为11个阶段，访问日志是最后一个阶段，所以访问日志在HTTP请求完成时写入。</p></blockquote><h3 id="4-2-upstream机制"><a href="#4-2-upstream机制" class="headerlink" title="4.2 upstream机制"></a>4.2 upstream机制</h3><blockquote><p>upstream机制使得nginx能够作为代理服务器，或者负载均衡服务器，将来自客户端的请求转发到上游，并将上游响应转发到客户端。参考配置如下</p></blockquote><pre><code>#位于http上下文中upstream local {    server 127.0.0.1:8080 weight=5;    server 127.0.0.1:80 weight=2;}</code></pre><h3 id="4-3-反向代理"><a href="#4-3-反向代理" class="headerlink" title="4.3 反向代理"></a>4.3 反向代理</h3><blockquote><p>nginx反向代理实际上是一个upstream模块，实现upstream机制的几个回调函数。参考配置如下：</p></blockquote><pre><code>location / {    proxy_pass http://local}</code></pre><h2 id="5-编码过程中遇到的问题"><a href="#5-编码过程中遇到的问题" class="headerlink" title="5. 编码过程中遇到的问题"></a>5. 编码过程中遇到的问题</h2><h3 id="5-1-使用ngx-sprintf遇到的问题"><a href="#5-1-使用ngx-sprintf遇到的问题" class="headerlink" title="5.1 使用ngx_sprintf遇到的问题"></a>5.1 使用ngx_sprintf遇到的问题</h3><blockquote><p>ngx_sprintf函数用于向缓冲区中复制格式化字符串，跟标准C的sprintf函数一样，Nginx增加了一些格式，具体可以看ngx_string.c的源码，接下来结合代码说明一些问题：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">         </span><br><span class="line"><span class="keyword">size_t</span> a;</span><br><span class="line"><span class="keyword">off_t</span> b;</span><br><span class="line">u_char c[<span class="number">20</span>] = &#123;<span class="string">"0"</span>&#125;;</span><br><span class="line"></span><br><span class="line">ngx_sprintf(c, <span class="string">"a:%z,b:%O"</span>, a, b);</span><br><span class="line"> </span><br></pre></td></tr></table></figure><blockquote><p>上面这段代码是正确示范，若a也为off_t类型，在执行ngx_sprintf时一定要使用%O，否者b的值会受影响。</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>此博文只粗略记录笔记，在后续会写详细的博客对nginx进行分析</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-编译步骤&quot;&gt;&lt;a href=&quot;#1-编译步骤&quot; class=&quot;headerlink&quot; title=&quot;1. 编译步骤&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
      <category term="Nginx" scheme="https://weeweetan.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://weeweetan.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>libxml2使用心得</title>
    <link href="https://weeweetan.github.io/2019/05/04/libxml2%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>https://weeweetan.github.io/2019/05/04/libxml2使用心得/</id>
    <published>2019-05-04T14:21:35.000Z</published>
    <updated>2019-05-15T07:04:26.805Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>由于当前项目以xml文件作为通信媒介，故需要对xml文档进行解析与生成。但是libxml2文档写得不是很好，也没有例程，我在实际工作中主要参考<a href="http://www.blogjava.net/wxb_nudt/archive/2007/11/18/161340.html" target="_blank" rel="noopener">C++的XML编程经验――LIBXML2库使用指南</a>，这篇博文讲得很详细，我在这里只是做出一点补充。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>xml文档使用UTF-8编码，所以如果xml文档中包含中文，使用libxml2读取内容相关API时，在调试界面中看到读取出来的中文内容为乱码，这个时候就需要将内容转换为程序当前运行的编码格式。我使用visual studio2017，里面默认GBK编码，所以我在使用xml内容时就需要将UTF-8编码的内容转换为GBK，其他同理。</p></blockquote><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><blockquote><p>我使用GLib2的<em>g_locale_from_utf8</em>将内容转换为本地程序默认的编码格式，在写入xml内容时使用<em>g_locale_to_utf8</em>将内容转换为UTF-8.</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>总而言之，在读取xml相关内容时，首先将内容转换为程序默认的编码格式，写入xml内容时，将程序默认的编码格式转换为UTF-8。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockqu
      
    
    </summary>
    
      <category term="libxml" scheme="https://weeweetan.github.io/categories/libxml/"/>
    
    
      <category term="libxml" scheme="https://weeweetan.github.io/tags/libxml/"/>
    
  </entry>
  
  <entry>
    <title>GLib使用心得</title>
    <link href="https://weeweetan.github.io/2019/04/28/GLib%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>https://weeweetan.github.io/2019/04/28/GLib使用心得/</id>
    <published>2019-04-28T05:51:59.000Z</published>
    <updated>2019-07-11T03:11:05.932Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>关于GLib的介绍这里就不赘述了，具体API介绍可以去<a href="https://developer.gnome.org/glib/" target="_blank" rel="noopener">GLib API Reference</a>查阅，这里只是记录一下使用相关API所遇到的一些坑。</p></blockquote><h2 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h2><h3 id="字符串相关API"><a href="#字符串相关API" class="headerlink" title="字符串相关API"></a>字符串相关API</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function">GString *<span class="title">g_string_new</span><span class="params">(<span class="keyword">const</span> gchar *init)</span></span>;</span><br><span class="line"><span class="function">GString *<span class="title">g_string_append</span><span class="params">(GString *<span class="built_in">string</span>, <span class="keyword">const</span> gchar *val)</span></span>;</span><br><span class="line"><span class="function">GString *<span class="title">g_string_prepend</span><span class="params">(GString *<span class="built_in">string</span>, <span class="keyword">const</span> gchar *val)</span></span>;</span><br><span class="line"><span class="function">gchar *<span class="title">g_string_free</span><span class="params">(GString *<span class="built_in">string</span>, gboolean free_segment)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>如果需要对字符串进行拼接操作，使用GString相关API是非常方便的。<strong>注意</strong> g_string_new跟g_string_free一定要配套使用，否则会内存泄漏。<br><em>g_string_append</em>跟<em>g_string_prepend</em>都是直接在原字符串上操作，这点要切记。</p></blockquote><h3 id="字符转换相关API"><a href="#字符转换相关API" class="headerlink" title="字符转换相关API"></a>字符转换相关API</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">gchar *<span class="title">g_filename_display_basename</span><span class="params">(<span class="keyword">const</span> gchar *filename)</span></span>;</span><br><span class="line"><span class="function">gchar *<span class="title">g_locale_from_utf8</span><span class="params">(<span class="keyword">const</span> gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)</span></span>;</span><br><span class="line"><span class="function">gchar *<span class="title">g_locale_to_utf8</span><span class="params">(<span class="keyword">const</span> gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>g_filename_display_basename 此函数的参数字符编码必须是UTF-8，否则返回的字符串为乱码<br>g_locale_from_utf8 此函数将参数字符串从UTF-8编码转换为程序当前的编码，一般是GB2312，一般用于读取UTF-8编码的文件<br>g_locale_to_utf8 此函数将参数字符串从程序当前编码转换为UTF-8<br>下面看个例子, 比如我们有个含中文的文件名 <em>/data/test/哈哈.txt</em>如果想获得 <em>哈哈.txt</em>，则必须首先使用 <em>g_locale_to_utf8</em>函数转换一次, 然后再去获取basename</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GString *<span class="built_in">string</span> = g_string_new(<span class="string">"/data/test/哈哈.txt"</span>);</span><br><span class="line">gchar *str = g_locale_to_utf8(<span class="built_in">string</span>-&gt;str, <span class="built_in">string</span>-&gt;len, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">gchar *basename = g_filename_display_basename(str);</span><br></pre></td></tr></table></figure><blockquote><p>如果想使用GString <em>类型保存basename，则必须重新申请内存块<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GString *basename_string = g_string_new(basename); </span><br></pre></td></tr></table></figure><br>千万别像下面这样做<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GString *<span class="built_in">string</span> = g_string_new(<span class="string">"/data/test/哈哈.txt"</span>);</span><br><span class="line"><span class="built_in">string</span>-&gt;str = g_locale_to_utf8(<span class="built_in">string</span>-&gt;str, <span class="built_in">string</span>-&gt;len, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); </span><br></pre></td></tr></table></figure><br>如果像上面那样做，因为转换后的字符串长度跟转换前不一样，后续使用会出问题，</em>g_locale_from_utf8<em> 同理<br><strong>注意</strong> </em>g_locale_to_utf8<em>返回的char </em>需要手动释放内存</p></blockquote><h3 id="解析key-value文件API"><a href="#解析key-value文件API" class="headerlink" title="解析key-value文件API"></a>解析key-value文件API</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">GKeyFile *<span class="title">g_key_file_new</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">gboolean <span class="title">g_key_file_load_from_file</span><span class="params">(GKeyFile *key_file, <span class="keyword">const</span> gchar *file, GKeyFileFlags flags, GError **error)</span></span>;</span><br><span class="line"><span class="function">gint <span class="title">g_key_file_get_integer</span><span class="params">(GKeyFile *key_file, <span class="keyword">const</span> gchar *group_name,  <span class="keyword">const</span> gchar *key, GError **error)</span></span>;</span><br><span class="line"><span class="function">gchar *<span class="title">g_key_file_get_string</span><span class="params">(GKeyFile *key_file, <span class="keyword">const</span> gchar *group_name, <span class="keyword">const</span> gchar *key, GError **error)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_key_file_free</span><span class="params">(GKeyFile *key_file)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>这几个API很好理解,用来解析具有键值对特征的文件,<em>g_key_file_new</em>跟<em>g_key_file_free</em>配套使用;<br>g_key_file_load_from_file的第二个参数的字符编码格式为UTF-8,在使用时一定要先转换一次;</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockqu
      
    
    </summary>
    
      <category term="GLib" scheme="https://weeweetan.github.io/categories/GLib/"/>
    
    
      <category term="GLib" scheme="https://weeweetan.github.io/tags/GLib/"/>
    
  </entry>
  
  <entry>
    <title>调用glib库出现0xc000007b解决办法</title>
    <link href="https://weeweetan.github.io/2019/04/18/%E8%B0%83%E7%94%A8glib%E5%BA%93%E5%87%BA%E7%8E%B00xc000007b%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://weeweetan.github.io/2019/04/18/调用glib库出现0xc000007b解决办法/</id>
    <published>2019-04-18T14:47:29.000Z</published>
    <updated>2019-05-18T01:22:38.363Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>之前一直在Linux环境下使用glib库，也一直没有遇到过这样的问题，这次在visual studio上配置使用glib，出现问题，如下图所示：<br><img src="/images/2019-04-18_glib_1.png" alt></p></blockquote><blockquote><p>网上的解决办法都试过，没能解决问题。</p></blockquote><h2 id="出现转机"><a href="#出现转机" class="headerlink" title="出现转机"></a>出现转机</h2><blockquote><p>出现转机是在朋友推荐了一款名为depends的软件，可以分析执行程序所需要的库，关于depends的使用方法这里就不仔细介绍了。</p></blockquote><h2 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h2><blockquote><p>我使用depends分析libglib-2.0.dll，结果如下图所示<br><img src="/images/2019-04-18_glib_2.png" alt><br>从图中左上方区域可以看出libglib-2.0.dll需要libintl-8.dll，而这个dll又缺失，解决办法就显而易见。<br>1、网上下载libintl-8.dll<br>2、将libintl-8.dll与libglib-2.0.dll存放在同一目录下</p></blockquote><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><blockquote><p>上述步骤完成之后，再次使用depends检查，如下图所示：<br><img src="/images/2019-04-18_glib_3.png" alt><br>程序也正常运行</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>我这里只是说明解决问题的方法，图中dll版本问题自行忽略</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 24 2019 18:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockqu
      
    
    </summary>
    
      <category term="GLib" scheme="https://weeweetan.github.io/categories/GLib/"/>
    
    
      <category term="GLib" scheme="https://weeweetan.github.io/tags/GLib/"/>
    
  </entry>
  
</feed>
